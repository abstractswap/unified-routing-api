diff --git a/node_modules/@uniswap/universal-router-sdk/dist/addresses.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/addresses.d.ts
new file mode 100644
index 0000000..16ebc6e
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/addresses.d.ts
@@ -0,0 +1,54 @@
+import { SupportedChainsType } from './chains';
+declare type AddressMap = {
+    [chainId: number]: string;
+};
+declare type ChainAddresses = {
+    v3CoreFactoryAddress: string;
+    multicallAddress: string;
+    quoterAddress: string;
+    v3MigratorAddress?: string;
+    nonfungiblePositionManagerAddress?: string;
+    tickLensAddress?: string;
+    swapRouter02Address?: string;
+    mixedRouteQuoterV1Address?: string;
+    mixedRouteQuoterV2Address?: string;
+};
+export declare const UNI_ADDRESSES: AddressMap;
+export declare const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = "0x8B799381ac40b838BBA4131ffB26197C432AFe78";
+/**
+ * @deprecated use V2_FACTORY_ADDRESSES instead
+ */
+export declare const V2_FACTORY_ADDRESS = "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f";
+export declare const V2_FACTORY_ADDRESSES: AddressMap;
+/**
+ * @deprecated use V2_ROUTER_ADDRESSES instead
+ */
+export declare const V2_ROUTER_ADDRESS = "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D";
+export declare const V2_ROUTER_ADDRESSES: AddressMap;
+export declare const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses>;
+export declare const V3_CORE_FACTORY_ADDRESSES: AddressMap;
+export declare const V3_MIGRATOR_ADDRESSES: AddressMap;
+export declare const MULTICALL_ADDRESSES: AddressMap;
+/**
+ * The oldest V0 governance address
+ */
+export declare const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap;
+/**
+ * The older V1 governance address
+ */
+export declare const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap;
+/**
+ * The latest governor bravo that is currently admin of timelock
+ */
+export declare const GOVERNANCE_BRAVO_ADDRESSES: AddressMap;
+export declare const TIMELOCK_ADDRESSES: AddressMap;
+export declare const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap;
+export declare const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap;
+export declare const QUOTER_ADDRESSES: AddressMap;
+export declare const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap;
+export declare const ENS_REGISTRAR_ADDRESSES: AddressMap;
+export declare const SOCKS_CONTROLLER_ADDRESSES: AddressMap;
+export declare const TICK_LENS_ADDRESSES: AddressMap;
+export declare const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap;
+export declare const SWAP_ROUTER_02_ADDRESSES: (chainId: number) => string;
+export {};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/chains.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/chains.d.ts
new file mode 100644
index 0000000..9670209
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/chains.d.ts
@@ -0,0 +1,41 @@
+export declare enum ChainId {
+    MAINNET = 1,
+    GOERLI = 5,
+    SEPOLIA = 11155111,
+    OPTIMISM = 10,
+    OPTIMISM_GOERLI = 420,
+    OPTIMISM_SEPOLIA = 11155420,
+    ARBITRUM_ONE = 42161,
+    ARBITRUM_GOERLI = 421613,
+    ARBITRUM_SEPOLIA = 421614,
+    POLYGON = 137,
+    POLYGON_MUMBAI = 80001,
+    CELO = 42220,
+    CELO_ALFAJORES = 44787,
+    GNOSIS = 100,
+    MOONBEAM = 1284,
+    BNB = 56,
+    AVALANCHE = 43114,
+    BASE_GOERLI = 84531,
+    BASE = 8453,
+    ZORA = 7777777,
+    ZORA_SEPOLIA = 999999999,
+    ROOTSTOCK = 30,
+    BLAST = 81457,
+    ZKSYNC = 324,
+    ABSTRACT_TESTNET = 11124,
+    ZERO = 543210,
+    BOB = 60808
+}
+export declare const SUPPORTED_CHAINS: readonly [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.OPTIMISM_SEPOLIA, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.ARBITRUM_SEPOLIA, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI, ChainId.ZORA, ChainId.ZORA_SEPOLIA, ChainId.ROOTSTOCK, ChainId.BLAST, ChainId.ZKSYNC, ChainId.ABSTRACT_TESTNET, ChainId.ZERO, ChainId.BOB];
+export declare type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number];
+export declare enum NativeCurrencyName {
+    ETHER = "ETH",
+    MATIC = "MATIC",
+    CELO = "CELO",
+    GNOSIS = "XDAI",
+    MOONBEAM = "GLMR",
+    BNB = "BNB",
+    AVAX = "AVAX",
+    ROOTSTOCK = "RBTC"
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/constants.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/constants.d.ts
new file mode 100644
index 0000000..31e9cfc
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/constants.d.ts
@@ -0,0 +1,12 @@
+import JSBI from 'jsbi';
+export declare type BigintIsh = JSBI | string | number;
+export declare enum TradeType {
+    EXACT_INPUT = 0,
+    EXACT_OUTPUT = 1
+}
+export declare enum Rounding {
+    ROUND_DOWN = 0,
+    ROUND_HALF_UP = 1,
+    ROUND_UP = 2
+}
+export declare const MaxUint256: JSBI;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/Command.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/Command.d.ts
deleted file mode 100644
index fff91f4..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/Command.d.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { RoutePlanner } from '../utils/routerCommands';
-export declare type TradeConfig = {
-    allowRevert: boolean;
-};
-export declare enum RouterTradeType {
-    UniswapTrade = "UniswapTrade",
-    NFTTrade = "NFTTrade",
-    UnwrapWETH = "UnwrapWETH"
-}
-export interface Command {
-    tradeType: RouterTradeType;
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/NFTTrade.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/NFTTrade.d.ts
deleted file mode 100644
index 1de3b91..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/NFTTrade.d.ts
+++ /dev/null
@@ -1,44 +0,0 @@
-import { BigNumber, BigNumberish } from 'ethers';
-import { SeaportData } from './protocols/seaport';
-import { FoundationData } from './protocols/foundation';
-import { NFTXData } from './protocols/nftx';
-import { NFT20Data } from './protocols/nft20';
-import { RoutePlanner } from '../utils/routerCommands';
-import { Command, RouterTradeType, TradeConfig } from './Command';
-import { SudoswapData } from './protocols/sudoswap';
-import { CryptopunkData } from './protocols/cryptopunk';
-import { X2Y2Data } from './protocols/x2y2';
-import { ElementData } from './protocols/element-market';
-import { LooksRareV2Data } from './protocols/looksRareV2';
-export declare type SupportedProtocolsData = SeaportData | FoundationData | NFTXData | LooksRareV2Data | X2Y2Data | CryptopunkData | NFT20Data | SudoswapData | ElementData;
-export declare abstract class NFTTrade<T> implements Command {
-    readonly tradeType: RouterTradeType;
-    readonly orders: T[];
-    readonly market: Market;
-    constructor(market: Market, orders: T[]);
-    abstract encode(planner: RoutePlanner, config: TradeConfig): void;
-    abstract getBuyItems(): BuyItem[];
-    abstract getTotalPrice(token?: string): BigNumber;
-}
-export declare type BuyItem = {
-    tokenAddress: string;
-    tokenId: BigNumberish;
-    tokenType: TokenType;
-    amount?: BigNumberish;
-};
-export declare enum Market {
-    Foundation = "foundation",
-    LooksRareV2 = "looksrareV2",
-    NFT20 = "nft20",
-    NFTX = "nftx",
-    Seaport = "seaport",
-    Sudoswap = "Sudoswap",
-    Cryptopunks = "cryptopunks",
-    X2Y2 = "x2y2",
-    Element = "element"
-}
-export declare enum TokenType {
-    ERC721 = "ERC721",
-    ERC1155 = "ERC1155",
-    Cryptopunk = "Cryptopunk"
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/baseCurrency.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/baseCurrency.d.ts
new file mode 100644
index 0000000..8266283
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/baseCurrency.d.ts
@@ -0,0 +1,49 @@
+import { Currency } from './currency';
+import { Token } from './token';
+/**
+ * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies
+ */
+export declare abstract class BaseCurrency {
+    /**
+     * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)
+     */
+    abstract readonly isNative: boolean;
+    /**
+     * Returns whether the currency is a token that is usable in Uniswap without wrapping
+     */
+    abstract readonly isToken: boolean;
+    /**
+     * The chain ID on which this currency resides
+     */
+    readonly chainId: number;
+    /**
+     * The decimals used in representing currency amounts
+     */
+    readonly decimals: number;
+    /**
+     * The symbol of the currency, i.e. a short textual non-unique identifier
+     */
+    readonly symbol?: string;
+    /**
+     * The name of the currency, i.e. a descriptive textual non-unique identifier
+     */
+    readonly name?: string;
+    /**
+     * Constructs an instance of the base class `BaseCurrency`.
+     * @param chainId the chain ID on which this currency resides
+     * @param decimals decimals of the currency
+     * @param symbol symbol of the currency
+     * @param name of the currency
+     */
+    protected constructor(chainId: number, decimals: number, symbol?: string, name?: string);
+    /**
+     * Returns whether this currency is functionally equivalent to the other currency
+     * @param other the other currency
+     */
+    abstract equals(other: Currency): boolean;
+    /**
+     * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must
+     * implement this to be used in Uniswap
+     */
+    abstract get wrapped(): Token;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/currency.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/currency.d.ts
new file mode 100644
index 0000000..1853a28
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/currency.d.ts
@@ -0,0 +1,3 @@
+import { NativeCurrency } from './nativeCurrency';
+import { Token } from './token';
+export declare type Currency = NativeCurrency | Token;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/ether.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/ether.d.ts
new file mode 100644
index 0000000..e8021e4
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/ether.d.ts
@@ -0,0 +1,13 @@
+import { Currency } from './currency';
+import { NativeCurrency } from './nativeCurrency';
+import { Token } from './token';
+/**
+ * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets
+ */
+export declare class Ether extends NativeCurrency {
+    protected constructor(chainId: number);
+    get wrapped(): Token;
+    private static _etherCache;
+    static onChain(chainId: number): Ether;
+    equals(other: Currency): boolean;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/currencyAmount.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/currencyAmount.d.ts
new file mode 100644
index 0000000..b59581b
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/currencyAmount.d.ts
@@ -0,0 +1,31 @@
+import JSBI from 'jsbi';
+import { Currency } from '../currency';
+import { Token } from '../token';
+import { Fraction } from './fraction';
+import { BigintIsh, Rounding } from '../../constants';
+export declare class CurrencyAmount<T extends Currency> extends Fraction {
+    readonly currency: T;
+    readonly decimalScale: JSBI;
+    /**
+     * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount
+     * @param currency the currency in the amount
+     * @param rawAmount the raw token or ether amount
+     */
+    static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T>;
+    /**
+     * Construct a currency amount with a denominator that is not equal to 1
+     * @param currency the currency
+     * @param numerator the numerator of the fractional token amount
+     * @param denominator the denominator of the fractional token amount
+     */
+    static fromFractionalAmount<T extends Currency>(currency: T, numerator: BigintIsh, denominator: BigintIsh): CurrencyAmount<T>;
+    protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh);
+    add(other: CurrencyAmount<T>): CurrencyAmount<T>;
+    subtract(other: CurrencyAmount<T>): CurrencyAmount<T>;
+    multiply(other: Fraction | BigintIsh): CurrencyAmount<T>;
+    divide(other: Fraction | BigintIsh): CurrencyAmount<T>;
+    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;
+    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;
+    toExact(format?: object): string;
+    get wrapped(): CurrencyAmount<Token>;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/fraction.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/fraction.d.ts
new file mode 100644
index 0000000..33e689a
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/fraction.d.ts
@@ -0,0 +1,24 @@
+import JSBI from 'jsbi';
+import { BigintIsh, Rounding } from '../../constants';
+export declare class Fraction {
+    readonly numerator: JSBI;
+    readonly denominator: JSBI;
+    constructor(numerator: BigintIsh, denominator?: BigintIsh);
+    private static tryParseFraction;
+    get quotient(): JSBI;
+    get remainder(): Fraction;
+    invert(): Fraction;
+    add(other: Fraction | BigintIsh): Fraction;
+    subtract(other: Fraction | BigintIsh): Fraction;
+    lessThan(other: Fraction | BigintIsh): boolean;
+    equalTo(other: Fraction | BigintIsh): boolean;
+    greaterThan(other: Fraction | BigintIsh): boolean;
+    multiply(other: Fraction | BigintIsh): Fraction;
+    divide(other: Fraction | BigintIsh): Fraction;
+    toSignificant(significantDigits: number, format?: object, rounding?: Rounding): string;
+    toFixed(decimalPlaces: number, format?: object, rounding?: Rounding): string;
+    /**
+     * Helper method for converting any super class back to a fraction
+     */
+    get asFraction(): Fraction;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/index.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/index.d.ts
new file mode 100644
index 0000000..15a94ae
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/index.d.ts
@@ -0,0 +1,4 @@
+export { CurrencyAmount } from './currencyAmount';
+export { Fraction } from './fraction';
+export { Percent } from './percent';
+export { Price } from './price';
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/percent.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/percent.d.ts
new file mode 100644
index 0000000..aeb68f4
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/percent.d.ts
@@ -0,0 +1,14 @@
+import { BigintIsh, Rounding } from '../../constants';
+import { Fraction } from './fraction';
+export declare class Percent extends Fraction {
+    /**
+     * This boolean prevents a fraction from being interpreted as a Percent
+     */
+    readonly isPercent: true;
+    add(other: Fraction | BigintIsh): Percent;
+    subtract(other: Fraction | BigintIsh): Percent;
+    multiply(other: Fraction | BigintIsh): Percent;
+    divide(other: Fraction | BigintIsh): Percent;
+    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;
+    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/price.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/price.d.ts
new file mode 100644
index 0000000..4a88437
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/fractions/price.d.ts
@@ -0,0 +1,38 @@
+import { BigintIsh, Rounding } from '../../constants';
+import { Currency } from '../currency';
+import { Fraction } from './fraction';
+import { CurrencyAmount } from './currencyAmount';
+export declare class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {
+    readonly baseCurrency: TBase;
+    readonly quoteCurrency: TQuote;
+    readonly scalar: Fraction;
+    /**
+     * Construct a price, either with the base and quote currency amount, or the
+     * @param args
+     */
+    constructor(...args: [TBase, TQuote, BigintIsh, BigintIsh] | [{
+        baseAmount: CurrencyAmount<TBase>;
+        quoteAmount: CurrencyAmount<TQuote>;
+    }]);
+    /**
+     * Flip the price, switching the base and quote currency
+     */
+    invert(): Price<TQuote, TBase>;
+    /**
+     * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency
+     * @param other the other price
+     */
+    multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote>;
+    /**
+     * Return the amount of quote currency corresponding to a given amount of the base currency
+     * @param currencyAmount the amount of base currency to quote against the price
+     */
+    quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote>;
+    /**
+     * Get the value scaled by decimals for formatting
+     * @private
+     */
+    private get adjustedForDecimals();
+    toSignificant(significantDigits?: number, format?: object, rounding?: Rounding): string;
+    toFixed(decimalPlaces?: number, format?: object, rounding?: Rounding): string;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/index.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/index.d.ts
index 1d268ea..3451cc4 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/index.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/index.d.ts
@@ -1,3 +1,6 @@
-export * from './protocols';
-export * from './NFTTrade';
-export * from './Command';
+export * from './fractions';
+export * from './currency';
+export * from './ether';
+export * from './nativeCurrency';
+export * from './token';
+export * from './weth9';
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/nativeCurrency.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/nativeCurrency.d.ts
new file mode 100644
index 0000000..eee1b02
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/nativeCurrency.d.ts
@@ -0,0 +1,8 @@
+import { BaseCurrency } from './baseCurrency';
+/**
+ * Represents the native currency of the chain on which it resides, e.g.
+ */
+export declare abstract class NativeCurrency extends BaseCurrency {
+    readonly isNative: true;
+    readonly isToken: false;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/cryptopunk.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/cryptopunk.d.ts
deleted file mode 100644
index 03f4ada..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/cryptopunk.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { TradeConfig } from '../Command';
-import { NFTTrade, BuyItem } from '../NFTTrade';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { BigNumber, BigNumberish } from 'ethers';
-export declare type CryptopunkData = {
-    tokenId: BigNumberish;
-    recipient: string;
-    value: BigNumberish;
-};
-export declare class CryptopunkTrade extends NFTTrade<CryptopunkData> {
-    static CRYPTOPUNK_ADDRESS: string;
-    constructor(orders: CryptopunkData[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getTotalPrice(): BigNumber;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/element-market.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/element-market.d.ts
deleted file mode 100644
index 4111865..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/element-market.d.ts
+++ /dev/null
@@ -1,44 +0,0 @@
-import { Interface } from '@ethersproject/abi';
-import { BuyItem, NFTTrade } from '../NFTTrade';
-import { TradeConfig } from '../Command';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { BigNumber } from 'ethers';
-export interface Fee {
-    recipient: string;
-    amount: string;
-    feeData: string;
-}
-declare type ElementPartialData = {
-    maker: string;
-    taker: string;
-    expiry: string;
-    nonce: string;
-    erc20Token: string;
-    erc20TokenAmount: string;
-    fees: Fee[];
-};
-export declare type ERC721SellOrder = ElementPartialData & {
-    nft: string;
-    nftId: string;
-};
-export declare type OrderSignature = {
-    signatureType: number;
-    v: number;
-    r: string;
-    s: string;
-};
-export declare type ElementData = {
-    order: ERC721SellOrder;
-    signature: OrderSignature;
-    recipient: string;
-};
-export declare class ElementTrade extends NFTTrade<ElementData> {
-    private static ETH_ADDRESS;
-    static INTERFACE: Interface;
-    constructor(orders: ElementData[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getTotalPrice(): BigNumber;
-    getOrderPriceIncludingFees(order: ERC721SellOrder): BigNumber;
-}
-export {};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/foundation.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/foundation.d.ts
deleted file mode 100644
index ea1a650..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/foundation.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { Interface } from '@ethersproject/abi';
-import { BuyItem, NFTTrade } from '../NFTTrade';
-import { TradeConfig } from '../Command';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { BigNumber, BigNumberish } from 'ethers';
-export declare type FoundationData = {
-    recipient: string;
-    tokenAddress: string;
-    tokenId: BigNumberish;
-    price: BigNumberish;
-    referrer: string;
-};
-export declare class FoundationTrade extends NFTTrade<FoundationData> {
-    static INTERFACE: Interface;
-    constructor(orders: FoundationData[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getTotalPrice(): BigNumber;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/index.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/index.d.ts
deleted file mode 100644
index 18393c4..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/index.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-export * from './cryptopunk';
-export * from './foundation';
-export * from './looksRareV2';
-export * from './nft20';
-export * from './nftx';
-export * from './seaport';
-export * from './uniswap';
-export * from './sudoswap';
-export * from './x2y2';
-export * from './unwrapWETH';
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/looksRareV2.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/looksRareV2.d.ts
deleted file mode 100644
index f48b9f1..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/looksRareV2.d.ts
+++ /dev/null
@@ -1,56 +0,0 @@
-import { Interface } from '@ethersproject/abi';
-import { BuyItem, NFTTrade } from '../NFTTrade';
-import { TradeConfig } from '../Command';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { BigNumber } from 'ethers';
-export declare type MakerOrder = {
-    quoteType: number;
-    globalNonce: string;
-    subsetNonce: string;
-    orderNonce: string;
-    strategyId: number;
-    collectionType: number;
-    collection: string;
-    currency: string;
-    signer: string;
-    startTime: number;
-    endTime: number;
-    price: string;
-    itemIds: string[];
-    amounts: string[];
-    additionalParameters: string;
-};
-export declare type TakerOrder = {
-    recipient: string;
-    additionalParameters: string;
-};
-export declare type MerkleProof = {
-    value: string;
-    position: number;
-};
-export declare type MerkleTree = {
-    root: string;
-    proof: MerkleProof[];
-};
-export declare type LRV2APIOrder = MakerOrder & {
-    id: string;
-    hash: string;
-    signature: string;
-    createdAt: string;
-    merkleRoot?: string;
-    merkleProof?: MerkleProof[];
-    status: string;
-};
-export declare type LooksRareV2Data = {
-    apiOrder: LRV2APIOrder;
-    taker: string;
-};
-export declare class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {
-    static INTERFACE: Interface;
-    private static ERC721_ORDER;
-    constructor(orders: LooksRareV2Data[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getTotalPrice(): BigNumber;
-    private refactorAPIData;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/nft20.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/nft20.d.ts
deleted file mode 100644
index 679b0de..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/nft20.d.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-import { Interface } from '@ethersproject/abi';
-import { TradeConfig } from '../Command';
-import { NFTTrade, BuyItem } from '../NFTTrade';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { BigNumber, BigNumberish } from 'ethers';
-export declare type NFT20Data = {
-    tokenAddress: string;
-    tokenIds: BigNumberish[];
-    tokenAmounts: BigNumberish[];
-    recipient: string;
-    fee: BigNumberish;
-    isV3: boolean;
-    value: BigNumberish;
-};
-export declare class NFT20Trade extends NFTTrade<NFT20Data> {
-    static INTERFACE: Interface;
-    constructor(orders: NFT20Data[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getTotalPrice(): BigNumber;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/nftx.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/nftx.d.ts
deleted file mode 100644
index b9837ba..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/nftx.d.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-import { Interface } from '@ethersproject/abi';
-import { BuyItem, NFTTrade } from '../NFTTrade';
-import { TradeConfig } from '../Command';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { BigNumber, BigNumberish } from 'ethers';
-export declare type NFTXData = {
-    recipient: string;
-    vaultId: BigNumberish;
-    tokenAddress: string;
-    tokenIds: BigNumberish[];
-    value: BigNumber;
-    swapCalldata: string;
-};
-export declare class NFTXTrade extends NFTTrade<NFTXData> {
-    static INTERFACE: Interface;
-    constructor(orders: NFTXData[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getTotalPrice(): BigNumber;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/seaport.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/seaport.d.ts
deleted file mode 100644
index 0dcc825..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/seaport.d.ts
+++ /dev/null
@@ -1,69 +0,0 @@
-import { BigNumber, BigNumberish } from 'ethers';
-import { Interface } from '@ethersproject/abi';
-import { BuyItem, NFTTrade } from '../NFTTrade';
-import { TradeConfig } from '../Command';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { Permit2Permit } from '../../utils/inputTokens';
-export declare type SeaportData = {
-    items: Order[];
-    recipient: string;
-    protocolAddress: string;
-    inputTokenProcessing?: InputTokenProcessing[];
-};
-export declare type InputTokenProcessing = {
-    token: string;
-    permit2Permit?: Permit2Permit;
-    protocolApproval: boolean;
-    permit2TransferFrom: boolean;
-};
-export declare type FulfillmentComponent = {
-    orderIndex: BigNumberish;
-    itemIndex: BigNumberish;
-};
-export declare type OfferItem = {
-    itemType: BigNumberish;
-    token: string;
-    identifierOrCriteria: BigNumberish;
-    startAmount: BigNumberish;
-    endAmount: BigNumberish;
-};
-export declare type ConsiderationItem = OfferItem & {
-    recipient: string;
-};
-export declare type Order = {
-    parameters: OrderParameters;
-    signature: string;
-};
-declare type OrderParameters = {
-    offerer: string;
-    offer: OfferItem[];
-    consideration: ConsiderationItem[];
-    orderType: BigNumberish;
-    startTime: BigNumberish;
-    endTime: BigNumberish;
-    zoneHash: string;
-    zone: string;
-    salt: BigNumberish;
-    conduitKey: string;
-    totalOriginalConsiderationItems: BigNumberish;
-};
-export declare type AdvancedOrder = Order & {
-    numerator: BigNumber;
-    denominator: BigNumber;
-    extraData: string;
-};
-export declare class SeaportTrade extends NFTTrade<SeaportData> {
-    static INTERFACE: Interface;
-    static OPENSEA_CONDUIT_KEY: string;
-    constructor(orders: SeaportData[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getInputTokens(): Set<string>;
-    getTotalOrderPrice(order: SeaportData, token?: string): BigNumber;
-    getTotalPrice(token?: string): BigNumber;
-    private commandMap;
-    private getConsiderationFulfillments;
-    private getAdvancedOrderParams;
-    private calculateValue;
-}
-export {};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/sudoswap.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/sudoswap.d.ts
deleted file mode 100644
index 69fc333..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/sudoswap.d.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-import { Interface } from '@ethersproject/abi';
-import { BuyItem, NFTTrade } from '../NFTTrade';
-import { TradeConfig } from '../Command';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { BigNumber, BigNumberish } from 'ethers';
-declare type PairSwap = {
-    swapInfo: {
-        pair: string;
-        nftIds: BigNumberish[];
-    };
-    tokenAddress: string;
-    maxCost: BigNumberish;
-};
-export declare type SudoswapData = {
-    swaps: PairSwap[];
-    nftRecipient: string;
-    ethRecipient: string;
-    deadline: BigNumberish;
-};
-export declare class SudoswapTrade extends NFTTrade<SudoswapData> {
-    static INTERFACE: Interface;
-    constructor(orders: SudoswapData[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getTotalPrice(): BigNumber;
-}
-export {};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/uniswap.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/uniswap.d.ts
deleted file mode 100644
index 11e0d08..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/uniswap.d.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import { RoutePlanner } from '../../utils/routerCommands';
-import { Trade as RouterTrade, SwapOptions as RouterSwapOptions } from '@uniswap/router-sdk';
-import { Permit2Permit } from '../../utils/inputTokens';
-import { Currency, TradeType } from '@uniswap/sdk-core';
-import { Command, RouterTradeType, TradeConfig } from '../Command';
-import { BigNumberish } from 'ethers';
-export declare type FlatFeeOptions = {
-    amount: BigNumberish;
-    recipient: string;
-};
-export declare type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {
-    useRouterBalance?: boolean;
-    inputTokenPermit?: Permit2Permit;
-    flatFee?: FlatFeeOptions;
-    safeMode?: boolean;
-};
-export declare class UniswapTrade implements Command {
-    trade: RouterTrade<Currency, Currency, TradeType>;
-    options: SwapOptions;
-    readonly tradeType: RouterTradeType;
-    readonly payerIsUser: boolean;
-    constructor(trade: RouterTrade<Currency, Currency, TradeType>, options: SwapOptions);
-    get inputRequiresWrap(): boolean;
-    encode(planner: RoutePlanner, _config: TradeConfig): void;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/unwrapWETH.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/unwrapWETH.d.ts
deleted file mode 100644
index 07136a4..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/unwrapWETH.d.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { BigNumberish } from 'ethers';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { Permit2Permit } from '../../utils/inputTokens';
-import { Command, RouterTradeType, TradeConfig } from '../Command';
-export declare class UnwrapWETH implements Command {
-    readonly tradeType: RouterTradeType;
-    readonly permit2Data: Permit2Permit;
-    readonly wethAddress: string;
-    readonly amount: BigNumberish;
-    constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit);
-    encode(planner: RoutePlanner, _: TradeConfig): void;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/x2y2.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/x2y2.d.ts
deleted file mode 100644
index ca58c66..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/x2y2.d.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import { Interface } from '@ethersproject/abi';
-import { BuyItem, NFTTrade, TokenType } from '../NFTTrade';
-import { TradeConfig } from '../Command';
-import { RoutePlanner } from '../../utils/routerCommands';
-import { BigNumber, BigNumberish } from 'ethers';
-declare type X2Y2PartialData = {
-    signedInput: string;
-    recipient: string;
-    tokenAddress: string;
-    tokenId: BigNumberish;
-    price: BigNumberish;
-};
-export declare type X2Y2_721_Data = X2Y2PartialData & {
-    tokenType: TokenType.ERC721;
-};
-export declare type X2Y2_1155_Data = X2Y2PartialData & {
-    tokenType: TokenType.ERC1155;
-    tokenAmount: BigNumberish;
-};
-export declare type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data;
-export declare class X2Y2Trade extends NFTTrade<X2Y2Data> {
-    static INTERFACE: Interface;
-    constructor(orders: X2Y2Data[]);
-    encode(planner: RoutePlanner, config: TradeConfig): void;
-    getBuyItems(): BuyItem[];
-    getTotalPrice(): BigNumber;
-}
-export {};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/token.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/token.d.ts
new file mode 100644
index 0000000..e4cdc15
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/token.d.ts
@@ -0,0 +1,48 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { BaseCurrency } from './baseCurrency';
+import { Currency } from './currency';
+/**
+ * Represents an ERC20 token with a unique address and some metadata.
+ */
+export declare class Token extends BaseCurrency {
+    readonly isNative: false;
+    readonly isToken: true;
+    /**
+     * The contract address on the chain on which this token lives
+     */
+    readonly address: string;
+    /**
+     * Relevant for fee-on-transfer (FOT) token taxes,
+     * Not every ERC20 token is FOT token, so this field is optional
+     */
+    readonly buyFeeBps?: BigNumber;
+    readonly sellFeeBps?: BigNumber;
+    /**
+     *
+     * @param chainId {@link BaseCurrency#chainId}
+     * @param address The contract address on the chain on which this token lives
+     * @param decimals {@link BaseCurrency#decimals}
+     * @param symbol {@link BaseCurrency#symbol}
+     * @param name {@link BaseCurrency#name}
+     * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters
+     * @param buyFeeBps Buy fee tax for FOT tokens, in basis points
+     * @param sellFeeBps Sell fee tax for FOT tokens, in basis points
+     */
+    constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string, bypassChecksum?: boolean, buyFeeBps?: BigNumber, sellFeeBps?: BigNumber);
+    /**
+     * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
+     * @param other other token to compare
+     */
+    equals(other: Currency): boolean;
+    /**
+     * Returns true if the address of this token sorts before the address of the other token
+     * @param other other token to compare
+     * @throws if the tokens have the same address
+     * @throws if the tokens are on different chains
+     */
+    sortsBefore(other: Token): boolean;
+    /**
+     * Return this token, which does not need to be wrapped
+     */
+    get wrapped(): Token;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/weth9.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/weth9.d.ts
new file mode 100644
index 0000000..439845a
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/weth9.d.ts
@@ -0,0 +1,7 @@
+import { Token } from './token';
+/**
+ * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped
+ */
+export declare const WETH9: {
+    [chainId: number]: Token;
+};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
index b197306..97240d1 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
@@ -1,5 +1,5 @@
-export { SwapRouter } from './swapRouter';
+export * from './addresses';
+export * from './chains';
+export * from './constants';
 export * from './entities';
-export * from './utils/routerTradeAdapter';
-export { RoutePlanner, CommandType } from './utils/routerCommands';
-export { UNIVERSAL_ROUTER_ADDRESS, UNIVERSAL_ROUTER_CREATION_BLOCK, PERMIT2_ADDRESS, ROUTER_AS_RECIPIENT, WETH_ADDRESS, } from './utils/constants';
+export * from './utils';
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/index.js b/node_modules/@uniswap/universal-router-sdk/dist/index.js
index 4a05338..c3473ea 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/index.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/index.js
@@ -2,7 +2,7 @@
 'use strict'
 
 if (process.env.NODE_ENV === 'production') {
-  module.exports = require('./universal-router-sdk.cjs.production.min.js')
+  module.exports = require('./sdk-core.cjs.production.min.js')
 } else {
-  module.exports = require('./universal-router-sdk.cjs.development.js')
+  module.exports = require('./sdk-core.cjs.development.js')
 }
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.development.js b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.development.js
new file mode 100644
index 0000000..1a39ef7
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.development.js
@@ -0,0 +1,1034 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
+
+var JSBI = _interopDefault(require('jsbi'));
+var invariant = _interopDefault(require('tiny-invariant'));
+var _Decimal = _interopDefault(require('decimal.js-light'));
+var _Big = _interopDefault(require('big.js'));
+var toFormat = _interopDefault(require('toformat'));
+var bignumber = require('@ethersproject/bignumber');
+var address = require('@ethersproject/address');
+var bytes = require('@ethersproject/bytes');
+var keccak256 = require('@ethersproject/keccak256');
+var strings = require('@ethersproject/strings');
+
+function _toPrimitive(t, r) {
+  if ("object" != typeof t || !t) return t;
+  var e = t[Symbol.toPrimitive];
+  if (void 0 !== e) {
+    var i = e.call(t, r || "default");
+    if ("object" != typeof i) return i;
+    throw new TypeError("@@toPrimitive must return a primitive value.");
+  }
+  return ("string" === r ? String : Number)(t);
+}
+function _toPropertyKey(t) {
+  var i = _toPrimitive(t, "string");
+  return "symbol" == typeof i ? i : String(i);
+}
+function _defineProperties(target, props) {
+  for (var i = 0; i < props.length; i++) {
+    var descriptor = props[i];
+    descriptor.enumerable = descriptor.enumerable || false;
+    descriptor.configurable = true;
+    if ("value" in descriptor) descriptor.writable = true;
+    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
+  }
+}
+function _createClass(Constructor, protoProps, staticProps) {
+  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
+  if (staticProps) _defineProperties(Constructor, staticProps);
+  Object.defineProperty(Constructor, "prototype", {
+    writable: false
+  });
+  return Constructor;
+}
+function _extends() {
+  _extends = Object.assign ? Object.assign.bind() : function (target) {
+    for (var i = 1; i < arguments.length; i++) {
+      var source = arguments[i];
+      for (var key in source) {
+        if (Object.prototype.hasOwnProperty.call(source, key)) {
+          target[key] = source[key];
+        }
+      }
+    }
+    return target;
+  };
+  return _extends.apply(this, arguments);
+}
+function _inheritsLoose(subClass, superClass) {
+  subClass.prototype = Object.create(superClass.prototype);
+  subClass.prototype.constructor = subClass;
+  _setPrototypeOf(subClass, superClass);
+}
+function _setPrototypeOf(o, p) {
+  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
+    o.__proto__ = p;
+    return o;
+  };
+  return _setPrototypeOf(o, p);
+}
+
+(function (ChainId) {
+  ChainId[ChainId["MAINNET"] = 1] = "MAINNET";
+  ChainId[ChainId["GOERLI"] = 5] = "GOERLI";
+  ChainId[ChainId["SEPOLIA"] = 11155111] = "SEPOLIA";
+  ChainId[ChainId["OPTIMISM"] = 10] = "OPTIMISM";
+  ChainId[ChainId["OPTIMISM_GOERLI"] = 420] = "OPTIMISM_GOERLI";
+  ChainId[ChainId["OPTIMISM_SEPOLIA"] = 11155420] = "OPTIMISM_SEPOLIA";
+  ChainId[ChainId["ARBITRUM_ONE"] = 42161] = "ARBITRUM_ONE";
+  ChainId[ChainId["ARBITRUM_GOERLI"] = 421613] = "ARBITRUM_GOERLI";
+  ChainId[ChainId["ARBITRUM_SEPOLIA"] = 421614] = "ARBITRUM_SEPOLIA";
+  ChainId[ChainId["POLYGON"] = 137] = "POLYGON";
+  ChainId[ChainId["POLYGON_MUMBAI"] = 80001] = "POLYGON_MUMBAI";
+  ChainId[ChainId["CELO"] = 42220] = "CELO";
+  ChainId[ChainId["CELO_ALFAJORES"] = 44787] = "CELO_ALFAJORES";
+  ChainId[ChainId["GNOSIS"] = 100] = "GNOSIS";
+  ChainId[ChainId["MOONBEAM"] = 1284] = "MOONBEAM";
+  ChainId[ChainId["BNB"] = 56] = "BNB";
+  ChainId[ChainId["AVALANCHE"] = 43114] = "AVALANCHE";
+  ChainId[ChainId["BASE_GOERLI"] = 84531] = "BASE_GOERLI";
+  ChainId[ChainId["BASE"] = 8453] = "BASE";
+  ChainId[ChainId["ZORA"] = 7777777] = "ZORA";
+  ChainId[ChainId["ZORA_SEPOLIA"] = 999999999] = "ZORA_SEPOLIA";
+  ChainId[ChainId["ROOTSTOCK"] = 30] = "ROOTSTOCK";
+  ChainId[ChainId["BLAST"] = 81457] = "BLAST";
+  ChainId[ChainId["ZKSYNC"] = 324] = "ZKSYNC";
+  ChainId[ChainId["ABSTRACT_TESTNET"] = 11124] = "ABSTRACT_TESTNET";
+  ChainId[ChainId["ZERO"] = 543210] = "ZERO";
+  ChainId[ChainId["BOB"] = 60808] = "BOB";
+})(exports.ChainId || (exports.ChainId = {}));
+var SUPPORTED_CHAINS = [exports.ChainId.MAINNET, exports.ChainId.OPTIMISM, exports.ChainId.OPTIMISM_GOERLI, exports.ChainId.OPTIMISM_SEPOLIA, exports.ChainId.ARBITRUM_ONE, exports.ChainId.ARBITRUM_GOERLI, exports.ChainId.ARBITRUM_SEPOLIA, exports.ChainId.POLYGON, exports.ChainId.POLYGON_MUMBAI, exports.ChainId.GOERLI, exports.ChainId.SEPOLIA, exports.ChainId.CELO_ALFAJORES, exports.ChainId.CELO, exports.ChainId.BNB, exports.ChainId.AVALANCHE, exports.ChainId.BASE, exports.ChainId.BASE_GOERLI, exports.ChainId.ZORA, exports.ChainId.ZORA_SEPOLIA, exports.ChainId.ROOTSTOCK, exports.ChainId.BLAST, exports.ChainId.ZKSYNC, exports.ChainId.ABSTRACT_TESTNET, exports.ChainId.ZERO, exports.ChainId.BOB];
+(function (NativeCurrencyName) {
+  // Strings match input for CLI
+  NativeCurrencyName["ETHER"] = "ETH";
+  NativeCurrencyName["MATIC"] = "MATIC";
+  NativeCurrencyName["CELO"] = "CELO";
+  NativeCurrencyName["GNOSIS"] = "XDAI";
+  NativeCurrencyName["MOONBEAM"] = "GLMR";
+  NativeCurrencyName["BNB"] = "BNB";
+  NativeCurrencyName["AVAX"] = "AVAX";
+  NativeCurrencyName["ROOTSTOCK"] = "RBTC";
+})(exports.NativeCurrencyName || (exports.NativeCurrencyName = {}));
+
+var _V2_FACTORY_ADDRESSES, _V2_ROUTER_ADDRESSES, _CHAIN_TO_ADDRESSES_M, _GOVERNANCE_ALPHA_V1_, _GOVERNANCE_BRAVO_ADD, _MERKLE_DISTRIBUTOR_A, _ARGENT_WALLET_DETECT, _SOCKS_CONTROLLER_ADD;
+var DEFAULT_NETWORKS = [exports.ChainId.MAINNET, exports.ChainId.GOERLI, exports.ChainId.SEPOLIA];
+function constructSameAddressMap(address, additionalNetworks) {
+  if (additionalNetworks === void 0) {
+    additionalNetworks = [];
+  }
+  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce(function (memo, chainId) {
+    memo[chainId] = address;
+    return memo;
+  }, {});
+}
+var UNI_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [exports.ChainId.OPTIMISM, exports.ChainId.ARBITRUM_ONE, exports.ChainId.POLYGON, exports.ChainId.POLYGON_MUMBAI, exports.ChainId.SEPOLIA]);
+var UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78';
+/**
+ * @deprecated use V2_FACTORY_ADDRESSES instead
+ */
+var V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
+var V2_FACTORY_ADDRESSES = (_V2_FACTORY_ADDRESSES = {}, _V2_FACTORY_ADDRESSES[exports.ChainId.MAINNET] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[exports.ChainId.GOERLI] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[exports.ChainId.SEPOLIA] = '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0', _V2_FACTORY_ADDRESSES[exports.ChainId.OPTIMISM] = '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf', _V2_FACTORY_ADDRESSES[exports.ChainId.ARBITRUM_ONE] = '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9', _V2_FACTORY_ADDRESSES[exports.ChainId.AVALANCHE] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[exports.ChainId.BASE] = '0x8909dc15e40173ff4699343b6eb8132c65e18ec6', _V2_FACTORY_ADDRESSES[exports.ChainId.BNB] = '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6', _V2_FACTORY_ADDRESSES[exports.ChainId.POLYGON] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[exports.ChainId.CELO] = '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f', _V2_FACTORY_ADDRESSES[exports.ChainId.BLAST] = '0x5C346464d33F90bABaf70dB6388507CC889C1070', _V2_FACTORY_ADDRESSES[exports.ChainId.ABSTRACT_TESTNET] = '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07', _V2_FACTORY_ADDRESSES[exports.ChainId.ZERO] = '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559', _V2_FACTORY_ADDRESSES);
+/**
+ * @deprecated use V2_ROUTER_ADDRESSES instead
+ */
+var V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
+var V2_ROUTER_ADDRESSES = (_V2_ROUTER_ADDRESSES = {}, _V2_ROUTER_ADDRESSES[exports.ChainId.MAINNET] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[exports.ChainId.GOERLI] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[exports.ChainId.ARBITRUM_ONE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.OPTIMISM] = '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2', _V2_ROUTER_ADDRESSES[exports.ChainId.BASE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.AVALANCHE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.BNB] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.POLYGON] = '0xedf6066a2b290c185783862c7f4776a2c8077ad1', _V2_ROUTER_ADDRESSES[exports.ChainId.BLAST] = '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035', _V2_ROUTER_ADDRESSES[exports.ChainId.ABSTRACT_TESTNET] = '0x07551c0Daf6fCD9bc2A398357E5C92C139724Ef3', _V2_ROUTER_ADDRESSES[exports.ChainId.ZERO] = '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94', _V2_ROUTER_ADDRESSES);
+// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon
+var DEFAULT_ADDRESSES = {
+  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
+  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',
+  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',
+  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',
+  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'
+};
+var MAINNET_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'
+});
+var GOERLI_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'
+});
+var OPTIMISM_ADDRESSES = DEFAULT_ADDRESSES;
+var ARBITRUM_ONE_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',
+  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'
+});
+var POLYGON_ADDRESSES = DEFAULT_ADDRESSES;
+// celo v3 addresses
+var CELO_ADDRESSES = {
+  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',
+  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',
+  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',
+  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',
+  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',
+  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'
+};
+// BNB v3 addresses
+var BNB_ADDRESSES = {
+  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',
+  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',
+  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',
+  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',
+  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',
+  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',
+  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'
+};
+// optimism goerli addresses
+var OPTIMISM_GOERLI_ADDRESSES = {
+  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',
+  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',
+  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',
+  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',
+  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',
+  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'
+};
+// optimism sepolia addresses
+var OPTIMISM_SEPOLIA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',
+  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',
+  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',
+  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',
+  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',
+  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',
+  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'
+};
+// arbitrum goerli v3 addresses
+var ARBITRUM_GOERLI_ADDRESSES = {
+  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',
+  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',
+  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',
+  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',
+  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',
+  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'
+};
+// arbitrum sepolia v3 addresses
+var ARBITRUM_SEPOLIA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',
+  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',
+  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',
+  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',
+  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',
+  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',
+  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'
+};
+// sepolia v3 addresses
+var SEPOLIA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',
+  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',
+  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',
+  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',
+  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',
+  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',
+  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',
+  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.
+  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09'
+};
+// Avalanche v3 addresses
+var AVALANCHE_ADDRESSES = {
+  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',
+  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',
+  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',
+  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',
+  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',
+  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',
+  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'
+};
+var BASE_ADDRESSES = {
+  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',
+  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',
+  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',
+  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',
+  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',
+  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',
+  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',
+  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776'
+};
+// Base Goerli v3 addresses
+var BASE_GOERLI_ADDRESSES = {
+  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',
+  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',
+  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',
+  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',
+  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',
+  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',
+  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'
+};
+var ZORA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',
+  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',
+  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',
+  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',
+  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',
+  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',
+  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'
+};
+var ZORA_SEPOLIA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',
+  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',
+  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',
+  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',
+  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',
+  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'
+};
+var ROOTSTOCK_ADDRESSES = {
+  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',
+  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',
+  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',
+  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',
+  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',
+  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',
+  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'
+};
+var BLAST_ADDRESSES = {
+  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',
+  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',
+  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',
+  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',
+  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',
+  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',
+  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'
+};
+var ZKSYNC_ADDRESSES = {
+  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',
+  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',
+  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',
+  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',
+  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',
+  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',
+  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3'
+};
+var ABSTRACT_TESTNET_ADDRESSES = {
+  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',
+  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',
+  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',
+  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',
+  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',
+  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',
+  swapRouter02Address: '0x3914e72A73181a3EdB4dBC445cE2A01d480eacb1'
+};
+var ZERO_ADDRESSES = {
+  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',
+  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',
+  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',
+  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',
+  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',
+  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',
+  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b'
+};
+var BOB_ADDRESSES = {
+  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',
+  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',
+  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',
+  // Missing migrator address for BOB, using a place holder for now
+  v3MigratorAddress: '0x0000000000000000000000000000000000000000',
+  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',
+  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',
+  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40'
+};
+var CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[exports.ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM_SEPOLIA] = OPTIMISM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_SEPOLIA] = ARBITRUM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZORA] = ZORA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZORA_SEPOLIA] = ZORA_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ROOTSTOCK] = ROOTSTOCK_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BLAST] = BLAST_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZKSYNC] = ZKSYNC_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ABSTRACT_TESTNET] = ABSTRACT_TESTNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZERO] = ZERO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BOB] = BOB_ADDRESSES, _CHAIN_TO_ADDRESSES_M);
+/* V3 Contract Addresses */
+var V3_CORE_FACTORY_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;
+  return memo;
+}, {}));
+var V3_MIGRATOR_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  var v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress;
+  if (v3MigratorAddress) {
+    memo[chainId] = v3MigratorAddress;
+  }
+  return memo;
+}, {}));
+var MULTICALL_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress;
+  return memo;
+}, {}));
+/**
+ * The oldest V0 governance address
+ */
+var GOVERNANCE_ALPHA_V0_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F');
+/**
+ * The older V1 governance address
+ */
+var GOVERNANCE_ALPHA_V1_ADDRESSES = (_GOVERNANCE_ALPHA_V1_ = {}, _GOVERNANCE_ALPHA_V1_[exports.ChainId.MAINNET] = '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6', _GOVERNANCE_ALPHA_V1_);
+/**
+ * The latest governor bravo that is currently admin of timelock
+ */
+var GOVERNANCE_BRAVO_ADDRESSES = (_GOVERNANCE_BRAVO_ADD = {}, _GOVERNANCE_BRAVO_ADD[exports.ChainId.MAINNET] = '0x408ED6354d4973f66138C91495F2f2FCbd8724C3', _GOVERNANCE_BRAVO_ADD);
+var TIMELOCK_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC');
+var MERKLE_DISTRIBUTOR_ADDRESS = (_MERKLE_DISTRIBUTOR_A = {}, _MERKLE_DISTRIBUTOR_A[exports.ChainId.MAINNET] = '0x090D4613473dEE047c3f2706764f49E0821D256e', _MERKLE_DISTRIBUTOR_A);
+var ARGENT_WALLET_DETECTOR_ADDRESS = (_ARGENT_WALLET_DETECT = {}, _ARGENT_WALLET_DETECT[exports.ChainId.MAINNET] = '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8', _ARGENT_WALLET_DETECT);
+var QUOTER_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress;
+  return memo;
+}, {}));
+var NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  var nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress;
+  if (nonfungiblePositionManagerAddress) {
+    memo[chainId] = nonfungiblePositionManagerAddress;
+  }
+  return memo;
+}, {}));
+var ENS_REGISTRAR_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'));
+var SOCKS_CONTROLLER_ADDRESSES = (_SOCKS_CONTROLLER_ADD = {}, _SOCKS_CONTROLLER_ADD[exports.ChainId.MAINNET] = '0x65770b5283117639760beA3F867b69b3697a91dd', _SOCKS_CONTROLLER_ADD);
+var TICK_LENS_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  var tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress;
+  if (tickLensAddress) {
+    memo[chainId] = tickLensAddress;
+  }
+  return memo;
+}, {}));
+var MIXED_ROUTE_QUOTER_V1_ADDRESSES = /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  var mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address;
+  if (mixedRouteQuoterV1Address) {
+    memo[chainId] = mixedRouteQuoterV1Address;
+  }
+  return memo;
+}, {});
+var SWAP_ROUTER_02_ADDRESSES = function SWAP_ROUTER_02_ADDRESSES(chainId) {
+  if (SUPPORTED_CHAINS.includes(chainId)) {
+    var _CHAIN_TO_ADDRESSES_M2;
+    var id = chainId;
+    return (_CHAIN_TO_ADDRESSES_M2 = CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address) != null ? _CHAIN_TO_ADDRESSES_M2 : '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45';
+  }
+  return '';
+};
+
+(function (TradeType) {
+  TradeType[TradeType["EXACT_INPUT"] = 0] = "EXACT_INPUT";
+  TradeType[TradeType["EXACT_OUTPUT"] = 1] = "EXACT_OUTPUT";
+})(exports.TradeType || (exports.TradeType = {}));
+(function (Rounding) {
+  Rounding[Rounding["ROUND_DOWN"] = 0] = "ROUND_DOWN";
+  Rounding[Rounding["ROUND_HALF_UP"] = 1] = "ROUND_HALF_UP";
+  Rounding[Rounding["ROUND_UP"] = 2] = "ROUND_UP";
+})(exports.Rounding || (exports.Rounding = {}));
+var MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
+
+var _toSignificantRoundin, _toFixedRounding;
+var Decimal = /*#__PURE__*/toFormat(_Decimal);
+var Big = /*#__PURE__*/toFormat(_Big);
+var toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[exports.Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[exports.Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[exports.Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);
+var toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[exports.Rounding.ROUND_DOWN] = 0, _toFixedRounding[exports.Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[exports.Rounding.ROUND_UP] = 3, _toFixedRounding);
+var Fraction = /*#__PURE__*/function () {
+  function Fraction(numerator, denominator) {
+    if (denominator === void 0) {
+      denominator = JSBI.BigInt(1);
+    }
+    this.numerator = JSBI.BigInt(numerator);
+    this.denominator = JSBI.BigInt(denominator);
+  }
+  Fraction.tryParseFraction = function tryParseFraction(fractionish) {
+    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);
+    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;
+    throw new Error('Could not parse fraction');
+  }
+  // performs floor division
+  ;
+  var _proto = Fraction.prototype;
+  _proto.invert = function invert() {
+    return new Fraction(this.denominator, this.numerator);
+  };
+  _proto.add = function add(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    if (JSBI.equal(this.denominator, otherParsed.denominator)) {
+      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);
+    }
+    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));
+  };
+  _proto.subtract = function subtract(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    if (JSBI.equal(this.denominator, otherParsed.denominator)) {
+      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);
+    }
+    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));
+  };
+  _proto.lessThan = function lessThan(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
+  };
+  _proto.equalTo = function equalTo(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
+  };
+  _proto.greaterThan = function greaterThan(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
+  };
+  _proto.multiply = function multiply(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));
+  };
+  _proto.divide = function divide(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));
+  };
+  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+    if (format === void 0) {
+      format = {
+        groupSeparator: ''
+      };
+    }
+    if (rounding === void 0) {
+      rounding = exports.Rounding.ROUND_HALF_UP;
+    }
+    !Number.isInteger(significantDigits) ?  invariant(false, significantDigits + " is not an integer.")  : void 0;
+    !(significantDigits > 0) ?  invariant(false, significantDigits + " is not positive.")  : void 0;
+    Decimal.set({
+      precision: significantDigits + 1,
+      rounding: toSignificantRounding[rounding]
+    });
+    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
+    return quotient.toFormat(quotient.decimalPlaces(), format);
+  };
+  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    if (format === void 0) {
+      format = {
+        groupSeparator: ''
+      };
+    }
+    if (rounding === void 0) {
+      rounding = exports.Rounding.ROUND_HALF_UP;
+    }
+    !Number.isInteger(decimalPlaces) ?  invariant(false, decimalPlaces + " is not an integer.")  : void 0;
+    !(decimalPlaces >= 0) ?  invariant(false, decimalPlaces + " is negative.")  : void 0;
+    Big.DP = decimalPlaces;
+    Big.RM = toFixedRounding[rounding];
+    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);
+  }
+  /**
+   * Helper method for converting any super class back to a fraction
+   */;
+  _createClass(Fraction, [{
+    key: "quotient",
+    get: function get() {
+      return JSBI.divide(this.numerator, this.denominator);
+    }
+    // remainder after floor division
+  }, {
+    key: "remainder",
+    get: function get() {
+      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);
+    }
+  }, {
+    key: "asFraction",
+    get: function get() {
+      return new Fraction(this.numerator, this.denominator);
+    }
+  }]);
+  return Fraction;
+}();
+
+var Big$1 = /*#__PURE__*/toFormat(_Big);
+var CurrencyAmount = /*#__PURE__*/function (_Fraction) {
+  _inheritsLoose(CurrencyAmount, _Fraction);
+  function CurrencyAmount(currency, numerator, denominator) {
+    var _this;
+    _this = _Fraction.call(this, numerator, denominator) || this;
+    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ?  invariant(false, 'AMOUNT')  : void 0;
+    _this.currency = currency;
+    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));
+    return _this;
+  }
+  /**
+   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount
+   * @param currency the currency in the amount
+   * @param rawAmount the raw token or ether amount
+   */
+  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {
+    return new CurrencyAmount(currency, rawAmount);
+  }
+  /**
+   * Construct a currency amount with a denominator that is not equal to 1
+   * @param currency the currency
+   * @param numerator the numerator of the fractional token amount
+   * @param denominator the denominator of the fractional token amount
+   */;
+  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {
+    return new CurrencyAmount(currency, numerator, denominator);
+  };
+  var _proto = CurrencyAmount.prototype;
+  _proto.add = function add(other) {
+    !this.currency.equals(other.currency) ?  invariant(false, 'CURRENCY')  : void 0;
+    var added = _Fraction.prototype.add.call(this, other);
+    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);
+  };
+  _proto.subtract = function subtract(other) {
+    !this.currency.equals(other.currency) ?  invariant(false, 'CURRENCY')  : void 0;
+    var subtracted = _Fraction.prototype.subtract.call(this, other);
+    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);
+  };
+  _proto.multiply = function multiply(other) {
+    var multiplied = _Fraction.prototype.multiply.call(this, other);
+    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);
+  };
+  _proto.divide = function divide(other) {
+    var divided = _Fraction.prototype.divide.call(this, other);
+    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);
+  };
+  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+    if (significantDigits === void 0) {
+      significantDigits = 6;
+    }
+    if (rounding === void 0) {
+      rounding = exports.Rounding.ROUND_DOWN;
+    }
+    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);
+  };
+  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    if (decimalPlaces === void 0) {
+      decimalPlaces = this.currency.decimals;
+    }
+    if (rounding === void 0) {
+      rounding = exports.Rounding.ROUND_DOWN;
+    }
+    !(decimalPlaces <= this.currency.decimals) ?  invariant(false, 'DECIMALS')  : void 0;
+    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);
+  };
+  _proto.toExact = function toExact(format) {
+    if (format === void 0) {
+      format = {
+        groupSeparator: ''
+      };
+    }
+    Big$1.DP = this.currency.decimals;
+    return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);
+  };
+  _createClass(CurrencyAmount, [{
+    key: "wrapped",
+    get: function get() {
+      if (this.currency.isToken) return this;
+      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);
+    }
+  }]);
+  return CurrencyAmount;
+}(Fraction);
+
+var ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));
+/**
+ * Converts a fraction to a percent
+ * @param fraction the fraction to convert
+ */
+function toPercent(fraction) {
+  return new Percent(fraction.numerator, fraction.denominator);
+}
+var Percent = /*#__PURE__*/function (_Fraction) {
+  _inheritsLoose(Percent, _Fraction);
+  function Percent() {
+    var _this;
+    _this = _Fraction.apply(this, arguments) || this;
+    /**
+     * This boolean prevents a fraction from being interpreted as a Percent
+     */
+    _this.isPercent = true;
+    return _this;
+  }
+  var _proto = Percent.prototype;
+  _proto.add = function add(other) {
+    return toPercent(_Fraction.prototype.add.call(this, other));
+  };
+  _proto.subtract = function subtract(other) {
+    return toPercent(_Fraction.prototype.subtract.call(this, other));
+  };
+  _proto.multiply = function multiply(other) {
+    return toPercent(_Fraction.prototype.multiply.call(this, other));
+  };
+  _proto.divide = function divide(other) {
+    return toPercent(_Fraction.prototype.divide.call(this, other));
+  };
+  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+    if (significantDigits === void 0) {
+      significantDigits = 5;
+    }
+    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);
+  };
+  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    if (decimalPlaces === void 0) {
+      decimalPlaces = 2;
+    }
+    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);
+  };
+  return Percent;
+}(Fraction);
+
+var Price = /*#__PURE__*/function (_Fraction) {
+  _inheritsLoose(Price, _Fraction);
+  /**
+   * Construct a price, either with the base and quote currency amount, or the
+   * @param args
+   */
+  function Price() {
+    var _this;
+    var baseCurrency, quoteCurrency, denominator, numerator;
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    if (args.length === 4) {
+      baseCurrency = args[0];
+      quoteCurrency = args[1];
+      denominator = args[2];
+      numerator = args[3];
+    } else {
+      var result = args[0].quoteAmount.divide(args[0].baseAmount);
+      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];
+      baseCurrency = _ref[0];
+      quoteCurrency = _ref[1];
+      denominator = _ref[2];
+      numerator = _ref[3];
+    }
+    _this = _Fraction.call(this, numerator, denominator) || this;
+    _this.baseCurrency = baseCurrency;
+    _this.quoteCurrency = quoteCurrency;
+    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));
+    return _this;
+  }
+  /**
+   * Flip the price, switching the base and quote currency
+   */
+  var _proto = Price.prototype;
+  _proto.invert = function invert() {
+    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);
+  }
+  /**
+   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency
+   * @param other the other price
+   */;
+  _proto.multiply = function multiply(other) {
+    !this.quoteCurrency.equals(other.baseCurrency) ?  invariant(false, 'TOKEN')  : void 0;
+    var fraction = _Fraction.prototype.multiply.call(this, other);
+    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);
+  }
+  /**
+   * Return the amount of quote currency corresponding to a given amount of the base currency
+   * @param currencyAmount the amount of base currency to quote against the price
+   */;
+  _proto.quote = function quote(currencyAmount) {
+    !currencyAmount.currency.equals(this.baseCurrency) ?  invariant(false, 'TOKEN')  : void 0;
+    var result = _Fraction.prototype.multiply.call(this, currencyAmount);
+    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);
+  }
+  /**
+   * Get the value scaled by decimals for formatting
+   * @private
+   */;
+  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+    if (significantDigits === void 0) {
+      significantDigits = 6;
+    }
+    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);
+  };
+  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    if (decimalPlaces === void 0) {
+      decimalPlaces = 4;
+    }
+    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);
+  };
+  _createClass(Price, [{
+    key: "adjustedForDecimals",
+    get: function get() {
+      return _Fraction.prototype.multiply.call(this, this.scalar);
+    }
+  }]);
+  return Price;
+}(Fraction);
+
+/**
+ * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies
+ */
+var BaseCurrency =
+/**
+ * Constructs an instance of the base class `BaseCurrency`.
+ * @param chainId the chain ID on which this currency resides
+ * @param decimals decimals of the currency
+ * @param symbol symbol of the currency
+ * @param name of the currency
+ */
+function BaseCurrency(chainId, decimals, symbol, name) {
+  !Number.isSafeInteger(chainId) ?  invariant(false, 'CHAIN_ID')  : void 0;
+  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ?  invariant(false, 'DECIMALS')  : void 0;
+  this.chainId = chainId;
+  this.decimals = decimals;
+  this.symbol = symbol;
+  this.name = name;
+};
+
+/**
+ * Represents the native currency of the chain on which it resides, e.g.
+ */
+var NativeCurrency = /*#__PURE__*/function (_BaseCurrency) {
+  _inheritsLoose(NativeCurrency, _BaseCurrency);
+  function NativeCurrency() {
+    var _this;
+    _this = _BaseCurrency.apply(this, arguments) || this;
+    _this.isNative = true;
+    _this.isToken = false;
+    return _this;
+  }
+  return NativeCurrency;
+}(BaseCurrency);
+
+/**
+ * Validates an address and returns the parsed (checksummed) version of that address
+ * @param address the unchecksummed hex address
+ */
+function validateAndParseAddress(address$1) {
+  try {
+    return address.getAddress(address$1);
+  } catch (error) {
+    throw new Error(address$1 + " is not a valid address.");
+  }
+}
+// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x
+var startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;
+/**
+ * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.
+ * @param address the unchecksummed hex address
+ */
+function checkValidAddress(address) {
+  if (startsWith0xLen42HexRegex.test(address)) {
+    return address;
+  }
+  throw new Error(address + " is not a valid address.");
+}
+
+/**
+ * Represents an ERC20 token with a unique address and some metadata.
+ */
+var Token = /*#__PURE__*/function (_BaseCurrency) {
+  _inheritsLoose(Token, _BaseCurrency);
+  /**
+   *
+   * @param chainId {@link BaseCurrency#chainId}
+   * @param address The contract address on the chain on which this token lives
+   * @param decimals {@link BaseCurrency#decimals}
+   * @param symbol {@link BaseCurrency#symbol}
+   * @param name {@link BaseCurrency#name}
+   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters
+   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points
+   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points
+   */
+  function Token(chainId, address, decimals, symbol, name, bypassChecksum, buyFeeBps, sellFeeBps) {
+    var _this;
+    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;
+    _this.isNative = false;
+    _this.isToken = true;
+    if (bypassChecksum) {
+      _this.address = checkValidAddress(address);
+    } else {
+      _this.address = validateAndParseAddress(address);
+    }
+    if (buyFeeBps) {
+      !buyFeeBps.gte(bignumber.BigNumber.from(0)) ?  invariant(false, 'NON-NEGATIVE FOT FEES')  : void 0;
+    }
+    if (sellFeeBps) {
+      !sellFeeBps.gte(bignumber.BigNumber.from(0)) ?  invariant(false, 'NON-NEGATIVE FOT FEES')  : void 0;
+    }
+    _this.buyFeeBps = buyFeeBps;
+    _this.sellFeeBps = sellFeeBps;
+    return _this;
+  }
+  /**
+   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
+   * @param other other token to compare
+   */
+  var _proto = Token.prototype;
+  _proto.equals = function equals(other) {
+    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase();
+  }
+  /**
+   * Returns true if the address of this token sorts before the address of the other token
+   * @param other other token to compare
+   * @throws if the tokens have the same address
+   * @throws if the tokens are on different chains
+   */;
+  _proto.sortsBefore = function sortsBefore(other) {
+    !(this.chainId === other.chainId) ?  invariant(false, 'CHAIN_IDS')  : void 0;
+    !(this.address.toLowerCase() !== other.address.toLowerCase()) ?  invariant(false, 'ADDRESSES')  : void 0;
+    return this.address.toLowerCase() < other.address.toLowerCase();
+  }
+  /**
+   * Return this token, which does not need to be wrapped
+   */;
+  _createClass(Token, [{
+    key: "wrapped",
+    get: function get() {
+      return this;
+    }
+  }]);
+  return Token;
+}(BaseCurrency);
+
+/**
+ * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped
+ */
+var WETH9 = {
+  1: /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),
+  3: /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),
+  4: /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),
+  5: /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),
+  42: /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),
+  10: /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  69: /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  11155420: /*#__PURE__*/new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  42161: /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),
+  421611: /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),
+  421614: /*#__PURE__*/new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),
+  8453: /*#__PURE__*/new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  56: /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),
+  137: /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),
+  43114: /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),
+  324: /*#__PURE__*/new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),
+  11124: /*#__PURE__*/new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),
+  543210: /*#__PURE__*/new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),
+  60808: /*#__PURE__*/new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether')
+};
+
+/**
+ * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets
+ */
+var Ether = /*#__PURE__*/function (_NativeCurrency) {
+  _inheritsLoose(Ether, _NativeCurrency);
+  function Ether(chainId) {
+    return _NativeCurrency.call(this, chainId, 18, 'ETH', 'Ether') || this;
+  }
+  Ether.onChain = function onChain(chainId) {
+    var _this$_etherCache$cha;
+    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);
+  };
+  var _proto = Ether.prototype;
+  _proto.equals = function equals(other) {
+    return other.isNative && other.chainId === this.chainId;
+  };
+  _createClass(Ether, [{
+    key: "wrapped",
+    get: function get() {
+      var weth9 = WETH9[this.chainId];
+      !!!weth9 ?  invariant(false, 'WRAPPED')  : void 0;
+      return weth9;
+    }
+  }]);
+  return Ether;
+}(NativeCurrency);
+Ether._etherCache = {};
+
+/**
+ * Returns the percent difference between the mid price and the execution price, i.e. price impact.
+ * @param midPrice mid price before the trade
+ * @param inputAmount the input amount of the trade
+ * @param outputAmount the output amount of the trade
+ */
+function computePriceImpact(midPrice, inputAmount, outputAmount) {
+  var quotedOutputAmount = midPrice.quote(inputAmount);
+  // calculate price impact := (exactQuote - outputAmount) / exactQuote
+  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);
+  return new Percent(priceImpact.numerator, priceImpact.denominator);
+}
+
+function computeZksyncCreate2Address(sender, bytecodeHash, salt, input) {
+  if (input === void 0) {
+    input = '0x';
+  }
+  var prefix = keccak256.keccak256(strings.toUtf8Bytes('zksyncCreate2'));
+  var inputHash = keccak256.keccak256(input);
+  var addressBytes = keccak256.keccak256(bytes.concat([prefix, bytes.hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26);
+  return address.getAddress(addressBytes);
+}
+
+// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to
+// `maxSize` by removing the last item
+function sortedInsert(items, add, maxSize, comparator) {
+  !(maxSize > 0) ?  invariant(false, 'MAX_SIZE_ZERO')  : void 0;
+  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize
+  !(items.length <= maxSize) ?  invariant(false, 'ITEMS_SIZE')  : void 0;
+  // short circuit first item add
+  if (items.length === 0) {
+    items.push(add);
+    return null;
+  } else {
+    var isFull = items.length === maxSize;
+    // short circuit if full and the additional item does not come before the last item
+    if (isFull && comparator(items[items.length - 1], add) <= 0) {
+      return add;
+    }
+    var lo = 0,
+      hi = items.length;
+    while (lo < hi) {
+      var mid = lo + hi >>> 1;
+      if (comparator(items[mid], add) <= 0) {
+        lo = mid + 1;
+      } else {
+        hi = mid;
+      }
+    }
+    items.splice(lo, 0, add);
+    return isFull ? items.pop() : null;
+  }
+}
+
+var MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);
+var ZERO = /*#__PURE__*/JSBI.BigInt(0);
+var ONE = /*#__PURE__*/JSBI.BigInt(1);
+var TWO = /*#__PURE__*/JSBI.BigInt(2);
+/**
+ * Computes floor(sqrt(value))
+ * @param value the value for which to compute the square root, rounded down
+ */
+function sqrt(value) {
+  !JSBI.greaterThanOrEqual(value, ZERO) ?  invariant(false, 'NEGATIVE')  : void 0;
+  // rely on built in sqrt if possible
+  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {
+    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));
+  }
+  var z;
+  var x;
+  z = value;
+  x = JSBI.add(JSBI.divide(value, TWO), ONE);
+  while (JSBI.lessThan(x, z)) {
+    z = x;
+    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);
+  }
+  return z;
+}
+
+exports.ARGENT_WALLET_DETECTOR_ADDRESS = ARGENT_WALLET_DETECTOR_ADDRESS;
+exports.CHAIN_TO_ADDRESSES_MAP = CHAIN_TO_ADDRESSES_MAP;
+exports.CurrencyAmount = CurrencyAmount;
+exports.ENS_REGISTRAR_ADDRESSES = ENS_REGISTRAR_ADDRESSES;
+exports.Ether = Ether;
+exports.Fraction = Fraction;
+exports.GOVERNANCE_ALPHA_V0_ADDRESSES = GOVERNANCE_ALPHA_V0_ADDRESSES;
+exports.GOVERNANCE_ALPHA_V1_ADDRESSES = GOVERNANCE_ALPHA_V1_ADDRESSES;
+exports.GOVERNANCE_BRAVO_ADDRESSES = GOVERNANCE_BRAVO_ADDRESSES;
+exports.MERKLE_DISTRIBUTOR_ADDRESS = MERKLE_DISTRIBUTOR_ADDRESS;
+exports.MIXED_ROUTE_QUOTER_V1_ADDRESSES = MIXED_ROUTE_QUOTER_V1_ADDRESSES;
+exports.MULTICALL_ADDRESSES = MULTICALL_ADDRESSES;
+exports.MaxUint256 = MaxUint256;
+exports.NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = NONFUNGIBLE_POSITION_MANAGER_ADDRESSES;
+exports.NativeCurrency = NativeCurrency;
+exports.Percent = Percent;
+exports.Price = Price;
+exports.QUOTER_ADDRESSES = QUOTER_ADDRESSES;
+exports.SOCKS_CONTROLLER_ADDRESSES = SOCKS_CONTROLLER_ADDRESSES;
+exports.SUPPORTED_CHAINS = SUPPORTED_CHAINS;
+exports.SWAP_ROUTER_02_ADDRESSES = SWAP_ROUTER_02_ADDRESSES;
+exports.TICK_LENS_ADDRESSES = TICK_LENS_ADDRESSES;
+exports.TIMELOCK_ADDRESSES = TIMELOCK_ADDRESSES;
+exports.Token = Token;
+exports.UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS;
+exports.UNI_ADDRESSES = UNI_ADDRESSES;
+exports.V2_FACTORY_ADDRESS = V2_FACTORY_ADDRESS;
+exports.V2_FACTORY_ADDRESSES = V2_FACTORY_ADDRESSES;
+exports.V2_ROUTER_ADDRESS = V2_ROUTER_ADDRESS;
+exports.V2_ROUTER_ADDRESSES = V2_ROUTER_ADDRESSES;
+exports.V3_CORE_FACTORY_ADDRESSES = V3_CORE_FACTORY_ADDRESSES;
+exports.V3_MIGRATOR_ADDRESSES = V3_MIGRATOR_ADDRESSES;
+exports.WETH9 = WETH9;
+exports.computePriceImpact = computePriceImpact;
+exports.computeZksyncCreate2Address = computeZksyncCreate2Address;
+exports.sortedInsert = sortedInsert;
+exports.sqrt = sqrt;
+exports.validateAndParseAddress = validateAndParseAddress;
+//# sourceMappingURL=sdk-core.cjs.development.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.development.js.map b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.development.js.map
new file mode 100644
index 0000000..9beb00a
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.development.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n  ABSTRACT_TESTNET = 11124,\n  ZERO = 543210,\n  BOB = 60808,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n  ChainId.ABSTRACT_TESTNET,\n  ChainId.ZERO,\n  ChainId.BOB,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n  [ChainId.ABSTRACT_TESTNET]: '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07',\n  [ChainId.ZERO]: '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n  [ChainId.ABSTRACT_TESTNET]: '0x07551c0Daf6fCD9bc2A398357E5C92C139724Ef3',\n  [ChainId.ZERO]: '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nconst ABSTRACT_TESTNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',\n  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',\n  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',\n  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',\n  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',\n  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',\n  swapRouter02Address: '0x3914e72A73181a3EdB4dBC445cE2A01d480eacb1',\n}\n\nconst ZERO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',\n  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',\n  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b',\n}\n\nconst BOB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',\n  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',\n  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',\n  // Missing migrator address for BOB, using a place holder for now\n  v3MigratorAddress: '0x0000000000000000000000000000000000000000',\n  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',\n  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',\n  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n  [ChainId.ABSTRACT_TESTNET]: ABSTRACT_TESTNET_ADDRESSES,\n  [ChainId.ZERO]: ZERO_ADDRESSES,\n  [ChainId.BOB]: BOB_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n  11124: new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),\n  543210: new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),\n  60808: new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","ABSTRACT_TESTNET","ZERO","BOB","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","mixedRouteQuoterV2Address","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","ZKSYNC_ADDRESSES","ABSTRACT_TESTNET_ADDRESSES","ZERO_ADDRESSES","BOB_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","_CHAIN_TO_ADDRESSES_M2","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","computeZksyncCreate2Address","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.production.min.js b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.production.min.js
new file mode 100644
index 0000000..f4369dd
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.production.min.js
@@ -0,0 +1,2 @@
+"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r,t=e(require("jsbi")),d=e(require("tiny-invariant")),n=e(require("decimal.js-light")),a=e(require("big.js")),o=e(require("toformat")),s=require("@ethersproject/bignumber"),i=require("@ethersproject/address"),c=require("@ethersproject/bytes"),A=require("@ethersproject/keccak256"),f=require("@ethersproject/strings");function u(e){var r=function(e,r){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var d=t.call(e,"string");if("object"!=typeof d)return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof r?r:String(r)}function E(e,r){for(var t=0;t<r.length;t++){var d=r[t];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(e,u(d.key),d)}}function C(e,r,t){return r&&E(e.prototype,r),t&&E(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function x(){return(x=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var d in t)Object.prototype.hasOwnProperty.call(t,d)&&(e[d]=t[d])}return e}).apply(this,arguments)}function p(e,r){var t,d;e.prototype=Object.create(r.prototype),e.prototype.constructor=e,t=e,d=r,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,r){return e.__proto__=r,e})(t,d)}(r=exports.ChainId||(exports.ChainId={}))[r.MAINNET=1]="MAINNET",r[r.GOERLI=5]="GOERLI",r[r.SEPOLIA=11155111]="SEPOLIA",r[r.OPTIMISM=10]="OPTIMISM",r[r.OPTIMISM_GOERLI=420]="OPTIMISM_GOERLI",r[r.OPTIMISM_SEPOLIA=11155420]="OPTIMISM_SEPOLIA",r[r.ARBITRUM_ONE=42161]="ARBITRUM_ONE",r[r.ARBITRUM_GOERLI=421613]="ARBITRUM_GOERLI",r[r.ARBITRUM_SEPOLIA=421614]="ARBITRUM_SEPOLIA",r[r.POLYGON=137]="POLYGON",r[r.POLYGON_MUMBAI=80001]="POLYGON_MUMBAI",r[r.CELO=42220]="CELO",r[r.CELO_ALFAJORES=44787]="CELO_ALFAJORES",r[r.GNOSIS=100]="GNOSIS",r[r.MOONBEAM=1284]="MOONBEAM",r[r.BNB=56]="BNB",r[r.AVALANCHE=43114]="AVALANCHE",r[r.BASE_GOERLI=84531]="BASE_GOERLI",r[r.BASE=8453]="BASE",r[r.ZORA=7777777]="ZORA",r[r.ZORA_SEPOLIA=999999999]="ZORA_SEPOLIA",r[r.ROOTSTOCK=30]="ROOTSTOCK",r[r.BLAST=81457]="BLAST",r[r.ZKSYNC=324]="ZKSYNC",r[r.ABSTRACT_TESTNET=11124]="ABSTRACT_TESTNET",r[r.ZERO=543210]="ZERO",r[r.BOB=60808]="BOB";var b,B,D,l,F,h,I,O,m,R=[exports.ChainId.MAINNET,exports.ChainId.OPTIMISM,exports.ChainId.OPTIMISM_GOERLI,exports.ChainId.OPTIMISM_SEPOLIA,exports.ChainId.ARBITRUM_ONE,exports.ChainId.ARBITRUM_GOERLI,exports.ChainId.ARBITRUM_SEPOLIA,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA,exports.ChainId.CELO_ALFAJORES,exports.ChainId.CELO,exports.ChainId.BNB,exports.ChainId.AVALANCHE,exports.ChainId.BASE,exports.ChainId.BASE_GOERLI,exports.ChainId.ZORA,exports.ChainId.ZORA_SEPOLIA,exports.ChainId.ROOTSTOCK,exports.ChainId.BLAST,exports.ChainId.ZKSYNC,exports.ChainId.ABSTRACT_TESTNET,exports.ChainId.ZERO,exports.ChainId.BOB];(b=exports.NativeCurrencyName||(exports.NativeCurrencyName={})).ETHER="ETH",b.MATIC="MATIC",b.CELO="CELO",b.GNOSIS="XDAI",b.MOONBEAM="GLMR",b.BNB="BNB",b.AVAX="AVAX",b.ROOTSTOCK="RBTC";var S=[exports.ChainId.MAINNET,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA];function T(e,r){return void 0===r&&(r=[]),S.concat(r).reduce((function(r,t){return r[t]=e,r}),{})}var y,g,v=T("0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",[exports.ChainId.OPTIMISM,exports.ChainId.ARBITRUM_ONE,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.SEPOLIA]),_=((B={})[exports.ChainId.MAINNET]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",B[exports.ChainId.GOERLI]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",B[exports.ChainId.SEPOLIA]="0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0",B[exports.ChainId.OPTIMISM]="0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf",B[exports.ChainId.ARBITRUM_ONE]="0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9",B[exports.ChainId.AVALANCHE]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",B[exports.ChainId.BASE]="0x8909dc15e40173ff4699343b6eb8132c65e18ec6",B[exports.ChainId.BNB]="0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6",B[exports.ChainId.POLYGON]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",B[exports.ChainId.CELO]="0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f",B[exports.ChainId.BLAST]="0x5C346464d33F90bABaf70dB6388507CC889C1070",B[exports.ChainId.ABSTRACT_TESTNET]="0xcD87b21B627cB2d695FBc2101cf64F8007F25E07",B[exports.ChainId.ZERO]="0x1B4427e212475B12e62f0f142b8AfEf3BC18B559",B),N=((D={})[exports.ChainId.MAINNET]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",D[exports.ChainId.GOERLI]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",D[exports.ChainId.ARBITRUM_ONE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",D[exports.ChainId.OPTIMISM]="0x4a7b5da61326a6379179b40d00f57e5bbdc962c2",D[exports.ChainId.BASE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",D[exports.ChainId.AVALANCHE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",D[exports.ChainId.BNB]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",D[exports.ChainId.POLYGON]="0xedf6066a2b290c185783862c7f4776a2c8077ad1",D[exports.ChainId.BLAST]="0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035",D[exports.ChainId.ABSTRACT_TESTNET]="0x07551c0Daf6fCD9bc2A398357E5C92C139724Ef3",D[exports.ChainId.ZERO]="0xD7C05A08cB43e99d596B606A1c03EA2F21289d94",D),M={v3CoreFactoryAddress:"0x1F98431c8aD98523631AE4a59f267346ea31F984",multicallAddress:"0x1F98415757620B543A52E61c46B32eB19261F984",quoterAddress:"0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",v3MigratorAddress:"0xA5644E29708357803b5A882D272c41cC0dF92B34",nonfungiblePositionManagerAddress:"0xC36442b4a4522E871399CD717aBDD847Ab11FE88"},L=x({},M,{mixedRouteQuoterV1Address:"0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E"}),P=x({},M,{mixedRouteQuoterV1Address:"0xBa60b6e6fF25488308789E6e0A65D838be34194e"}),w=M,U=x({},M,{multicallAddress:"0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB",tickLensAddress:"0xbfd8137f7d1516D3ea5cA83523914859ec47F573"}),q=M,W={v3CoreFactoryAddress:"0xAfE208a311B21f13EF87E33A90049fC17A7acDEc",multicallAddress:"0x633987602DE5C4F337e3DbF265303A1080324204",quoterAddress:"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8",v3MigratorAddress:"0x3cFd4d48EDfDCC53D3f173F596f621064614C582",nonfungiblePositionManagerAddress:"0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A",tickLensAddress:"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D"},G=((l={})[exports.ChainId.MAINNET]=L,l[exports.ChainId.OPTIMISM]=w,l[exports.ChainId.ARBITRUM_ONE]=U,l[exports.ChainId.POLYGON]=q,l[exports.ChainId.POLYGON_MUMBAI]=q,l[exports.ChainId.GOERLI]=P,l[exports.ChainId.CELO]=W,l[exports.ChainId.CELO_ALFAJORES]=W,l[exports.ChainId.BNB]={v3CoreFactoryAddress:"0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7",multicallAddress:"0x963Df249eD09c358A4819E39d9Cd5736c3087184",quoterAddress:"0x78D78E420Da98ad378D7799bE8f4AF69033EB077",v3MigratorAddress:"0x32681814957e0C13117ddc0c2aba232b5c9e760f",nonfungiblePositionManagerAddress:"0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613",tickLensAddress:"0xD9270014D396281579760619CCf4c3af0501A47C",swapRouter02Address:"0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2"},l[exports.ChainId.OPTIMISM_GOERLI]={v3CoreFactoryAddress:"0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10",multicallAddress:"0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd",quoterAddress:"0x9569CbA925c8ca2248772A9A4976A516743A246F",v3MigratorAddress:"0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8",nonfungiblePositionManagerAddress:"0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6",tickLensAddress:"0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e"},l[exports.ChainId.OPTIMISM_SEPOLIA]={v3CoreFactoryAddress:"0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF",multicallAddress:"0x80e4e06841bb76AA9735E0448cB8d003C0EF009a",quoterAddress:"0x0FBEa6cf957d95ee9313490050F6A0DA68039404",v3MigratorAddress:"0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07",nonfungiblePositionManagerAddress:"0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d",tickLensAddress:"0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5",swapRouter02Address:"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4"},l[exports.ChainId.ARBITRUM_GOERLI]={v3CoreFactoryAddress:"0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6",multicallAddress:"0x8260CB40247290317a4c062F3542622367F206Ee",quoterAddress:"0x1dd92b83591781D0C6d98d07391eea4b9a6008FA",v3MigratorAddress:"0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3",nonfungiblePositionManagerAddress:"0x622e4726a167799826d1E1D150b076A7725f5D81",tickLensAddress:"0xb52429333da969a0C79a60930a4Bf0020E5D1DE8"},l[exports.ChainId.ARBITRUM_SEPOLIA]={v3CoreFactoryAddress:"0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e",multicallAddress:"0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A",quoterAddress:"0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B",v3MigratorAddress:"0x398f43ef2c67B941147157DA1c5a868E906E043D",nonfungiblePositionManagerAddress:"0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65",tickLensAddress:"0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9",swapRouter02Address:"0x101F443B4d1b059569D643917553c771E1b9663E"},l[exports.ChainId.SEPOLIA]={v3CoreFactoryAddress:"0x0227628f3F023bb0B980b67D528571c95c6DaC1c",multicallAddress:"0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07",quoterAddress:"0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3",v3MigratorAddress:"0x729004182cF005CEC8Bd85df140094b6aCbe8b15",nonfungiblePositionManagerAddress:"0x1238536071E1c677A632429e3655c799b22cDA52",tickLensAddress:"0xd7f33bcdb21b359c8ee6f0251d30e94832baad07",swapRouter02Address:"0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E",mixedRouteQuoterV2Address:"0xa8b0be287acB850952DE4287b84B7222cc654C09"},l[exports.ChainId.AVALANCHE]={v3CoreFactoryAddress:"0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD",multicallAddress:"0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2",quoterAddress:"0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F",v3MigratorAddress:"0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97",nonfungiblePositionManagerAddress:"0x655C406EBFa14EE2006250925e54ec43AD184f8B",tickLensAddress:"0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950",swapRouter02Address:"0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE"},l[exports.ChainId.BASE]={v3CoreFactoryAddress:"0x33128a8fC17869897dcE68Ed026d694621f6FDfD",multicallAddress:"0x091e99cb1C49331a94dD62755D168E941AbD0693",quoterAddress:"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a",v3MigratorAddress:"0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7",nonfungiblePositionManagerAddress:"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1",tickLensAddress:"0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d",swapRouter02Address:"0x2626664c2603336E57B271c5C0b26F421741e481",mixedRouteQuoterV1Address:"0xe544efae946f0008ae9a8d64493efa7886b73776"},l[exports.ChainId.BASE_GOERLI]={v3CoreFactoryAddress:"0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2",multicallAddress:"0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439",quoterAddress:"0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9",v3MigratorAddress:"0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE",nonfungiblePositionManagerAddress:"0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30",tickLensAddress:"0x1acB873Ee909D0c98adB18e4474943249F931b92",swapRouter02Address:"0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d"},l[exports.ChainId.ZORA]={v3CoreFactoryAddress:"0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb",multicallAddress:"0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15",quoterAddress:"0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df",v3MigratorAddress:"0x048352d8dCF13686982C799da63fA6426a9D0b60",nonfungiblePositionManagerAddress:"0xbC91e8DfA3fF18De43853372A3d7dfe585137D78",tickLensAddress:"0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044",swapRouter02Address:"0x7De04c96BE5159c3b5CeffC82aa176dc81281557"},l[exports.ChainId.ZORA_SEPOLIA]={v3CoreFactoryAddress:"0x4324A677D74764f46f33ED447964252441aA8Db6",multicallAddress:"0xA1E7e3A69671C4494EC59Dbd442de930a93F911A",quoterAddress:"0xC195976fEF0985886E37036E2DF62bF371E12Df0",v3MigratorAddress:"0x65ef259b31bf1d977c37e9434658694267674897",nonfungiblePositionManagerAddress:"0xB8458EaAe43292e3c1F7994EFd016bd653d23c20",tickLensAddress:"0x23C0F71877a1Fc4e20A78018f9831365c85f3064"},l[exports.ChainId.ROOTSTOCK]={v3CoreFactoryAddress:"0xaF37EC98A00FD63689CF3060BF3B6784E00caD82",multicallAddress:"0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386",quoterAddress:"0xb51727c996C68E60F598A923a5006853cd2fEB31",v3MigratorAddress:"0x16678977CA4ec3DAD5efc7b15780295FE5f56162",nonfungiblePositionManagerAddress:"0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1",tickLensAddress:"0x55B9dF5bF68ADe972191a91980459f48ecA16afC",swapRouter02Address:"0x0B14ff67f0014046b4b99057Aec4509640b3947A"},l[exports.ChainId.BLAST]={v3CoreFactoryAddress:"0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd",multicallAddress:"0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705",quoterAddress:"0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77",v3MigratorAddress:"0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0",nonfungiblePositionManagerAddress:"0xB218e4f7cF0533d4696fDfC419A0023D33345F28",tickLensAddress:"0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274",swapRouter02Address:"0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66"},l[exports.ChainId.ZKSYNC]={v3CoreFactoryAddress:"0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422",multicallAddress:"0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C",quoterAddress:"0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28",v3MigratorAddress:"0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E",nonfungiblePositionManagerAddress:"0x0616e5762c1E7Dc3723c50663dF10a162D690a86",tickLensAddress:"0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89",swapRouter02Address:"0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3"},l[exports.ChainId.ABSTRACT_TESTNET]={v3CoreFactoryAddress:"0x2E17FF9b877661bDFEF8879a4B31665157a960F0",multicallAddress:"0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8",quoterAddress:"0xdE41045eb15C8352413199f35d6d1A32803DaaE2",v3MigratorAddress:"0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed",nonfungiblePositionManagerAddress:"0x069f199763c045A294C7913E64bA80E5F362A5d7",tickLensAddress:"0x2EC62f97506E0184C423B01c525ab36e1c61f78A",swapRouter02Address:"0x3914e72A73181a3EdB4dBC445cE2A01d480eacb1"},l[exports.ChainId.ZERO]={v3CoreFactoryAddress:"0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1",multicallAddress:"0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0",quoterAddress:"0x22B98c8Bdfea8D928101eEC40Af634ff37804997",v3MigratorAddress:"0x05eead9625966847d60774Cf2c3b004AfBC45314",nonfungiblePositionManagerAddress:"0x5b15468dFD83cF9192082d4510034c9431bb05eB",tickLensAddress:"0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E",swapRouter02Address:"0xD936711eABD2Ce52747d7122757316C7DFe3599b"},l[exports.ChainId.BOB]={v3CoreFactoryAddress:"0xcb2436774C3e191c85056d248EF4260ce5f27A9D",multicallAddress:"0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435",quoterAddress:"0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA",v3MigratorAddress:"0x0000000000000000000000000000000000000000",nonfungiblePositionManagerAddress:"0x743E03cceB4af2efA3CC76838f6E8B50B63F184c",tickLensAddress:"0xB3309C48F8407651D918ca3Da4C45DE40109E641",swapRouter02Address:"0x807F4E281B7A3B324825C64ca53c69F0b418dE40"},l),k=x({},R.reduce((function(e,r){return e[r]=G[r].v3CoreFactoryAddress,e}),{})),H=x({},R.reduce((function(e,r){var t=G[r].v3MigratorAddress;return t&&(e[r]=t),e}),{})),V=x({},R.reduce((function(e,r){return e[r]=G[r].multicallAddress,e}),{})),j=T("0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F"),Z=((F={})[exports.ChainId.MAINNET]="0xC4e172459f1E7939D522503B81AFAaC1014CE6F6",F),Y=((h={})[exports.ChainId.MAINNET]="0x408ED6354d4973f66138C91495F2f2FCbd8724C3",h),K=T("0x1a9C8182C09F50C8318d769245beA52c32BE35BC"),X=((I={})[exports.ChainId.MAINNET]="0x090D4613473dEE047c3f2706764f49E0821D256e",I),Q=((O={})[exports.ChainId.MAINNET]="0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8",O),J=x({},R.reduce((function(e,r){return e[r]=G[r].quoterAddress,e}),{})),z=x({},R.reduce((function(e,r){var t=G[r].nonfungiblePositionManagerAddress;return t&&(e[r]=t),e}),{})),$=x({},T("0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e")),ee=((m={})[exports.ChainId.MAINNET]="0x65770b5283117639760beA3F867b69b3697a91dd",m),re=x({},R.reduce((function(e,r){var t=G[r].tickLensAddress;return t&&(e[r]=t),e}),{})),te=R.reduce((function(e,r){var t=G[r].mixedRouteQuoterV1Address;return t&&(e[r]=t),e}),{});(y=exports.TradeType||(exports.TradeType={}))[y.EXACT_INPUT=0]="EXACT_INPUT",y[y.EXACT_OUTPUT=1]="EXACT_OUTPUT",(g=exports.Rounding||(exports.Rounding={}))[g.ROUND_DOWN=0]="ROUND_DOWN",g[g.ROUND_HALF_UP=1]="ROUND_HALF_UP",g[g.ROUND_UP=2]="ROUND_UP";var de,ne,ae=t.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),oe=o(n),se=o(a),ie=((de={})[exports.Rounding.ROUND_DOWN]=oe.ROUND_DOWN,de[exports.Rounding.ROUND_HALF_UP]=oe.ROUND_HALF_UP,de[exports.Rounding.ROUND_UP]=oe.ROUND_UP,de),ce=((ne={})[exports.Rounding.ROUND_DOWN]=0,ne[exports.Rounding.ROUND_HALF_UP]=1,ne[exports.Rounding.ROUND_UP]=3,ne),Ae=function(){function e(e,r){void 0===r&&(r=t.BigInt(1)),this.numerator=t.BigInt(e),this.denominator=t.BigInt(r)}e.tryParseFraction=function(r){if(r instanceof t||"number"==typeof r||"string"==typeof r)return new e(r);if("numerator"in r&&"denominator"in r)return r;throw new Error("Could not parse fraction")};var r=e.prototype;return r.invert=function(){return new e(this.denominator,this.numerator)},r.add=function(r){var d=e.tryParseFraction(r);return t.equal(this.denominator,d.denominator)?new e(t.add(this.numerator,d.numerator),this.denominator):new e(t.add(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator)),t.multiply(this.denominator,d.denominator))},r.subtract=function(r){var d=e.tryParseFraction(r);return t.equal(this.denominator,d.denominator)?new e(t.subtract(this.numerator,d.numerator),this.denominator):new e(t.subtract(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator)),t.multiply(this.denominator,d.denominator))},r.lessThan=function(r){var d=e.tryParseFraction(r);return t.lessThan(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator))},r.equalTo=function(r){var d=e.tryParseFraction(r);return t.equal(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator))},r.greaterThan=function(r){var d=e.tryParseFraction(r);return t.greaterThan(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator))},r.multiply=function(r){var d=e.tryParseFraction(r);return new e(t.multiply(this.numerator,d.numerator),t.multiply(this.denominator,d.denominator))},r.divide=function(r){var d=e.tryParseFraction(r);return new e(t.multiply(this.numerator,d.denominator),t.multiply(this.denominator,d.numerator))},r.toSignificant=function(e,r,t){void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||d(!1),e>0||d(!1),oe.set({precision:e+1,rounding:ie[t]});var n=new oe(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(e);return n.toFormat(n.decimalPlaces(),r)},r.toFixed=function(e,r,t){return void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||d(!1),e>=0||d(!1),se.DP=e,se.RM=ce[t],new se(this.numerator.toString()).div(this.denominator.toString()).toFormat(e,r)},C(e,[{key:"quotient",get:function(){return t.divide(this.numerator,this.denominator)}},{key:"remainder",get:function(){return new e(t.remainder(this.numerator,this.denominator),this.denominator)}},{key:"asFraction",get:function(){return new e(this.numerator,this.denominator)}}]),e}(),fe=o(a),ue=function(e){function r(r,n,a){var o;return o=e.call(this,n,a)||this,t.lessThanOrEqual(o.quotient,ae)||d(!1),o.currency=r,o.decimalScale=t.exponentiate(t.BigInt(10),t.BigInt(r.decimals)),o}p(r,e),r.fromRawAmount=function(e,t){return new r(e,t)},r.fromFractionalAmount=function(e,t,d){return new r(e,t,d)};var n=r.prototype;return n.add=function(t){this.currency.equals(t.currency)||d(!1);var n=e.prototype.add.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},n.subtract=function(t){this.currency.equals(t.currency)||d(!1);var n=e.prototype.subtract.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},n.multiply=function(t){var d=e.prototype.multiply.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},n.divide=function(t){var d=e.prototype.divide.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},n.toSignificant=function(r,t,d){return void 0===r&&(r=6),void 0===d&&(d=exports.Rounding.ROUND_DOWN),e.prototype.divide.call(this,this.decimalScale).toSignificant(r,t,d)},n.toFixed=function(r,t,n){return void 0===r&&(r=this.currency.decimals),void 0===n&&(n=exports.Rounding.ROUND_DOWN),r<=this.currency.decimals||d(!1),e.prototype.divide.call(this,this.decimalScale).toFixed(r,t,n)},n.toExact=function(e){return void 0===e&&(e={groupSeparator:""}),fe.DP=this.currency.decimals,new fe(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(e)},C(r,[{key:"wrapped",get:function(){return this.currency.isToken?this:r.fromFractionalAmount(this.currency.wrapped,this.numerator,this.denominator)}}]),r}(Ae),Ee=new Ae(t.BigInt(100));function Ce(e){return new xe(e.numerator,e.denominator)}var xe=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isPercent=!0,r}p(r,e);var t=r.prototype;return t.add=function(r){return Ce(e.prototype.add.call(this,r))},t.subtract=function(r){return Ce(e.prototype.subtract.call(this,r))},t.multiply=function(r){return Ce(e.prototype.multiply.call(this,r))},t.divide=function(r){return Ce(e.prototype.divide.call(this,r))},t.toSignificant=function(r,t,d){return void 0===r&&(r=5),e.prototype.multiply.call(this,Ee).toSignificant(r,t,d)},t.toFixed=function(r,t,d){return void 0===r&&(r=2),e.prototype.multiply.call(this,Ee).toFixed(r,t,d)},r}(Ae),pe=function(e){function r(){for(var r,d,n,a,o,s=arguments.length,i=new Array(s),c=0;c<s;c++)i[c]=arguments[c];if(4===i.length)d=i[0],n=i[1],a=i[2],o=i[3];else{var A=i[0].quoteAmount.divide(i[0].baseAmount),f=[i[0].baseAmount.currency,i[0].quoteAmount.currency,A.denominator,A.numerator];d=f[0],n=f[1],a=f[2],o=f[3]}return(r=e.call(this,o,a)||this).baseCurrency=d,r.quoteCurrency=n,r.scalar=new Ae(t.exponentiate(t.BigInt(10),t.BigInt(d.decimals)),t.exponentiate(t.BigInt(10),t.BigInt(n.decimals))),r}p(r,e);var n=r.prototype;return n.invert=function(){return new r(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator)},n.multiply=function(t){this.quoteCurrency.equals(t.baseCurrency)||d(!1);var n=e.prototype.multiply.call(this,t);return new r(this.baseCurrency,t.quoteCurrency,n.denominator,n.numerator)},n.quote=function(r){r.currency.equals(this.baseCurrency)||d(!1);var t=e.prototype.multiply.call(this,r);return ue.fromFractionalAmount(this.quoteCurrency,t.numerator,t.denominator)},n.toSignificant=function(e,r,t){return void 0===e&&(e=6),this.adjustedForDecimals.toSignificant(e,r,t)},n.toFixed=function(e,r,t){return void 0===e&&(e=4),this.adjustedForDecimals.toFixed(e,r,t)},C(r,[{key:"adjustedForDecimals",get:function(){return e.prototype.multiply.call(this,this.scalar)}}]),r}(Ae),be=function(e,r,t,n){Number.isSafeInteger(e)||d(!1),r>=0&&r<255&&Number.isInteger(r)||d(!1),this.chainId=e,this.decimals=r,this.symbol=t,this.name=n},Be=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isNative=!0,r.isToken=!1,r}return p(r,e),r}(be);function De(e){try{return i.getAddress(e)}catch(r){throw new Error(e+" is not a valid address.")}}var le=/^0x[0-9a-fA-F]{40}$/,Fe=function(e){function r(r,t,n,a,o,i,c,A){var f;return(f=e.call(this,r,n,a,o)||this).isNative=!1,f.isToken=!0,f.address=i?function(e){if(le.test(e))return e;throw new Error(e+" is not a valid address.")}(t):De(t),c&&(c.gte(s.BigNumber.from(0))||d(!1)),A&&(A.gte(s.BigNumber.from(0))||d(!1)),f.buyFeeBps=c,f.sellFeeBps=A,f}p(r,e);var t=r.prototype;return t.equals=function(e){return e.isToken&&this.chainId===e.chainId&&this.address.toLowerCase()===e.address.toLowerCase()},t.sortsBefore=function(e){return this.chainId!==e.chainId&&d(!1),this.address.toLowerCase()===e.address.toLowerCase()&&d(!1),this.address.toLowerCase()<e.address.toLowerCase()},C(r,[{key:"wrapped",get:function(){return this}}]),r}(be),he={1:new Fe(1,"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18,"WETH","Wrapped Ether"),3:new Fe(3,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),4:new Fe(4,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),5:new Fe(5,"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",18,"WETH","Wrapped Ether"),42:new Fe(42,"0xd0A1E359811322d97991E03f863a0C30C2cF029C",18,"WETH","Wrapped Ether"),10:new Fe(10,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),69:new Fe(69,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),11155420:new Fe(11155420,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),42161:new Fe(42161,"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",18,"WETH","Wrapped Ether"),421611:new Fe(421611,"0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681",18,"WETH","Wrapped Ether"),421614:new Fe(421614,"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73",18,"WETH","Wrapped Ether"),8453:new Fe(8453,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),56:new Fe(56,"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",18,"WBNB","Wrapped BNB"),137:new Fe(137,"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",18,"WMATIC","Wrapped MATIC"),43114:new Fe(43114,"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",18,"WAVAX","Wrapped AVAX"),324:new Fe(324,"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91",18,"WETH","Wrapped Ether"),11124:new Fe(11124,"0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d",18,"WETH","Wrapped Ether"),543210:new Fe(543210,"0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c",18,"WETH","Wrapped Ether"),60808:new Fe(60808,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether")},Ie=function(e){function r(r){return e.call(this,r,18,"ETH","Ether")||this}return p(r,e),r.onChain=function(e){var t;return null!=(t=this._etherCache[e])?t:this._etherCache[e]=new r(e)},r.prototype.equals=function(e){return e.isNative&&e.chainId===this.chainId},C(r,[{key:"wrapped",get:function(){var e=he[this.chainId];return e||d(!1),e}}]),r}(Be);Ie._etherCache={};var Oe=t.BigInt(Number.MAX_SAFE_INTEGER),me=t.BigInt(0),Re=t.BigInt(1),Se=t.BigInt(2);exports.ARGENT_WALLET_DETECTOR_ADDRESS=Q,exports.CHAIN_TO_ADDRESSES_MAP=G,exports.CurrencyAmount=ue,exports.ENS_REGISTRAR_ADDRESSES=$,exports.Ether=Ie,exports.Fraction=Ae,exports.GOVERNANCE_ALPHA_V0_ADDRESSES=j,exports.GOVERNANCE_ALPHA_V1_ADDRESSES=Z,exports.GOVERNANCE_BRAVO_ADDRESSES=Y,exports.MERKLE_DISTRIBUTOR_ADDRESS=X,exports.MIXED_ROUTE_QUOTER_V1_ADDRESSES=te,exports.MULTICALL_ADDRESSES=V,exports.MaxUint256=ae,exports.NONFUNGIBLE_POSITION_MANAGER_ADDRESSES=z,exports.NativeCurrency=Be,exports.Percent=xe,exports.Price=pe,exports.QUOTER_ADDRESSES=J,exports.SOCKS_CONTROLLER_ADDRESSES=ee,exports.SUPPORTED_CHAINS=R,exports.SWAP_ROUTER_02_ADDRESSES=function(e){var r;return R.includes(e)?null!=(r=G[e].swapRouter02Address)?r:"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45":""},exports.TICK_LENS_ADDRESSES=re,exports.TIMELOCK_ADDRESSES=K,exports.Token=Fe,exports.UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS="0x8B799381ac40b838BBA4131ffB26197C432AFe78",exports.UNI_ADDRESSES=v,exports.V2_FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.V2_FACTORY_ADDRESSES=_,exports.V2_ROUTER_ADDRESS="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",exports.V2_ROUTER_ADDRESSES=N,exports.V3_CORE_FACTORY_ADDRESSES=k,exports.V3_MIGRATOR_ADDRESSES=H,exports.WETH9=he,exports.computePriceImpact=function(e,r,t){var d=e.quote(r),n=d.subtract(t).divide(d);return new xe(n.numerator,n.denominator)},exports.computeZksyncCreate2Address=function(e,r,t,d){void 0===d&&(d="0x");var n=A.keccak256(f.toUtf8Bytes("zksyncCreate2")),a=A.keccak256(d),o=A.keccak256(c.concat([n,c.hexZeroPad(e,32),t,r,a])).slice(26);return i.getAddress(o)},exports.sortedInsert=function(e,r,t,n){if(t>0||d(!1),e.length<=t||d(!1),0===e.length)return e.push(r),null;var a=e.length===t;if(a&&n(e[e.length-1],r)<=0)return r;for(var o=0,s=e.length;o<s;){var i=o+s>>>1;n(e[i],r)<=0?o=i+1:s=i}return e.splice(o,0,r),a?e.pop():null},exports.sqrt=function(e){if(t.greaterThanOrEqual(e,me)||d(!1),t.lessThan(e,Oe))return t.BigInt(Math.floor(Math.sqrt(t.toNumber(e))));var r,n;for(r=e,n=t.add(t.divide(e,Se),Re);t.lessThan(n,r);)r=n,n=t.divide(t.add(t.divide(e,n),n),Se);return r},exports.validateAndParseAddress=De;
+//# sourceMappingURL=sdk-core.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.production.min.js.map b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.production.min.js.map
new file mode 100644
index 0000000..18ac936
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.cjs.production.min.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n  ABSTRACT_TESTNET = 11124,\n  ZERO = 543210,\n  BOB = 60808,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n  ChainId.ABSTRACT_TESTNET,\n  ChainId.ZERO,\n  ChainId.BOB,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n  [ChainId.ABSTRACT_TESTNET]: '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07',\n  [ChainId.ZERO]: '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n  [ChainId.ABSTRACT_TESTNET]: '0x07551c0Daf6fCD9bc2A398357E5C92C139724Ef3',\n  [ChainId.ZERO]: '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nconst ABSTRACT_TESTNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',\n  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',\n  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',\n  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',\n  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',\n  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',\n  swapRouter02Address: '0x3914e72A73181a3EdB4dBC445cE2A01d480eacb1',\n}\n\nconst ZERO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',\n  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',\n  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b',\n}\n\nconst BOB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',\n  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',\n  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',\n  // Missing migrator address for BOB, using a place holder for now\n  v3MigratorAddress: '0x0000000000000000000000000000000000000000',\n  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',\n  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',\n  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n  [ChainId.ABSTRACT_TESTNET]: ABSTRACT_TESTNET_ADDRESSES,\n  [ChainId.ZERO]: ZERO_ADDRESSES,\n  [ChainId.BOB]: BOB_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n  11124: new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),\n  543210: new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),\n  60808: new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","ABSTRACT_TESTNET","ZERO","BOB","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","swapRouter02Address","mixedRouteQuoterV2Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","1","3","4","5","42","10","69","11155420","42161","421611","421614","8453","56","137","43114","324","11124","543210","60808","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ONE","TWO","_CHAIN_TO_ADDRESSES_M2","includes","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.esm.js b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.esm.js
new file mode 100644
index 0000000..def2aac
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.esm.js
@@ -0,0 +1,995 @@
+import JSBI from 'jsbi';
+import invariant from 'tiny-invariant';
+import _Decimal from 'decimal.js-light';
+import _Big from 'big.js';
+import toFormat from 'toformat';
+import { BigNumber } from '@ethersproject/bignumber';
+import { getAddress } from '@ethersproject/address';
+import { concat, hexZeroPad } from '@ethersproject/bytes';
+import { keccak256 } from '@ethersproject/keccak256';
+import { toUtf8Bytes } from '@ethersproject/strings';
+
+function _toPrimitive(t, r) {
+  if ("object" != typeof t || !t) return t;
+  var e = t[Symbol.toPrimitive];
+  if (void 0 !== e) {
+    var i = e.call(t, r || "default");
+    if ("object" != typeof i) return i;
+    throw new TypeError("@@toPrimitive must return a primitive value.");
+  }
+  return ("string" === r ? String : Number)(t);
+}
+function _toPropertyKey(t) {
+  var i = _toPrimitive(t, "string");
+  return "symbol" == typeof i ? i : String(i);
+}
+function _defineProperties(target, props) {
+  for (var i = 0; i < props.length; i++) {
+    var descriptor = props[i];
+    descriptor.enumerable = descriptor.enumerable || false;
+    descriptor.configurable = true;
+    if ("value" in descriptor) descriptor.writable = true;
+    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
+  }
+}
+function _createClass(Constructor, protoProps, staticProps) {
+  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
+  if (staticProps) _defineProperties(Constructor, staticProps);
+  Object.defineProperty(Constructor, "prototype", {
+    writable: false
+  });
+  return Constructor;
+}
+function _extends() {
+  _extends = Object.assign ? Object.assign.bind() : function (target) {
+    for (var i = 1; i < arguments.length; i++) {
+      var source = arguments[i];
+      for (var key in source) {
+        if (Object.prototype.hasOwnProperty.call(source, key)) {
+          target[key] = source[key];
+        }
+      }
+    }
+    return target;
+  };
+  return _extends.apply(this, arguments);
+}
+function _inheritsLoose(subClass, superClass) {
+  subClass.prototype = Object.create(superClass.prototype);
+  subClass.prototype.constructor = subClass;
+  _setPrototypeOf(subClass, superClass);
+}
+function _setPrototypeOf(o, p) {
+  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
+    o.__proto__ = p;
+    return o;
+  };
+  return _setPrototypeOf(o, p);
+}
+
+var ChainId;
+(function (ChainId) {
+  ChainId[ChainId["MAINNET"] = 1] = "MAINNET";
+  ChainId[ChainId["GOERLI"] = 5] = "GOERLI";
+  ChainId[ChainId["SEPOLIA"] = 11155111] = "SEPOLIA";
+  ChainId[ChainId["OPTIMISM"] = 10] = "OPTIMISM";
+  ChainId[ChainId["OPTIMISM_GOERLI"] = 420] = "OPTIMISM_GOERLI";
+  ChainId[ChainId["OPTIMISM_SEPOLIA"] = 11155420] = "OPTIMISM_SEPOLIA";
+  ChainId[ChainId["ARBITRUM_ONE"] = 42161] = "ARBITRUM_ONE";
+  ChainId[ChainId["ARBITRUM_GOERLI"] = 421613] = "ARBITRUM_GOERLI";
+  ChainId[ChainId["ARBITRUM_SEPOLIA"] = 421614] = "ARBITRUM_SEPOLIA";
+  ChainId[ChainId["POLYGON"] = 137] = "POLYGON";
+  ChainId[ChainId["POLYGON_MUMBAI"] = 80001] = "POLYGON_MUMBAI";
+  ChainId[ChainId["CELO"] = 42220] = "CELO";
+  ChainId[ChainId["CELO_ALFAJORES"] = 44787] = "CELO_ALFAJORES";
+  ChainId[ChainId["GNOSIS"] = 100] = "GNOSIS";
+  ChainId[ChainId["MOONBEAM"] = 1284] = "MOONBEAM";
+  ChainId[ChainId["BNB"] = 56] = "BNB";
+  ChainId[ChainId["AVALANCHE"] = 43114] = "AVALANCHE";
+  ChainId[ChainId["BASE_GOERLI"] = 84531] = "BASE_GOERLI";
+  ChainId[ChainId["BASE"] = 8453] = "BASE";
+  ChainId[ChainId["ZORA"] = 7777777] = "ZORA";
+  ChainId[ChainId["ZORA_SEPOLIA"] = 999999999] = "ZORA_SEPOLIA";
+  ChainId[ChainId["ROOTSTOCK"] = 30] = "ROOTSTOCK";
+  ChainId[ChainId["BLAST"] = 81457] = "BLAST";
+  ChainId[ChainId["ZKSYNC"] = 324] = "ZKSYNC";
+  ChainId[ChainId["ABSTRACT_TESTNET"] = 11124] = "ABSTRACT_TESTNET";
+  ChainId[ChainId["ZERO"] = 543210] = "ZERO";
+  ChainId[ChainId["BOB"] = 60808] = "BOB";
+})(ChainId || (ChainId = {}));
+var SUPPORTED_CHAINS = [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.OPTIMISM_SEPOLIA, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.ARBITRUM_SEPOLIA, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI, ChainId.ZORA, ChainId.ZORA_SEPOLIA, ChainId.ROOTSTOCK, ChainId.BLAST, ChainId.ZKSYNC, ChainId.ABSTRACT_TESTNET, ChainId.ZERO, ChainId.BOB];
+var NativeCurrencyName;
+(function (NativeCurrencyName) {
+  // Strings match input for CLI
+  NativeCurrencyName["ETHER"] = "ETH";
+  NativeCurrencyName["MATIC"] = "MATIC";
+  NativeCurrencyName["CELO"] = "CELO";
+  NativeCurrencyName["GNOSIS"] = "XDAI";
+  NativeCurrencyName["MOONBEAM"] = "GLMR";
+  NativeCurrencyName["BNB"] = "BNB";
+  NativeCurrencyName["AVAX"] = "AVAX";
+  NativeCurrencyName["ROOTSTOCK"] = "RBTC";
+})(NativeCurrencyName || (NativeCurrencyName = {}));
+
+var _V2_FACTORY_ADDRESSES, _V2_ROUTER_ADDRESSES, _CHAIN_TO_ADDRESSES_M, _GOVERNANCE_ALPHA_V1_, _GOVERNANCE_BRAVO_ADD, _MERKLE_DISTRIBUTOR_A, _ARGENT_WALLET_DETECT, _SOCKS_CONTROLLER_ADD;
+var DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA];
+function constructSameAddressMap(address, additionalNetworks) {
+  if (additionalNetworks === void 0) {
+    additionalNetworks = [];
+  }
+  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce(function (memo, chainId) {
+    memo[chainId] = address;
+    return memo;
+  }, {});
+}
+var UNI_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [ChainId.OPTIMISM, ChainId.ARBITRUM_ONE, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.SEPOLIA]);
+var UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78';
+/**
+ * @deprecated use V2_FACTORY_ADDRESSES instead
+ */
+var V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
+var V2_FACTORY_ADDRESSES = (_V2_FACTORY_ADDRESSES = {}, _V2_FACTORY_ADDRESSES[ChainId.MAINNET] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[ChainId.GOERLI] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[ChainId.SEPOLIA] = '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0', _V2_FACTORY_ADDRESSES[ChainId.OPTIMISM] = '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf', _V2_FACTORY_ADDRESSES[ChainId.ARBITRUM_ONE] = '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9', _V2_FACTORY_ADDRESSES[ChainId.AVALANCHE] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[ChainId.BASE] = '0x8909dc15e40173ff4699343b6eb8132c65e18ec6', _V2_FACTORY_ADDRESSES[ChainId.BNB] = '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6', _V2_FACTORY_ADDRESSES[ChainId.POLYGON] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[ChainId.CELO] = '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f', _V2_FACTORY_ADDRESSES[ChainId.BLAST] = '0x5C346464d33F90bABaf70dB6388507CC889C1070', _V2_FACTORY_ADDRESSES[ChainId.ABSTRACT_TESTNET] = '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07', _V2_FACTORY_ADDRESSES[ChainId.ZERO] = '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559', _V2_FACTORY_ADDRESSES);
+/**
+ * @deprecated use V2_ROUTER_ADDRESSES instead
+ */
+var V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
+var V2_ROUTER_ADDRESSES = (_V2_ROUTER_ADDRESSES = {}, _V2_ROUTER_ADDRESSES[ChainId.MAINNET] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[ChainId.GOERLI] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[ChainId.ARBITRUM_ONE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.OPTIMISM] = '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2', _V2_ROUTER_ADDRESSES[ChainId.BASE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.AVALANCHE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.BNB] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.POLYGON] = '0xedf6066a2b290c185783862c7f4776a2c8077ad1', _V2_ROUTER_ADDRESSES[ChainId.BLAST] = '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035', _V2_ROUTER_ADDRESSES[ChainId.ABSTRACT_TESTNET] = '0x07551c0Daf6fCD9bc2A398357E5C92C139724Ef3', _V2_ROUTER_ADDRESSES[ChainId.ZERO] = '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94', _V2_ROUTER_ADDRESSES);
+// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon
+var DEFAULT_ADDRESSES = {
+  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
+  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',
+  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',
+  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',
+  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'
+};
+var MAINNET_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'
+});
+var GOERLI_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'
+});
+var OPTIMISM_ADDRESSES = DEFAULT_ADDRESSES;
+var ARBITRUM_ONE_ADDRESSES = /*#__PURE__*/_extends({}, DEFAULT_ADDRESSES, {
+  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',
+  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'
+});
+var POLYGON_ADDRESSES = DEFAULT_ADDRESSES;
+// celo v3 addresses
+var CELO_ADDRESSES = {
+  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',
+  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',
+  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',
+  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',
+  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',
+  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'
+};
+// BNB v3 addresses
+var BNB_ADDRESSES = {
+  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',
+  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',
+  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',
+  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',
+  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',
+  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',
+  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'
+};
+// optimism goerli addresses
+var OPTIMISM_GOERLI_ADDRESSES = {
+  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',
+  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',
+  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',
+  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',
+  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',
+  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'
+};
+// optimism sepolia addresses
+var OPTIMISM_SEPOLIA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',
+  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',
+  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',
+  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',
+  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',
+  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',
+  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'
+};
+// arbitrum goerli v3 addresses
+var ARBITRUM_GOERLI_ADDRESSES = {
+  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',
+  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',
+  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',
+  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',
+  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',
+  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'
+};
+// arbitrum sepolia v3 addresses
+var ARBITRUM_SEPOLIA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',
+  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',
+  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',
+  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',
+  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',
+  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',
+  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'
+};
+// sepolia v3 addresses
+var SEPOLIA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',
+  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',
+  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',
+  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',
+  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',
+  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',
+  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',
+  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.
+  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09'
+};
+// Avalanche v3 addresses
+var AVALANCHE_ADDRESSES = {
+  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',
+  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',
+  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',
+  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',
+  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',
+  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',
+  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'
+};
+var BASE_ADDRESSES = {
+  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',
+  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',
+  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',
+  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',
+  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',
+  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',
+  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',
+  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776'
+};
+// Base Goerli v3 addresses
+var BASE_GOERLI_ADDRESSES = {
+  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',
+  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',
+  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',
+  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',
+  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',
+  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',
+  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'
+};
+var ZORA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',
+  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',
+  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',
+  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',
+  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',
+  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',
+  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'
+};
+var ZORA_SEPOLIA_ADDRESSES = {
+  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',
+  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',
+  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',
+  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',
+  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',
+  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'
+};
+var ROOTSTOCK_ADDRESSES = {
+  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',
+  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',
+  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',
+  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',
+  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',
+  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',
+  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'
+};
+var BLAST_ADDRESSES = {
+  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',
+  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',
+  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',
+  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',
+  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',
+  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',
+  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'
+};
+var ZKSYNC_ADDRESSES = {
+  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',
+  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',
+  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',
+  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',
+  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',
+  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',
+  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3'
+};
+var ABSTRACT_TESTNET_ADDRESSES = {
+  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',
+  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',
+  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',
+  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',
+  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',
+  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',
+  swapRouter02Address: '0x3914e72A73181a3EdB4dBC445cE2A01d480eacb1'
+};
+var ZERO_ADDRESSES = {
+  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',
+  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',
+  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',
+  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',
+  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',
+  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',
+  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b'
+};
+var BOB_ADDRESSES = {
+  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',
+  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',
+  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',
+  // Missing migrator address for BOB, using a place holder for now
+  v3MigratorAddress: '0x0000000000000000000000000000000000000000',
+  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',
+  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',
+  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40'
+};
+var CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_SEPOLIA] = OPTIMISM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_SEPOLIA] = ARBITRUM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZORA] = ZORA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZORA_SEPOLIA] = ZORA_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ROOTSTOCK] = ROOTSTOCK_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BLAST] = BLAST_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZKSYNC] = ZKSYNC_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ABSTRACT_TESTNET] = ABSTRACT_TESTNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZERO] = ZERO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BOB] = BOB_ADDRESSES, _CHAIN_TO_ADDRESSES_M);
+/* V3 Contract Addresses */
+var V3_CORE_FACTORY_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;
+  return memo;
+}, {}));
+var V3_MIGRATOR_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  var v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress;
+  if (v3MigratorAddress) {
+    memo[chainId] = v3MigratorAddress;
+  }
+  return memo;
+}, {}));
+var MULTICALL_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress;
+  return memo;
+}, {}));
+/**
+ * The oldest V0 governance address
+ */
+var GOVERNANCE_ALPHA_V0_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F');
+/**
+ * The older V1 governance address
+ */
+var GOVERNANCE_ALPHA_V1_ADDRESSES = (_GOVERNANCE_ALPHA_V1_ = {}, _GOVERNANCE_ALPHA_V1_[ChainId.MAINNET] = '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6', _GOVERNANCE_ALPHA_V1_);
+/**
+ * The latest governor bravo that is currently admin of timelock
+ */
+var GOVERNANCE_BRAVO_ADDRESSES = (_GOVERNANCE_BRAVO_ADD = {}, _GOVERNANCE_BRAVO_ADD[ChainId.MAINNET] = '0x408ED6354d4973f66138C91495F2f2FCbd8724C3', _GOVERNANCE_BRAVO_ADD);
+var TIMELOCK_ADDRESSES = /*#__PURE__*/constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC');
+var MERKLE_DISTRIBUTOR_ADDRESS = (_MERKLE_DISTRIBUTOR_A = {}, _MERKLE_DISTRIBUTOR_A[ChainId.MAINNET] = '0x090D4613473dEE047c3f2706764f49E0821D256e', _MERKLE_DISTRIBUTOR_A);
+var ARGENT_WALLET_DETECTOR_ADDRESS = (_ARGENT_WALLET_DETECT = {}, _ARGENT_WALLET_DETECT[ChainId.MAINNET] = '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8', _ARGENT_WALLET_DETECT);
+var QUOTER_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress;
+  return memo;
+}, {}));
+var NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  var nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress;
+  if (nonfungiblePositionManagerAddress) {
+    memo[chainId] = nonfungiblePositionManagerAddress;
+  }
+  return memo;
+}, {}));
+var ENS_REGISTRAR_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'));
+var SOCKS_CONTROLLER_ADDRESSES = (_SOCKS_CONTROLLER_ADD = {}, _SOCKS_CONTROLLER_ADD[ChainId.MAINNET] = '0x65770b5283117639760beA3F867b69b3697a91dd', _SOCKS_CONTROLLER_ADD);
+var TICK_LENS_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  var tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress;
+  if (tickLensAddress) {
+    memo[chainId] = tickLensAddress;
+  }
+  return memo;
+}, {}));
+var MIXED_ROUTE_QUOTER_V1_ADDRESSES = /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
+  var mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address;
+  if (mixedRouteQuoterV1Address) {
+    memo[chainId] = mixedRouteQuoterV1Address;
+  }
+  return memo;
+}, {});
+var SWAP_ROUTER_02_ADDRESSES = function SWAP_ROUTER_02_ADDRESSES(chainId) {
+  if (SUPPORTED_CHAINS.includes(chainId)) {
+    var _CHAIN_TO_ADDRESSES_M2;
+    var id = chainId;
+    return (_CHAIN_TO_ADDRESSES_M2 = CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address) != null ? _CHAIN_TO_ADDRESSES_M2 : '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45';
+  }
+  return '';
+};
+
+var TradeType;
+(function (TradeType) {
+  TradeType[TradeType["EXACT_INPUT"] = 0] = "EXACT_INPUT";
+  TradeType[TradeType["EXACT_OUTPUT"] = 1] = "EXACT_OUTPUT";
+})(TradeType || (TradeType = {}));
+var Rounding;
+(function (Rounding) {
+  Rounding[Rounding["ROUND_DOWN"] = 0] = "ROUND_DOWN";
+  Rounding[Rounding["ROUND_HALF_UP"] = 1] = "ROUND_HALF_UP";
+  Rounding[Rounding["ROUND_UP"] = 2] = "ROUND_UP";
+})(Rounding || (Rounding = {}));
+var MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
+
+var _toSignificantRoundin, _toFixedRounding;
+var Decimal = /*#__PURE__*/toFormat(_Decimal);
+var Big = /*#__PURE__*/toFormat(_Big);
+var toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);
+var toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);
+var Fraction = /*#__PURE__*/function () {
+  function Fraction(numerator, denominator) {
+    if (denominator === void 0) {
+      denominator = JSBI.BigInt(1);
+    }
+    this.numerator = JSBI.BigInt(numerator);
+    this.denominator = JSBI.BigInt(denominator);
+  }
+  Fraction.tryParseFraction = function tryParseFraction(fractionish) {
+    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);
+    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;
+    throw new Error('Could not parse fraction');
+  }
+  // performs floor division
+  ;
+  var _proto = Fraction.prototype;
+  _proto.invert = function invert() {
+    return new Fraction(this.denominator, this.numerator);
+  };
+  _proto.add = function add(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    if (JSBI.equal(this.denominator, otherParsed.denominator)) {
+      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);
+    }
+    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));
+  };
+  _proto.subtract = function subtract(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    if (JSBI.equal(this.denominator, otherParsed.denominator)) {
+      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);
+    }
+    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));
+  };
+  _proto.lessThan = function lessThan(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
+  };
+  _proto.equalTo = function equalTo(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
+  };
+  _proto.greaterThan = function greaterThan(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));
+  };
+  _proto.multiply = function multiply(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));
+  };
+  _proto.divide = function divide(other) {
+    var otherParsed = Fraction.tryParseFraction(other);
+    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));
+  };
+  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+    if (format === void 0) {
+      format = {
+        groupSeparator: ''
+      };
+    }
+    if (rounding === void 0) {
+      rounding = Rounding.ROUND_HALF_UP;
+    }
+    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== "production" ? invariant(false, significantDigits + " is not an integer.") : invariant(false) : void 0;
+    !(significantDigits > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, significantDigits + " is not positive.") : invariant(false) : void 0;
+    Decimal.set({
+      precision: significantDigits + 1,
+      rounding: toSignificantRounding[rounding]
+    });
+    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
+    return quotient.toFormat(quotient.decimalPlaces(), format);
+  };
+  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    if (format === void 0) {
+      format = {
+        groupSeparator: ''
+      };
+    }
+    if (rounding === void 0) {
+      rounding = Rounding.ROUND_HALF_UP;
+    }
+    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== "production" ? invariant(false, decimalPlaces + " is not an integer.") : invariant(false) : void 0;
+    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== "production" ? invariant(false, decimalPlaces + " is negative.") : invariant(false) : void 0;
+    Big.DP = decimalPlaces;
+    Big.RM = toFixedRounding[rounding];
+    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);
+  }
+  /**
+   * Helper method for converting any super class back to a fraction
+   */;
+  _createClass(Fraction, [{
+    key: "quotient",
+    get: function get() {
+      return JSBI.divide(this.numerator, this.denominator);
+    }
+    // remainder after floor division
+  }, {
+    key: "remainder",
+    get: function get() {
+      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);
+    }
+  }, {
+    key: "asFraction",
+    get: function get() {
+      return new Fraction(this.numerator, this.denominator);
+    }
+  }]);
+  return Fraction;
+}();
+
+var Big$1 = /*#__PURE__*/toFormat(_Big);
+var CurrencyAmount = /*#__PURE__*/function (_Fraction) {
+  _inheritsLoose(CurrencyAmount, _Fraction);
+  function CurrencyAmount(currency, numerator, denominator) {
+    var _this;
+    _this = _Fraction.call(this, numerator, denominator) || this;
+    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ? process.env.NODE_ENV !== "production" ? invariant(false, 'AMOUNT') : invariant(false) : void 0;
+    _this.currency = currency;
+    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));
+    return _this;
+  }
+  /**
+   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount
+   * @param currency the currency in the amount
+   * @param rawAmount the raw token or ether amount
+   */
+  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {
+    return new CurrencyAmount(currency, rawAmount);
+  }
+  /**
+   * Construct a currency amount with a denominator that is not equal to 1
+   * @param currency the currency
+   * @param numerator the numerator of the fractional token amount
+   * @param denominator the denominator of the fractional token amount
+   */;
+  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {
+    return new CurrencyAmount(currency, numerator, denominator);
+  };
+  var _proto = CurrencyAmount.prototype;
+  _proto.add = function add(other) {
+    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;
+    var added = _Fraction.prototype.add.call(this, other);
+    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);
+  };
+  _proto.subtract = function subtract(other) {
+    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;
+    var subtracted = _Fraction.prototype.subtract.call(this, other);
+    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);
+  };
+  _proto.multiply = function multiply(other) {
+    var multiplied = _Fraction.prototype.multiply.call(this, other);
+    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);
+  };
+  _proto.divide = function divide(other) {
+    var divided = _Fraction.prototype.divide.call(this, other);
+    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);
+  };
+  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+    if (significantDigits === void 0) {
+      significantDigits = 6;
+    }
+    if (rounding === void 0) {
+      rounding = Rounding.ROUND_DOWN;
+    }
+    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);
+  };
+  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    if (decimalPlaces === void 0) {
+      decimalPlaces = this.currency.decimals;
+    }
+    if (rounding === void 0) {
+      rounding = Rounding.ROUND_DOWN;
+    }
+    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== "production" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;
+    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);
+  };
+  _proto.toExact = function toExact(format) {
+    if (format === void 0) {
+      format = {
+        groupSeparator: ''
+      };
+    }
+    Big$1.DP = this.currency.decimals;
+    return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);
+  };
+  _createClass(CurrencyAmount, [{
+    key: "wrapped",
+    get: function get() {
+      if (this.currency.isToken) return this;
+      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);
+    }
+  }]);
+  return CurrencyAmount;
+}(Fraction);
+
+var ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));
+/**
+ * Converts a fraction to a percent
+ * @param fraction the fraction to convert
+ */
+function toPercent(fraction) {
+  return new Percent(fraction.numerator, fraction.denominator);
+}
+var Percent = /*#__PURE__*/function (_Fraction) {
+  _inheritsLoose(Percent, _Fraction);
+  function Percent() {
+    var _this;
+    _this = _Fraction.apply(this, arguments) || this;
+    /**
+     * This boolean prevents a fraction from being interpreted as a Percent
+     */
+    _this.isPercent = true;
+    return _this;
+  }
+  var _proto = Percent.prototype;
+  _proto.add = function add(other) {
+    return toPercent(_Fraction.prototype.add.call(this, other));
+  };
+  _proto.subtract = function subtract(other) {
+    return toPercent(_Fraction.prototype.subtract.call(this, other));
+  };
+  _proto.multiply = function multiply(other) {
+    return toPercent(_Fraction.prototype.multiply.call(this, other));
+  };
+  _proto.divide = function divide(other) {
+    return toPercent(_Fraction.prototype.divide.call(this, other));
+  };
+  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+    if (significantDigits === void 0) {
+      significantDigits = 5;
+    }
+    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);
+  };
+  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    if (decimalPlaces === void 0) {
+      decimalPlaces = 2;
+    }
+    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);
+  };
+  return Percent;
+}(Fraction);
+
+var Price = /*#__PURE__*/function (_Fraction) {
+  _inheritsLoose(Price, _Fraction);
+  /**
+   * Construct a price, either with the base and quote currency amount, or the
+   * @param args
+   */
+  function Price() {
+    var _this;
+    var baseCurrency, quoteCurrency, denominator, numerator;
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    if (args.length === 4) {
+      baseCurrency = args[0];
+      quoteCurrency = args[1];
+      denominator = args[2];
+      numerator = args[3];
+    } else {
+      var result = args[0].quoteAmount.divide(args[0].baseAmount);
+      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];
+      baseCurrency = _ref[0];
+      quoteCurrency = _ref[1];
+      denominator = _ref[2];
+      numerator = _ref[3];
+    }
+    _this = _Fraction.call(this, numerator, denominator) || this;
+    _this.baseCurrency = baseCurrency;
+    _this.quoteCurrency = quoteCurrency;
+    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));
+    return _this;
+  }
+  /**
+   * Flip the price, switching the base and quote currency
+   */
+  var _proto = Price.prototype;
+  _proto.invert = function invert() {
+    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);
+  }
+  /**
+   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency
+   * @param other the other price
+   */;
+  _proto.multiply = function multiply(other) {
+    !this.quoteCurrency.equals(other.baseCurrency) ? process.env.NODE_ENV !== "production" ? invariant(false, 'TOKEN') : invariant(false) : void 0;
+    var fraction = _Fraction.prototype.multiply.call(this, other);
+    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);
+  }
+  /**
+   * Return the amount of quote currency corresponding to a given amount of the base currency
+   * @param currencyAmount the amount of base currency to quote against the price
+   */;
+  _proto.quote = function quote(currencyAmount) {
+    !currencyAmount.currency.equals(this.baseCurrency) ? process.env.NODE_ENV !== "production" ? invariant(false, 'TOKEN') : invariant(false) : void 0;
+    var result = _Fraction.prototype.multiply.call(this, currencyAmount);
+    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);
+  }
+  /**
+   * Get the value scaled by decimals for formatting
+   * @private
+   */;
+  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {
+    if (significantDigits === void 0) {
+      significantDigits = 6;
+    }
+    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);
+  };
+  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {
+    if (decimalPlaces === void 0) {
+      decimalPlaces = 4;
+    }
+    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);
+  };
+  _createClass(Price, [{
+    key: "adjustedForDecimals",
+    get: function get() {
+      return _Fraction.prototype.multiply.call(this, this.scalar);
+    }
+  }]);
+  return Price;
+}(Fraction);
+
+/**
+ * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies
+ */
+var BaseCurrency =
+/**
+ * Constructs an instance of the base class `BaseCurrency`.
+ * @param chainId the chain ID on which this currency resides
+ * @param decimals decimals of the currency
+ * @param symbol symbol of the currency
+ * @param name of the currency
+ */
+function BaseCurrency(chainId, decimals, symbol, name) {
+  !Number.isSafeInteger(chainId) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;
+  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ? process.env.NODE_ENV !== "production" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;
+  this.chainId = chainId;
+  this.decimals = decimals;
+  this.symbol = symbol;
+  this.name = name;
+};
+
+/**
+ * Represents the native currency of the chain on which it resides, e.g.
+ */
+var NativeCurrency = /*#__PURE__*/function (_BaseCurrency) {
+  _inheritsLoose(NativeCurrency, _BaseCurrency);
+  function NativeCurrency() {
+    var _this;
+    _this = _BaseCurrency.apply(this, arguments) || this;
+    _this.isNative = true;
+    _this.isToken = false;
+    return _this;
+  }
+  return NativeCurrency;
+}(BaseCurrency);
+
+/**
+ * Validates an address and returns the parsed (checksummed) version of that address
+ * @param address the unchecksummed hex address
+ */
+function validateAndParseAddress(address) {
+  try {
+    return getAddress(address);
+  } catch (error) {
+    throw new Error(address + " is not a valid address.");
+  }
+}
+// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x
+var startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;
+/**
+ * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.
+ * @param address the unchecksummed hex address
+ */
+function checkValidAddress(address) {
+  if (startsWith0xLen42HexRegex.test(address)) {
+    return address;
+  }
+  throw new Error(address + " is not a valid address.");
+}
+
+/**
+ * Represents an ERC20 token with a unique address and some metadata.
+ */
+var Token = /*#__PURE__*/function (_BaseCurrency) {
+  _inheritsLoose(Token, _BaseCurrency);
+  /**
+   *
+   * @param chainId {@link BaseCurrency#chainId}
+   * @param address The contract address on the chain on which this token lives
+   * @param decimals {@link BaseCurrency#decimals}
+   * @param symbol {@link BaseCurrency#symbol}
+   * @param name {@link BaseCurrency#name}
+   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters
+   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points
+   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points
+   */
+  function Token(chainId, address, decimals, symbol, name, bypassChecksum, buyFeeBps, sellFeeBps) {
+    var _this;
+    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;
+    _this.isNative = false;
+    _this.isToken = true;
+    if (bypassChecksum) {
+      _this.address = checkValidAddress(address);
+    } else {
+      _this.address = validateAndParseAddress(address);
+    }
+    if (buyFeeBps) {
+      !buyFeeBps.gte(BigNumber.from(0)) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NON-NEGATIVE FOT FEES') : invariant(false) : void 0;
+    }
+    if (sellFeeBps) {
+      !sellFeeBps.gte(BigNumber.from(0)) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NON-NEGATIVE FOT FEES') : invariant(false) : void 0;
+    }
+    _this.buyFeeBps = buyFeeBps;
+    _this.sellFeeBps = sellFeeBps;
+    return _this;
+  }
+  /**
+   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
+   * @param other other token to compare
+   */
+  var _proto = Token.prototype;
+  _proto.equals = function equals(other) {
+    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase();
+  }
+  /**
+   * Returns true if the address of this token sorts before the address of the other token
+   * @param other other token to compare
+   * @throws if the tokens have the same address
+   * @throws if the tokens are on different chains
+   */;
+  _proto.sortsBefore = function sortsBefore(other) {
+    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== "production" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;
+    !(this.address.toLowerCase() !== other.address.toLowerCase()) ? process.env.NODE_ENV !== "production" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;
+    return this.address.toLowerCase() < other.address.toLowerCase();
+  }
+  /**
+   * Return this token, which does not need to be wrapped
+   */;
+  _createClass(Token, [{
+    key: "wrapped",
+    get: function get() {
+      return this;
+    }
+  }]);
+  return Token;
+}(BaseCurrency);
+
+/**
+ * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped
+ */
+var WETH9 = {
+  1: /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),
+  3: /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),
+  4: /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),
+  5: /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),
+  42: /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),
+  10: /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  69: /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  11155420: /*#__PURE__*/new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  42161: /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),
+  421611: /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),
+  421614: /*#__PURE__*/new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),
+  8453: /*#__PURE__*/new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  56: /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),
+  137: /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),
+  43114: /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),
+  324: /*#__PURE__*/new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),
+  11124: /*#__PURE__*/new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),
+  543210: /*#__PURE__*/new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),
+  60808: /*#__PURE__*/new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether')
+};
+
+/**
+ * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets
+ */
+var Ether = /*#__PURE__*/function (_NativeCurrency) {
+  _inheritsLoose(Ether, _NativeCurrency);
+  function Ether(chainId) {
+    return _NativeCurrency.call(this, chainId, 18, 'ETH', 'Ether') || this;
+  }
+  Ether.onChain = function onChain(chainId) {
+    var _this$_etherCache$cha;
+    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);
+  };
+  var _proto = Ether.prototype;
+  _proto.equals = function equals(other) {
+    return other.isNative && other.chainId === this.chainId;
+  };
+  _createClass(Ether, [{
+    key: "wrapped",
+    get: function get() {
+      var weth9 = WETH9[this.chainId];
+      !!!weth9 ? process.env.NODE_ENV !== "production" ? invariant(false, 'WRAPPED') : invariant(false) : void 0;
+      return weth9;
+    }
+  }]);
+  return Ether;
+}(NativeCurrency);
+Ether._etherCache = {};
+
+/**
+ * Returns the percent difference between the mid price and the execution price, i.e. price impact.
+ * @param midPrice mid price before the trade
+ * @param inputAmount the input amount of the trade
+ * @param outputAmount the output amount of the trade
+ */
+function computePriceImpact(midPrice, inputAmount, outputAmount) {
+  var quotedOutputAmount = midPrice.quote(inputAmount);
+  // calculate price impact := (exactQuote - outputAmount) / exactQuote
+  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);
+  return new Percent(priceImpact.numerator, priceImpact.denominator);
+}
+
+function computeZksyncCreate2Address(sender, bytecodeHash, salt, input) {
+  if (input === void 0) {
+    input = '0x';
+  }
+  var prefix = keccak256(toUtf8Bytes('zksyncCreate2'));
+  var inputHash = keccak256(input);
+  var addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26);
+  return getAddress(addressBytes);
+}
+
+// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to
+// `maxSize` by removing the last item
+function sortedInsert(items, add, maxSize, comparator) {
+  !(maxSize > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0;
+  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize
+  !(items.length <= maxSize) ? process.env.NODE_ENV !== "production" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0;
+  // short circuit first item add
+  if (items.length === 0) {
+    items.push(add);
+    return null;
+  } else {
+    var isFull = items.length === maxSize;
+    // short circuit if full and the additional item does not come before the last item
+    if (isFull && comparator(items[items.length - 1], add) <= 0) {
+      return add;
+    }
+    var lo = 0,
+      hi = items.length;
+    while (lo < hi) {
+      var mid = lo + hi >>> 1;
+      if (comparator(items[mid], add) <= 0) {
+        lo = mid + 1;
+      } else {
+        hi = mid;
+      }
+    }
+    items.splice(lo, 0, add);
+    return isFull ? items.pop() : null;
+  }
+}
+
+var MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);
+var ZERO = /*#__PURE__*/JSBI.BigInt(0);
+var ONE = /*#__PURE__*/JSBI.BigInt(1);
+var TWO = /*#__PURE__*/JSBI.BigInt(2);
+/**
+ * Computes floor(sqrt(value))
+ * @param value the value for which to compute the square root, rounded down
+ */
+function sqrt(value) {
+  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NEGATIVE') : invariant(false) : void 0;
+  // rely on built in sqrt if possible
+  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {
+    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));
+  }
+  var z;
+  var x;
+  z = value;
+  x = JSBI.add(JSBI.divide(value, TWO), ONE);
+  while (JSBI.lessThan(x, z)) {
+    z = x;
+    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);
+  }
+  return z;
+}
+
+export { ARGENT_WALLET_DETECTOR_ADDRESS, CHAIN_TO_ADDRESSES_MAP, ChainId, CurrencyAmount, ENS_REGISTRAR_ADDRESSES, Ether, Fraction, GOVERNANCE_ALPHA_V0_ADDRESSES, GOVERNANCE_ALPHA_V1_ADDRESSES, GOVERNANCE_BRAVO_ADDRESSES, MERKLE_DISTRIBUTOR_ADDRESS, MIXED_ROUTE_QUOTER_V1_ADDRESSES, MULTICALL_ADDRESSES, MaxUint256, NONFUNGIBLE_POSITION_MANAGER_ADDRESSES, NativeCurrency, NativeCurrencyName, Percent, Price, QUOTER_ADDRESSES, Rounding, SOCKS_CONTROLLER_ADDRESSES, SUPPORTED_CHAINS, SWAP_ROUTER_02_ADDRESSES, TICK_LENS_ADDRESSES, TIMELOCK_ADDRESSES, Token, TradeType, UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS, UNI_ADDRESSES, V2_FACTORY_ADDRESS, V2_FACTORY_ADDRESSES, V2_ROUTER_ADDRESS, V2_ROUTER_ADDRESSES, V3_CORE_FACTORY_ADDRESSES, V3_MIGRATOR_ADDRESSES, WETH9, computePriceImpact, computeZksyncCreate2Address, sortedInsert, sqrt, validateAndParseAddress };
+//# sourceMappingURL=sdk-core.esm.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.esm.js.map b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.esm.js.map
new file mode 100644
index 0000000..ce77948
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/sdk-core.esm.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n  ABSTRACT_TESTNET = 11124,\n  ZERO = 543210,\n  BOB = 60808,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n  ChainId.ABSTRACT_TESTNET,\n  ChainId.ZERO,\n  ChainId.BOB,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n  [ChainId.ABSTRACT_TESTNET]: '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07',\n  [ChainId.ZERO]: '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n  [ChainId.ABSTRACT_TESTNET]: '0x07551c0Daf6fCD9bc2A398357E5C92C139724Ef3',\n  [ChainId.ZERO]: '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nconst ABSTRACT_TESTNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',\n  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',\n  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',\n  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',\n  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',\n  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',\n  swapRouter02Address: '0x3914e72A73181a3EdB4dBC445cE2A01d480eacb1',\n}\n\nconst ZERO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',\n  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',\n  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b',\n}\n\nconst BOB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',\n  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',\n  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',\n  // Missing migrator address for BOB, using a place holder for now\n  v3MigratorAddress: '0x0000000000000000000000000000000000000000',\n  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',\n  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',\n  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n  [ChainId.ABSTRACT_TESTNET]: ABSTRACT_TESTNET_ADDRESSES,\n  [ChainId.ZERO]: ZERO_ADDRESSES,\n  [ChainId.BOB]: BOB_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n  11124: new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),\n  543210: new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),\n  60808: new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","ABSTRACT_TESTNET","ZERO","BOB","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","mixedRouteQuoterV2Address","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","ZKSYNC_ADDRESSES","ABSTRACT_TESTNET_ADDRESSES","ZERO_ADDRESSES","BOB_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","_CHAIN_TO_ADDRESSES_M2","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","env","NODE_ENV","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","computeZksyncCreate2Address","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/swapRouter.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/swapRouter.d.ts
deleted file mode 100644
index 87e8796..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/swapRouter.d.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import { Interface } from '@ethersproject/abi';
-import { BigNumberish } from 'ethers';
-import { MethodParameters } from '@uniswap/v3-sdk';
-import { Trade as RouterTrade } from '@uniswap/router-sdk';
-import { Currency, TradeType } from '@uniswap/sdk-core';
-import { Command } from './entities/Command';
-import { NFTTrade, SupportedProtocolsData } from './entities/NFTTrade';
-import { SwapOptions } from './entities/protocols/uniswap';
-export declare type SwapRouterConfig = {
-    sender?: string;
-    deadline?: BigNumberish;
-};
-declare type SupportedNFTTrade = NFTTrade<SupportedProtocolsData>;
-export declare abstract class SwapRouter {
-    static INTERFACE: Interface;
-    static swapCallParameters(trades: Command[] | Command, config?: SwapRouterConfig): MethodParameters;
-    /**
-     * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0
-     * This version does not work correctly for Seaport ERC20->NFT purchases
-     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.
-     * @param trades to produce call parameters for
-     */
-    static swapNFTCallParameters(trades: SupportedNFTTrade[], config?: SwapRouterConfig): MethodParameters;
-    /**
-     * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0
-     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.
-     * @param trades to produce call parameters for
-     * @param options options for the call parameters
-     */
-    static swapERC20CallParameters(trades: RouterTrade<Currency, Currency, TradeType>, options: SwapOptions): MethodParameters;
-    /**
-     * Encodes a planned route into a method name and parameters for the Router contract.
-     * @param planner the planned route
-     * @param nativeCurrencyValue the native currency value of the planned route
-     * @param config the router config
-     */
-    private static encodePlan;
-}
-export {};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/forge/writeInterop.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/forge/writeInterop.d.ts
deleted file mode 100644
index d2fb646..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/forge/writeInterop.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { MethodParameters } from '@uniswap/v3-sdk';
-export declare function registerFixture(key: string, data: MethodParameters): void;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/element.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/orders/element.d.ts
deleted file mode 100644
index 9474ce9..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/element.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import { ElementData, OrderSignature, ERC721SellOrder } from '../../src/entities/protocols/element-market';
-export declare const elementOrderETH: ERC721SellOrder;
-export declare const elementSignatureETH: OrderSignature;
-export declare const elementOrderETH_WithFees: ERC721SellOrder;
-export declare const elementOrderETH_WithFees_Signature: OrderSignature;
-export declare const elementDataETH: ElementData;
-export declare const elementDataETH_WithFees: ElementData;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/looksRareV2.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/orders/looksRareV2.d.ts
deleted file mode 100644
index 79f7b17..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/looksRareV2.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { LRV2APIOrder } from '../../src/entities/protocols/looksRareV2';
-export declare const looksRareV2Orders: LRV2APIOrder[];
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/seaportV1_4.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/orders/seaportV1_4.d.ts
deleted file mode 100644
index 2a9644f..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/seaportV1_4.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import { SeaportData } from '../../src/entities/protocols/seaport';
-export declare const seaportV1_4DataETH: SeaportData;
-export declare const seaportV1_4DataETHRecent: SeaportData;
-export declare const seaportV1_4DataERC20: SeaportData;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/seaportV1_5.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/orders/seaportV1_5.d.ts
deleted file mode 100644
index 5e0cab1..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/seaportV1_5.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import { ConsiderationItem, SeaportData } from '../../src/entities/protocols/seaport';
-import { BigNumber } from 'ethers';
-export declare const seaportV1_5DataETH: SeaportData;
-export declare function calculateSeaportValue(considerations: ConsiderationItem[], token: string): BigNumber;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/x2y2.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/orders/x2y2.d.ts
deleted file mode 100644
index f6091f3..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/orders/x2y2.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-export declare const x2y2Orders: {
-    input: string;
-    order_id: number;
-    token_id: string;
-    price: string;
-}[];
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/addresses.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/utils/addresses.d.ts
deleted file mode 100644
index 519023a..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/addresses.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-export declare const MAINNET_ROUTER_ADDRESS: string;
-export declare const FORGE_ROUTER_ADDRESS = "0xe808c1cfeebb6cb36b537b82fa7c9eef31415a05";
-export declare const FORGE_PERMIT2_ADDRESS = "0x4a873bdd49f7f9cc0a5458416a12973fab208f8d";
-export declare const FORGE_SENDER_ADDRESS = "0xcf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed";
-export declare const TEST_RECIPIENT_ADDRESS = "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
-export declare const TEST_FEE_RECIPIENT_ADDRESS = "0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";
-export declare const PERMIT2_ADDRESS: string;
-export declare const ROUTER_ADDRESS: string;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/hexToDecimalString.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/utils/hexToDecimalString.d.ts
deleted file mode 100644
index 5431afd..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/hexToDecimalString.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { BigNumberish } from 'ethers';
-export declare function hexToDecimalString(hex: BigNumberish): string;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/permit2.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/utils/permit2.d.ts
deleted file mode 100644
index 8f796b4..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/permit2.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import { Wallet } from 'ethers';
-import { PermitSingle } from '@uniswap/permit2-sdk';
-import { Permit2Permit } from '../../src/utils/inputTokens';
-export declare function generatePermitSignature(permit: PermitSingle, signer: Wallet, chainId: number, permitAddress?: string): Promise<string>;
-export declare function generateEip2098PermitSignature(permit: PermitSingle, signer: Wallet, chainId: number, permitAddress?: string): Promise<string>;
-export declare function toInputPermit(signature: string, permit: PermitSingle): Permit2Permit;
-export declare function makePermit(token: string, amount?: string, nonce?: string, routerAddress?: string): PermitSingle;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/uniswapData.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/utils/uniswapData.d.ts
deleted file mode 100644
index 2c0c867..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/uniswapData.d.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-import { MixedRouteTrade, Trade as RouterTrade } from '@uniswap/router-sdk';
-import { Trade as V2Trade, Pair } from '@uniswap/v2-sdk';
-import { Trade as V3Trade, Pool, FeeAmount } from '@uniswap/v3-sdk';
-import { SwapOptions } from '../../src';
-import { TradeType, Ether, Token, Currency } from '@uniswap/sdk-core';
-export declare const ETHER: Ether;
-export declare const WETH: Token;
-export declare const DAI: Token;
-export declare const USDC: Token;
-export declare const FEE_AMOUNT = FeeAmount.MEDIUM;
-declare type UniswapPools = {
-    WETH_USDC_V2: Pair;
-    USDC_DAI_V2: Pair;
-    WETH_USDC_V3: Pool;
-    WETH_USDC_V3_LOW_FEE: Pool;
-    USDC_DAI_V3: Pool;
-};
-export declare function getUniswapPools(forkBlock?: number): Promise<UniswapPools>;
-export declare function getPair(tokenA: Token, tokenB: Token, blockNumber: number): Promise<Pair>;
-export declare function getPool(tokenA: Token, tokenB: Token, feeAmount: FeeAmount, blockNumber: number): Promise<Pool>;
-export declare function swapOptions(options: Partial<SwapOptions>): SwapOptions;
-export declare function buildTrade(trades: (V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType> | MixedRouteTrade<Currency, Currency, TradeType>)[]): RouterTrade<Currency, Currency, TradeType>;
-export {};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
deleted file mode 100644
index 9a7066b..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
+++ /dev/null
@@ -1,10729 +0,0 @@
-'use strict';
-
-Object.defineProperty(exports, '__esModule', { value: true });
-
-function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
-
-var invariant = _interopDefault(require('tiny-invariant'));
-var UniversalRouter_json = require('@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json');
-var abi$7 = require('@ethersproject/abi');
-var ethers = require('ethers');
-var utils = require('ethers/lib/utils');
-var v2Sdk = require('@uniswap/v2-sdk');
-var v3Sdk = require('@uniswap/v3-sdk');
-var routerSdk = require('@uniswap/router-sdk');
-var sdkCore = require('@uniswap/sdk-core');
-require('jsbi');
-require('bignumber.js');
-
-function _toPrimitive(t, r) {
-  if ("object" != typeof t || !t) return t;
-  var e = t[Symbol.toPrimitive];
-  if (void 0 !== e) {
-    var i = e.call(t, r || "default");
-    if ("object" != typeof i) return i;
-    throw new TypeError("@@toPrimitive must return a primitive value.");
-  }
-  return ("string" === r ? String : Number)(t);
-}
-function _toPropertyKey(t) {
-  var i = _toPrimitive(t, "string");
-  return "symbol" == typeof i ? i : String(i);
-}
-function _defineProperties(target, props) {
-  for (var i = 0; i < props.length; i++) {
-    var descriptor = props[i];
-    descriptor.enumerable = descriptor.enumerable || false;
-    descriptor.configurable = true;
-    if ("value" in descriptor) descriptor.writable = true;
-    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
-  }
-}
-function _createClass(Constructor, protoProps, staticProps) {
-  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
-  if (staticProps) _defineProperties(Constructor, staticProps);
-  Object.defineProperty(Constructor, "prototype", {
-    writable: false
-  });
-  return Constructor;
-}
-function _extends() {
-  _extends = Object.assign ? Object.assign.bind() : function (target) {
-    for (var i = 1; i < arguments.length; i++) {
-      var source = arguments[i];
-      for (var key in source) {
-        if (Object.prototype.hasOwnProperty.call(source, key)) {
-          target[key] = source[key];
-        }
-      }
-    }
-    return target;
-  };
-  return _extends.apply(this, arguments);
-}
-function _inheritsLoose(subClass, superClass) {
-  subClass.prototype = Object.create(superClass.prototype);
-  subClass.prototype.constructor = subClass;
-  _setPrototypeOf(subClass, superClass);
-}
-function _setPrototypeOf(o, p) {
-  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
-    o.__proto__ = p;
-    return o;
-  };
-  return _setPrototypeOf(o, p);
-}
-function _unsupportedIterableToArray(o, minLen) {
-  if (!o) return;
-  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
-  var n = Object.prototype.toString.call(o).slice(8, -1);
-  if (n === "Object" && o.constructor) n = o.constructor.name;
-  if (n === "Map" || n === "Set") return Array.from(o);
-  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
-}
-function _arrayLikeToArray(arr, len) {
-  if (len == null || len > arr.length) len = arr.length;
-  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
-  return arr2;
-}
-function _createForOfIteratorHelperLoose(o, allowArrayLike) {
-  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
-  if (it) return (it = it.call(o)).next.bind(it);
-  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
-    if (it) o = it;
-    var i = 0;
-    return function () {
-      if (i >= o.length) return {
-        done: true
-      };
-      return {
-        done: false,
-        value: o[i++]
-      };
-    };
-  }
-  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
-}
-
-(function (RouterTradeType) {
-  RouterTradeType["UniswapTrade"] = "UniswapTrade";
-  RouterTradeType["NFTTrade"] = "NFTTrade";
-  RouterTradeType["UnwrapWETH"] = "UnwrapWETH";
-})(exports.RouterTradeType || (exports.RouterTradeType = {}));
-
-var NFTTrade = function NFTTrade(market, orders) {
-  this.tradeType = exports.RouterTradeType.NFTTrade;
-  !(orders.length > 0) ?  invariant(false, 'no buy Items')  : void 0;
-  this.market = market;
-  this.orders = orders;
-};
-(function (Market) {
-  Market["Foundation"] = "foundation";
-  Market["LooksRareV2"] = "looksrareV2";
-  Market["NFT20"] = "nft20";
-  Market["NFTX"] = "nftx";
-  Market["Seaport"] = "seaport";
-  Market["Sudoswap"] = "Sudoswap";
-  Market["Cryptopunks"] = "cryptopunks";
-  Market["X2Y2"] = "x2y2";
-  Market["Element"] = "element";
-})(exports.Market || (exports.Market = {}));
-(function (TokenType) {
-  TokenType["ERC721"] = "ERC721";
-  TokenType["ERC1155"] = "ERC1155";
-  TokenType["Cryptopunk"] = "Cryptopunk";
-})(exports.TokenType || (exports.TokenType = {}));
-
-var _ABI_DEFINITION;
-(function (CommandType) {
-  CommandType[CommandType["V3_SWAP_EXACT_IN"] = 0] = "V3_SWAP_EXACT_IN";
-  CommandType[CommandType["V3_SWAP_EXACT_OUT"] = 1] = "V3_SWAP_EXACT_OUT";
-  CommandType[CommandType["PERMIT2_TRANSFER_FROM"] = 2] = "PERMIT2_TRANSFER_FROM";
-  CommandType[CommandType["PERMIT2_PERMIT_BATCH"] = 3] = "PERMIT2_PERMIT_BATCH";
-  CommandType[CommandType["SWEEP"] = 4] = "SWEEP";
-  CommandType[CommandType["TRANSFER"] = 5] = "TRANSFER";
-  CommandType[CommandType["PAY_PORTION"] = 6] = "PAY_PORTION";
-  CommandType[CommandType["V2_SWAP_EXACT_IN"] = 8] = "V2_SWAP_EXACT_IN";
-  CommandType[CommandType["V2_SWAP_EXACT_OUT"] = 9] = "V2_SWAP_EXACT_OUT";
-  CommandType[CommandType["PERMIT2_PERMIT"] = 10] = "PERMIT2_PERMIT";
-  CommandType[CommandType["WRAP_ETH"] = 11] = "WRAP_ETH";
-  CommandType[CommandType["UNWRAP_WETH"] = 12] = "UNWRAP_WETH";
-  CommandType[CommandType["PERMIT2_TRANSFER_FROM_BATCH"] = 13] = "PERMIT2_TRANSFER_FROM_BATCH";
-  CommandType[CommandType["BALANCE_CHECK_ERC20"] = 14] = "BALANCE_CHECK_ERC20";
-  // NFT-related command types
-  CommandType[CommandType["SEAPORT_V1_5"] = 16] = "SEAPORT_V1_5";
-  CommandType[CommandType["LOOKS_RARE_V2"] = 17] = "LOOKS_RARE_V2";
-  CommandType[CommandType["NFTX"] = 18] = "NFTX";
-  CommandType[CommandType["CRYPTOPUNKS"] = 19] = "CRYPTOPUNKS";
-  // 0x14
-  CommandType[CommandType["OWNER_CHECK_721"] = 21] = "OWNER_CHECK_721";
-  CommandType[CommandType["OWNER_CHECK_1155"] = 22] = "OWNER_CHECK_1155";
-  CommandType[CommandType["SWEEP_ERC721"] = 23] = "SWEEP_ERC721";
-  CommandType[CommandType["X2Y2_721"] = 24] = "X2Y2_721";
-  CommandType[CommandType["SUDOSWAP"] = 25] = "SUDOSWAP";
-  CommandType[CommandType["NFT20"] = 26] = "NFT20";
-  CommandType[CommandType["X2Y2_1155"] = 27] = "X2Y2_1155";
-  CommandType[CommandType["FOUNDATION"] = 28] = "FOUNDATION";
-  CommandType[CommandType["SWEEP_ERC1155"] = 29] = "SWEEP_ERC1155";
-  CommandType[CommandType["ELEMENT_MARKET"] = 30] = "ELEMENT_MARKET";
-  CommandType[CommandType["SEAPORT_V1_4"] = 32] = "SEAPORT_V1_4";
-  CommandType[CommandType["EXECUTE_SUB_PLAN"] = 33] = "EXECUTE_SUB_PLAN";
-  CommandType[CommandType["APPROVE_ERC20"] = 34] = "APPROVE_ERC20";
-})(exports.CommandType || (exports.CommandType = {}));
-var ALLOW_REVERT_FLAG = 0x80;
-var REVERTIBLE_COMMANDS = /*#__PURE__*/new Set([exports.CommandType.SEAPORT_V1_5, exports.CommandType.SEAPORT_V1_4, exports.CommandType.NFTX, exports.CommandType.LOOKS_RARE_V2, exports.CommandType.X2Y2_721, exports.CommandType.X2Y2_1155, exports.CommandType.FOUNDATION, exports.CommandType.SUDOSWAP, exports.CommandType.NFT20, exports.CommandType.EXECUTE_SUB_PLAN, exports.CommandType.CRYPTOPUNKS, exports.CommandType.ELEMENT_MARKET]);
-var PERMIT_STRUCT = '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)';
-var PERMIT_BATCH_STRUCT = '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)';
-var PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)';
-var PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]';
-var ABI_DEFINITION = (_ABI_DEFINITION = {}, _ABI_DEFINITION[exports.CommandType.EXECUTE_SUB_PLAN] = ['bytes', 'bytes[]'], _ABI_DEFINITION[exports.CommandType.PERMIT2_PERMIT] = [PERMIT_STRUCT, 'bytes'], _ABI_DEFINITION[exports.CommandType.PERMIT2_PERMIT_BATCH] = [PERMIT_BATCH_STRUCT, 'bytes'], _ABI_DEFINITION[exports.CommandType.PERMIT2_TRANSFER_FROM] = ['address', 'address', 'uint160'], _ABI_DEFINITION[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH] = [PERMIT2_TRANSFER_FROM_BATCH_STRUCT], _ABI_DEFINITION[exports.CommandType.V3_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[exports.CommandType.V3_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[exports.CommandType.V2_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[exports.CommandType.V2_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[exports.CommandType.WRAP_ETH] = ['address', 'uint256'], _ABI_DEFINITION[exports.CommandType.UNWRAP_WETH] = ['address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SWEEP] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SWEEP_ERC721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SWEEP_ERC1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[exports.CommandType.TRANSFER] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.PAY_PORTION] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.BALANCE_CHECK_ERC20] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.OWNER_CHECK_721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.OWNER_CHECK_1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[exports.CommandType.APPROVE_ERC20] = ['address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SEAPORT_V1_5] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.SEAPORT_V1_4] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.NFTX] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.LOOKS_RARE_V2] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.X2Y2_721] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.X2Y2_1155] = ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[exports.CommandType.FOUNDATION] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SUDOSWAP] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.NFT20] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.CRYPTOPUNKS] = ['uint256', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.ELEMENT_MARKET] = ['uint256', 'bytes'], _ABI_DEFINITION);
-var RoutePlanner = /*#__PURE__*/function () {
-  function RoutePlanner() {
-    this.commands = '0x';
-    this.inputs = [];
-  }
-  var _proto = RoutePlanner.prototype;
-  _proto.addSubPlan = function addSubPlan(subplan) {
-    this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true);
-  };
-  _proto.addCommand = function addCommand(type, parameters, allowRevert) {
-    if (allowRevert === void 0) {
-      allowRevert = false;
-    }
-    var command = createCommand(type, parameters);
-    this.inputs.push(command.encodedInput);
-    if (allowRevert) {
-      if (!REVERTIBLE_COMMANDS.has(command.type)) {
-        throw new Error("command type: " + command.type + " cannot be allowed to revert");
-      }
-      command.type = command.type | ALLOW_REVERT_FLAG;
-    }
-    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'));
-  };
-  return RoutePlanner;
-}();
-function createCommand(type, parameters) {
-  var encodedInput = utils.defaultAbiCoder.encode(ABI_DEFINITION[type], parameters);
-  return {
-    type: type,
-    encodedInput: encodedInput
-  };
-}
-
-var _CHAIN_CONFIGS;
-var WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000';
-var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
-  creationBlock: 17143817
-}, _CHAIN_CONFIGS[5] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',
-  creationBlock: 8940568
-}, _CHAIN_CONFIGS[11155111] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
-  creationBlock: 3543575
-}, _CHAIN_CONFIGS[137] = {
-  router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
-  weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
-  creationBlock: 52210153
-}, _CHAIN_CONFIGS[80001] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
-  creationBlock: 35176052
-}, _CHAIN_CONFIGS[10] = {
-  router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 114702266
-}, _CHAIN_CONFIGS[420] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 8887728
-}, _CHAIN_CONFIGS[42161] = {
-  router: '0x5E325eDA8064b456f4781070C0738d849c824258',
-  weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
-  creationBlock: 169472836
-}, _CHAIN_CONFIGS[421613] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',
-  creationBlock: 18815277
-}, _CHAIN_CONFIGS[42220] = {
-  router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',
-  weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 21407637
-}, _CHAIN_CONFIGS[44787] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 17566658
-}, _CHAIN_CONFIGS[56] = {
-  router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
-  weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
-  creationBlock: 35160263
-}, _CHAIN_CONFIGS[43114] = {
-  router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
-  weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
-  creationBlock: 40237257
-}, _CHAIN_CONFIGS[84531] = {
-  router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 6915289
-}, _CHAIN_CONFIGS[8453] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 9107268
-}, _CHAIN_CONFIGS[81457] = {
-  router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
-  weth: '0x4300000000000000000000000000000000000004',
-  creationBlock: 1116444
-}, _CHAIN_CONFIGS[7777777] = {
-  router: '0x2986d9721A49838ab4297b695858aF7F17f38014',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 11832155
-}, _CHAIN_CONFIGS[324] = {
-  router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',
-  weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',
-  creationBlock: 12640979
-}, _CHAIN_CONFIGS);
-var UNIVERSAL_ROUTER_ADDRESS = function UNIVERSAL_ROUTER_ADDRESS(chainId) {
-  if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  return CHAIN_CONFIGS[chainId].router;
-};
-var UNIVERSAL_ROUTER_CREATION_BLOCK = function UNIVERSAL_ROUTER_CREATION_BLOCK(chainId) {
-  if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  return CHAIN_CONFIGS[chainId].creationBlock;
-};
-var WETH_ADDRESS = function WETH_ADDRESS(chainId) {
-  if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error("Chain " + chainId + " does not have WETH");
-  return CHAIN_CONFIGS[chainId].weth;
-};
-var PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3';
-var CONTRACT_BALANCE = /*#__PURE__*/ethers.BigNumber.from(2).pow(255);
-var ETH_ADDRESS = '0x0000000000000000000000000000000000000000';
-var E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';
-var ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
-var SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001';
-var ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002';
-var OPENSEA_CONDUIT_SPENDER_ID = 0;
-var SUDOSWAP_SPENDER_ID = 1;
-
-function encodeFeeBips(fee) {
-  return v3Sdk.toHex(fee.multiply(10000).quotient);
-}
-
-var REFUND_ETH_PRICE_IMPACT_THRESHOLD = /*#__PURE__*/new sdkCore.Percent(50, 100);
-// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router
-// also translates trade objects from previous (v2, v3) SDKs
-var UniswapTrade = /*#__PURE__*/function () {
-  function UniswapTrade(trade, options) {
-    this.trade = trade;
-    this.options = options;
-    this.tradeType = exports.RouterTradeType.UniswapTrade;
-    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted');
-    if (this.inputRequiresWrap) this.payerIsUser = false;else if (this.options.useRouterBalance) this.payerIsUser = false;else this.payerIsUser = true;
-  }
-  var _proto = UniswapTrade.prototype;
-  _proto.encode = function encode(planner, _config) {
-    var _this$options$recipie;
-    // If the input currency is the native currency, we need to wrap it with the router as the recipient
-    if (this.inputRequiresWrap) {
-      // TODO: optimize if only one v2 pool we can directly send this to the pool
-      planner.addCommand(exports.CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]);
-    }
-    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender
-    this.options.recipient = (_this$options$recipie = this.options.recipient) != null ? _this$options$recipie : SENDER_AS_RECIPIENT;
-    // flag for whether we want to perform slippage check on aggregate output of multiple routes
-    //   1. when there are >2 exact input trades. this is only a heuristic,
-    //      as it's still more gas-expensive even in this case, but has benefits
-    //      in that the reversion probability is lower
-    var performAggregatedSlippageCheck = this.trade.tradeType === sdkCore.TradeType.EXACT_INPUT && this.trade.routes.length > 2;
-    var outputIsNative = this.trade.outputAmount.currency.isNative;
-    var routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options);
-    for (var _iterator = _createForOfIteratorHelperLoose(this.trade.swaps), _step; !(_step = _iterator()).done;) {
-      var swap = _step.value;
-      switch (swap.route.protocol) {
-        case routerSdk.Protocol.V2:
-          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody);
-          break;
-        case routerSdk.Protocol.V3:
-          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody);
-          break;
-        case routerSdk.Protocol.MIXED:
-          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody);
-          break;
-        default:
-          throw new Error('UNSUPPORTED_TRADE_PROTOCOL');
-      }
-    }
-    var minimumAmountOut = ethers.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());
-    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check
-    if (routerMustCustody) {
-      // If there is a fee, that percentage is sent to the fee recipient
-      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)
-      if (!!this.options.fee) {
-        var feeBips = encodeFeeBips(this.options.fee.fee);
-        planner.addCommand(exports.CommandType.PAY_PORTION, [this.trade.outputAmount.currency.wrapped.address, this.options.fee.recipient, feeBips]);
-        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee
-        // Otherwise we continue as expected with the trade's normal expected output
-        if (this.trade.tradeType === sdkCore.TradeType.EXACT_OUTPUT) {
-          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000));
-        }
-      }
-      // If there is a flat fee, that absolute amount is sent to the fee recipient
-      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)
-      if (!!this.options.flatFee) {
-        var feeAmount = this.options.flatFee.amount;
-        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut');
-        planner.addCommand(exports.CommandType.TRANSFER, [this.trade.outputAmount.currency.wrapped.address, this.options.flatFee.recipient, feeAmount]);
-        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee
-        // Otherwise we continue as expected with the trade's normal expected output
-        if (this.trade.tradeType === sdkCore.TradeType.EXACT_OUTPUT) {
-          minimumAmountOut = minimumAmountOut.sub(feeAmount);
-        }
-      }
-      // The remaining tokens that need to be sent to the user after the fee is taken will be caught
-      // by this if-else clause.
-      if (outputIsNative) {
-        planner.addCommand(exports.CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut]);
-      } else {
-        planner.addCommand(exports.CommandType.SWEEP, [this.trade.outputAmount.currency.wrapped.address, this.options.recipient, minimumAmountOut]);
-      }
-    }
-    if (this.inputRequiresWrap && (this.trade.tradeType === sdkCore.TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {
-      // for exactOutput swaps that take native currency as input
-      // we need to send back the change to the user
-      planner.addCommand(exports.CommandType.UNWRAP_WETH, [this.options.recipient, 0]);
-    }
-    if (this.options.safeMode) planner.addCommand(exports.CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0]);
-  };
-  _createClass(UniswapTrade, [{
-    key: "inputRequiresWrap",
-    get: function get() {
-      return this.trade.inputAmount.currency.isNative;
-    }
-  }]);
-  return UniswapTrade;
-}();
-// encode a uniswap v2 swap
-function addV2Swap(planner, _ref, tradeType, options, payerIsUser, routerMustCustody) {
-  var route = _ref.route,
-    inputAmount = _ref.inputAmount,
-    outputAmount = _ref.outputAmount;
-  var trade = new v2Sdk.Trade(route, tradeType == sdkCore.TradeType.EXACT_INPUT ? inputAmount : outputAmount, tradeType);
-  if (tradeType == sdkCore.TradeType.EXACT_INPUT) {
-    planner.addCommand(exports.CommandType.V2_SWAP_EXACT_IN, [
-    // if native, we have to unwrap so keep in the router for now
-    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
-      return pool.address;
-    }), payerIsUser]);
-  } else if (tradeType == sdkCore.TradeType.EXACT_OUTPUT) {
-    planner.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
-      return pool.address;
-    }), payerIsUser]);
-  }
-}
-// encode a uniswap v3 swap
-function addV3Swap(planner, _ref2, tradeType, options, payerIsUser, routerMustCustody) {
-  var route = _ref2.route,
-    inputAmount = _ref2.inputAmount,
-    outputAmount = _ref2.outputAmount;
-  var trade = v3Sdk.Trade.createUncheckedTrade({
-    route: route,
-    inputAmount: inputAmount,
-    outputAmount: outputAmount,
-    tradeType: tradeType
-  });
-  var path = v3Sdk.encodeRouteToPath(route, trade.tradeType === sdkCore.TradeType.EXACT_OUTPUT);
-  if (tradeType == sdkCore.TradeType.EXACT_INPUT) {
-    planner.addCommand(exports.CommandType.V3_SWAP_EXACT_IN, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), path, payerIsUser]);
-  } else if (tradeType == sdkCore.TradeType.EXACT_OUTPUT) {
-    planner.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), path, payerIsUser]);
-  }
-}
-// encode a mixed route swap, i.e. including both v2 and v3 pools
-function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMustCustody) {
-  var route = swap.route,
-    inputAmount = swap.inputAmount,
-    outputAmount = swap.outputAmount;
-  var tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient;
-  // single hop, so it can be reduced to plain v2 or v3 swap logic
-  if (route.pools.length === 1) {
-    if (route.pools[0] instanceof v3Sdk.Pool) {
-      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody);
-    } else if (route.pools[0] instanceof v2Sdk.Pair) {
-      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody);
-    } else {
-      throw new Error('Invalid route type');
-    }
-  }
-  var trade = routerSdk.MixedRouteTrade.createUncheckedTrade({
-    route: route,
-    inputAmount: inputAmount,
-    outputAmount: outputAmount,
-    tradeType: tradeType
-  });
-  var amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString();
-  var amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString();
-  // logic from
-  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276
-  var sections = routerSdk.partitionMixedRouteByProtocol(route);
-  var isLastSectionInRoute = function isLastSectionInRoute(i) {
-    return i === sections.length - 1;
-  };
-  var outputToken;
-  var inputToken = route.input.wrapped;
-  for (var i = 0; i < sections.length; i++) {
-    var section = sections[i];
-    /// Now, we get output of this section
-    outputToken = routerSdk.getOutputOfPools(section, inputToken);
-    var newRouteOriginal = new routerSdk.MixedRouteSDK([].concat(section), section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1, outputToken);
-    var newRoute = new routerSdk.MixedRoute(newRouteOriginal);
-    /// Previous output is now input
-    inputToken = outputToken;
-    var mixedRouteIsAllV3 = function mixedRouteIsAllV3(route) {
-      return route.pools.every(function (pool) {
-        return pool instanceof v3Sdk.Pool;
-      });
-    };
-    if (mixedRouteIsAllV3(newRoute)) {
-      var path = routerSdk.encodeMixedRouteToPath(newRoute);
-      planner.addCommand(exports.CommandType.V3_SWAP_EXACT_IN, [
-      // if not last section: send tokens directly to the first v2 pair of the next section
-      // note: because of the partitioning function we can be sure that the next section is v2
-      isLastSectionInRoute(i) ? tradeRecipient : sections[i + 1][0].liquidityToken.address, i == 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, path, payerIsUser && i === 0]);
-    } else {
-      planner.addCommand(exports.CommandType.V2_SWAP_EXACT_IN, [isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, i === 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, newRoute.path.map(function (pool) {
-        return pool.address;
-      }), payerIsUser && i === 0]);
-    }
-  }
-}
-// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap
-function riskOfPartialFill(trade) {
-  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD);
-}
-function hasFeeOption(swapOptions) {
-  return !!swapOptions.fee || !!swapOptions.flatFee;
-}
-
-var SIGNATURE_LENGTH = 65;
-var EIP_2098_SIGNATURE_LENGTH = 64;
-function encodePermit(planner, permit2) {
-  var signature = permit2.signature;
-  var length = ethers.ethers.utils.arrayify(permit2.signature).length;
-  // signature data provided for EIP-1271 may have length different from ECDSA signature
-  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {
-    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id
-    signature = ethers.ethers.utils.joinSignature(ethers.ethers.utils.splitSignature(permit2.signature));
-  }
-  planner.addCommand(exports.CommandType.PERMIT2_PERMIT, [permit2, signature]);
-}
-// Handles the encoding of commands needed to gather input tokens for a trade
-// Approval: The router approving another address to take tokens.
-//   note: Only seaport and sudoswap support this action. Approvals are left open.
-// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens
-// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address
-function encodeInputTokenOptions(planner, options) {
-  // first ensure that all tokens provided for encoding are the same
-  if (!!options.approval && !!options.permit2Permit) !(options.approval.token === options.permit2Permit.details.token) ?  invariant(false, "inconsistent token")  : void 0;
-  if (!!options.approval && !!options.permit2TransferFrom) !(options.approval.token === options.permit2TransferFrom.token) ?  invariant(false, "inconsistent token")  : void 0;
-  if (!!options.permit2TransferFrom && !!options.permit2Permit) !(options.permit2TransferFrom.token === options.permit2Permit.details.token) ?  invariant(false, "inconsistent token")  : void 0;
-  // if an options.approval is required, add it
-  if (!!options.approval) {
-    planner.addCommand(exports.CommandType.APPROVE_ERC20, [options.approval.token, mapApprovalProtocol(options.approval.protocol)]);
-  }
-  // if this order has a options.permit2Permit, encode it
-  if (!!options.permit2Permit) {
-    encodePermit(planner, options.permit2Permit);
-  }
-  if (!!options.permit2TransferFrom) {
-    planner.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM, [options.permit2TransferFrom.token, options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT, options.permit2TransferFrom.amount]);
-  }
-}
-function mapApprovalProtocol(protocolAddress) {
-  switch (protocolAddress.toLowerCase()) {
-    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc':
-      // Seaport v1.5
-      return OPENSEA_CONDUIT_SPENDER_ID;
-    case '0x00000000000001ad428e4906ae43d8f9852d0dd6':
-      // Seaport v1.4
-      return OPENSEA_CONDUIT_SPENDER_ID;
-    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329':
-      // Sudoswap
-      return SUDOSWAP_SPENDER_ID;
-    default:
-      throw new Error('unsupported protocol address');
-  }
-}
-
-var SwapRouter = /*#__PURE__*/function () {
-  function SwapRouter() {}
-  SwapRouter.swapCallParameters = function swapCallParameters(trades, config) {
-    if (config === void 0) {
-      config = {};
-    }
-    if (!Array.isArray(trades)) trades = [trades];
-    var nftTrades = trades.filter(function (trade, _, _ref) {
-      return trade.hasOwnProperty('market');
-    });
-    var allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true;
-    var planner = new RoutePlanner();
-    // track value flow to require the right amount of native value
-    var currentNativeValueInRouter = ethers.BigNumber.from(0);
-    var transactionValue = ethers.BigNumber.from(0);
-    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep
-    var nftInputTokens = new Set();
-    for (var _iterator = _createForOfIteratorHelperLoose(trades), _step; !(_step = _iterator()).done;) {
-      var trade = _step.value;
-      /**
-       * is NFTTrade
-       */
-      if (trade.tradeType == exports.RouterTradeType.NFTTrade) {
-        var nftTrade = trade;
-        nftTrade.encode(planner, {
-          allowRevert: allowRevert
-        });
-        var tradePrice = nftTrade.getTotalPrice();
-        if (nftTrade.market == exports.Market.Seaport) {
-          var seaportTrade = nftTrade;
-          var seaportInputTokens = seaportTrade.getInputTokens();
-          seaportInputTokens.forEach(function (inputToken) {
-            nftInputTokens.add(inputToken);
-          });
-        } else {
-          nftInputTokens.add(ETH_ADDRESS);
-        }
-        // send enough native value to contract for NFT purchase
-        if (currentNativeValueInRouter.lt(tradePrice)) {
-          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter));
-          currentNativeValueInRouter = ethers.BigNumber.from(0);
-        } else {
-          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice);
-        }
-        /**
-         * is UniswapTrade
-         */
-      } else if (trade.tradeType == exports.RouterTradeType.UniswapTrade) {
-        var uniswapTrade = trade;
-        var inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative;
-        var outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative;
-        var swapOptions = uniswapTrade.options;
-        !!(inputIsNative && !!swapOptions.inputTokenPermit) ?  invariant(false, 'NATIVE_INPUT_PERMIT')  : void 0;
-        if (!!swapOptions.inputTokenPermit) {
-          encodePermit(planner, swapOptions.inputTokenPermit);
-        }
-        if (inputIsNative) {
-          transactionValue = transactionValue.add(ethers.BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString()));
-        }
-        // track amount of native currency in the router
-        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {
-          currentNativeValueInRouter = currentNativeValueInRouter.add(ethers.BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString()));
-        }
-        uniswapTrade.encode(planner, {
-          allowRevert: false
-        });
-        /**
-         * is UnwrapWETH
-         */
-      } else if (trade.tradeType == exports.RouterTradeType.UnwrapWETH) {
-        var UnwrapWETH = trade;
-        trade.encode(planner, {
-          allowRevert: false
-        });
-        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount);
-        /**
-         * else
-         */
-      } else {
-        throw 'trade must be of instance: UniswapTrade or NFTTrade';
-      }
-    }
-    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades
-    // or NFT trades with potential slippage (i.e. sudo).
-    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient
-    nftInputTokens.forEach(function (inputToken) {
-      planner.addCommand(exports.CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0]);
-    });
-    return SwapRouter.encodePlan(planner, transactionValue, config);
-  }
-  /**
-   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0
-   * This version does not work correctly for Seaport ERC20->NFT purchases
-   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.
-   * @param trades to produce call parameters for
-   */;
-  SwapRouter.swapNFTCallParameters = function swapNFTCallParameters(trades, config) {
-    if (config === void 0) {
-      config = {};
-    }
-    var planner = new RoutePlanner();
-    var totalPrice = ethers.BigNumber.from(0);
-    var allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true;
-    for (var _iterator2 = _createForOfIteratorHelperLoose(trades), _step2; !(_step2 = _iterator2()).done;) {
-      var trade = _step2.value;
-      trade.encode(planner, {
-        allowRevert: allowRevert
-      });
-      totalPrice = totalPrice.add(trade.getTotalPrice());
-    }
-    planner.addCommand(exports.CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0]);
-    return SwapRouter.encodePlan(planner, totalPrice, config);
-  }
-  /**
-   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0
-   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.
-   * @param trades to produce call parameters for
-   * @param options options for the call parameters
-   */;
-  SwapRouter.swapERC20CallParameters = function swapERC20CallParameters(trades, options) {
-    // TODO: use permit if signature included in swapOptions
-    var planner = new RoutePlanner();
-    var trade = new UniswapTrade(trades, options);
-    var inputCurrency = trade.trade.inputAmount.currency;
-    !!(inputCurrency.isNative && !!options.inputTokenPermit) ?  invariant(false, 'NATIVE_INPUT_PERMIT')  : void 0;
-    if (options.inputTokenPermit) {
-      encodePermit(planner, options.inputTokenPermit);
-    }
-    var nativeCurrencyValue = inputCurrency.isNative ? ethers.BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString()) : ethers.BigNumber.from(0);
-    trade.encode(planner, {
-      allowRevert: false
-    });
-    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {
-      deadline: options.deadlineOrPreviousBlockhash ? ethers.BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined
-    });
-  }
-  /**
-   * Encodes a planned route into a method name and parameters for the Router contract.
-   * @param planner the planned route
-   * @param nativeCurrencyValue the native currency value of the planned route
-   * @param config the router config
-   */;
-  SwapRouter.encodePlan = function encodePlan(planner, nativeCurrencyValue, config) {
-    if (config === void 0) {
-      config = {};
-    }
-    var commands = planner.commands,
-      inputs = planner.inputs;
-    var functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])';
-    var parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs];
-    var calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters);
-    return {
-      calldata: calldata,
-      value: nativeCurrencyValue.toHexString()
-    };
-  };
-  return SwapRouter;
-}();
-SwapRouter.INTERFACE = /*#__PURE__*/new abi$7.Interface(UniversalRouter_json.abi);
-
-var CryptopunkTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(CryptopunkTrade, _NFTTrade);
-  function CryptopunkTrade(orders) {
-    return _NFTTrade.call(this, exports.Market.Cryptopunks, orders) || this;
-  }
-  var _proto = CryptopunkTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var item = _step.value;
-      planner.addCommand(exports.CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var item = _step2.value;
-      buyItems.push({
-        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,
-        tokenId: item.tokenId,
-        tokenType: exports.TokenType.Cryptopunk
-      });
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = ethers.BigNumber.from(0);
-    for (var _iterator3 = _createForOfIteratorHelperLoose(this.orders), _step3; !(_step3 = _iterator3()).done;) {
-      var item = _step3.value;
-      total = total.add(item.value);
-    }
-    return total;
-  };
-  return CryptopunkTrade;
-}(NFTTrade);
-CryptopunkTrade.CRYPTOPUNK_ADDRESS = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb';
-
-var abi = [
-	{
-		inputs: [
-			{
-				internalType: "address payable",
-				name: "treasury",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "feth",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "royaltyRegistry",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "duration",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		inputs: [
-		],
-		name: "FoundationTreasuryNode_Address_Is_Not_A_Contract",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "FoundationTreasuryNode_Caller_Not_Admin",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "buyPrice",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketBuyPrice_Cannot_Buy_Unset_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "owner",
-				type: "address"
-			}
-		],
-		name: "NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "owner",
-				type: "address"
-			}
-		],
-		name: "NFTMarketBuyPrice_Only_Owner_Can_Set_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketBuyPrice_Price_Already_Set",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketBuyPrice_Price_Too_High",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			}
-		],
-		name: "NFTMarketBuyPrice_Seller_Mismatch",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketCore_FETH_Address_Is_Not_A_Contract",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketCore_Only_FETH_Can_Transfer_ETH",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketCore_Seller_Not_Found",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketOffer_Cannot_Be_Made_While_In_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "currentOfferAmount",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketOffer_Offer_Below_Min_Amount",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "expiry",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketOffer_Offer_Expired",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "currentOfferFrom",
-				type: "address"
-			}
-		],
-		name: "NFTMarketOffer_Offer_From_Does_Not_Match",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "minOfferAmount",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketOffer_Reason_Required",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Already_Listed",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "minAmount",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "endTime",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "endTime",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "maxDuration",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Exceeds_Max_Duration",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "extensionDuration",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Less_Than_Extension_Duration",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			}
-		],
-		name: "NFTMarketReserveAuction_Not_Matching_Seller",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "owner",
-				type: "address"
-			}
-		],
-		name: "NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Price_Already_Set",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Too_Much_Value_Provided",
-		type: "error"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "buyer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "protocolFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "creatorFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "sellerRev",
-				type: "uint256"
-			}
-		],
-		name: "BuyPriceAccepted",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "BuyPriceCanceled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "BuyPriceInvalidated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			}
-		],
-		name: "BuyPriceSet",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "buyReferrer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "buyReferrerProtocolFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "buyReferrerSellerFee",
-				type: "uint256"
-			}
-		],
-		name: "BuyReferralPaid",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint8",
-				name: "version",
-				type: "uint8"
-			}
-		],
-		name: "Initialized",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "buyer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "protocolFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "creatorFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "sellerRev",
-				type: "uint256"
-			}
-		],
-		name: "OfferAccepted",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "string",
-				name: "reason",
-				type: "string"
-			}
-		],
-		name: "OfferCanceledByAdmin",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "OfferInvalidated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "buyer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "expiration",
-				type: "uint256"
-			}
-		],
-		name: "OfferMade",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "bidder",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "endTime",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionBidPlaced",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionCanceled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "string",
-				name: "reason",
-				type: "string"
-			}
-		],
-		name: "ReserveAuctionCanceledByAdmin",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "duration",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "extensionDuration",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionCreated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "bidder",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "protocolFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "creatorFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "sellerRev",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionFinalized",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionInvalidated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionUpdated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "user",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "WithdrawalToFETH",
-		type: "event"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "offerFrom",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "minAmount",
-				type: "uint256"
-			}
-		],
-		name: "acceptOffer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address[]",
-				name: "nftContracts",
-				type: "address[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "tokenIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "string",
-				name: "reason",
-				type: "string"
-			}
-		],
-		name: "adminCancelOffers",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				internalType: "string",
-				name: "reason",
-				type: "string"
-			}
-		],
-		name: "adminCancelReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "maxPrice",
-				type: "uint256"
-			}
-		],
-		name: "buy",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "maxPrice",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		name: "buyV2",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "cancelBuyPrice",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "cancelReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			}
-		],
-		name: "createReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "finalizeReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getBuyPrice",
-		outputs: [
-			{
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			}
-		],
-		name: "getFeesAndRecipients",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "protocolFee",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "creatorRev",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable[]",
-				name: "creatorRecipients",
-				type: "address[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "creatorShares",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256",
-				name: "sellerRev",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "owner",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "getFethAddress",
-		outputs: [
-			{
-				internalType: "address",
-				name: "fethAddress",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "getFoundationTreasury",
-		outputs: [
-			{
-				internalType: "address payable",
-				name: "treasuryAddress",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getImmutableRoyalties",
-		outputs: [
-			{
-				internalType: "address payable[]",
-				name: "recipients",
-				type: "address[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "splitPerRecipientInBasisPoints",
-				type: "uint256[]"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "getMinBidAmount",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "minimum",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getMinOfferAmount",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "minimum",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "creator",
-				type: "address"
-			}
-		],
-		name: "getMutableRoyalties",
-		outputs: [
-			{
-				internalType: "address payable[]",
-				name: "recipients",
-				type: "address[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "splitPerRecipientInBasisPoints",
-				type: "uint256[]"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getOffer",
-		outputs: [
-			{
-				internalType: "address",
-				name: "buyer",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "expiration",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getOfferReferrer",
-		outputs: [
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "getReserveAuction",
-		outputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "nftContract",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "tokenId",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "seller",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "duration",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "extensionDuration",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "bidder",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "amount",
-						type: "uint256"
-					}
-				],
-				internalType: "struct NFTMarketReserveAuction.ReserveAuction",
-				name: "auction",
-				type: "tuple"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "getReserveAuctionBidReferrer",
-		outputs: [
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getReserveAuctionIdFor",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "getRoyaltyRegistry",
-		outputs: [
-			{
-				internalType: "address",
-				name: "registry",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getTokenCreator",
-		outputs: [
-			{
-				internalType: "address payable",
-				name: "creator",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "initialize",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "makeOffer",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "expiration",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		name: "makeOfferV2",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "expiration",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "placeBid",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		name: "placeBidV2",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			}
-		],
-		name: "setBuyPrice",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			}
-		],
-		name: "updateReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var FoundationTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(FoundationTrade, _NFTTrade);
-  function FoundationTrade(orders) {
-    return _NFTTrade.call(this, exports.Market.Foundation, orders) || this;
-  }
-  var _proto = FoundationTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var item = _step.value;
-      var calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [item.tokenAddress, item.tokenId, item.price, item.referrer]);
-      planner.addCommand(exports.CommandType.FOUNDATION, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var item = _step2.value;
-      buyItems.push({
-        tokenAddress: item.tokenAddress,
-        tokenId: item.tokenId,
-        tokenType: exports.TokenType.ERC721
-      });
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = ethers.BigNumber.from(0);
-    for (var _iterator3 = _createForOfIteratorHelperLoose(this.orders), _step3; !(_step3 = _iterator3()).done;) {
-      var item = _step3.value;
-      total = total.add(item.price);
-    }
-    return total;
-  };
-  return FoundationTrade;
-}(NFTTrade);
-FoundationTrade.INTERFACE = /*#__PURE__*/new abi$7.Interface(abi);
-
-var abi$1 = [
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_owner",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "_protocolFeeRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "_transferManager",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "_weth",
-				type: "address"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		inputs: [
-		],
-		name: "CallerInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "ChainIdInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "CreatorFeeBpTooHigh",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "CurrencyInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "ERC20TransferFromFail",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "LengthsInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "MerkleProofInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "length",
-				type: "uint256"
-			}
-		],
-		name: "MerkleProofTooLarge",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NewGasLimitETHTransferTooLow",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NewProtocolFeeRecipientCannotBeNullAddress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoOngoingTransferInProgress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoSelectorForStrategy",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoncesInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NotAContract",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NotAffiliateController",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NotOwner",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NotV2Strategy",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NullSignerAddress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "OutsideOfTimeRange",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "PercentageTooHigh",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "QuoteTypeInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "ReentrancyFail",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "RenouncementNotInProgress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "SameDomainSeparator",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "SignatureEOAInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "SignatureERC1271Invalid",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "length",
-				type: "uint256"
-			}
-		],
-		name: "SignatureLengthInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "SignatureParameterSInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint8",
-				name: "v",
-				type: "uint8"
-			}
-		],
-		name: "SignatureParameterVInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "StrategyHasNoSelector",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			}
-		],
-		name: "StrategyNotAvailable",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "StrategyNotUsed",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "StrategyProtocolFeeTooHigh",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "TransferAlreadyInProgress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "TransferNotInProgress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "WrongPotentialOwner",
-		type: "error"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "affiliateFee",
-				type: "uint256"
-			}
-		],
-		name: "AffiliatePayment",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-		],
-		name: "CancelOwnershipTransfer",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isAllowed",
-				type: "bool"
-			}
-		],
-		name: "CurrencyStatusUpdated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-		],
-		name: "InitiateOwnershipRenouncement",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "previousOwner",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "potentialOwner",
-				type: "address"
-			}
-		],
-		name: "InitiateOwnershipTransfer",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "affiliateController",
-				type: "address"
-			}
-		],
-		name: "NewAffiliateController",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			}
-		],
-		name: "NewAffiliateProgramStatus",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "rate",
-				type: "uint256"
-			}
-		],
-		name: "NewAffiliateRate",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "user",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "bidNonce",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "askNonce",
-				type: "uint256"
-			}
-		],
-		name: "NewBidAskNonces",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "creatorFeeManager",
-				type: "address"
-			}
-		],
-		name: "NewCreatorFeeManager",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-		],
-		name: "NewDomainSeparator",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "gasLimitETHTransfer",
-				type: "uint256"
-			}
-		],
-		name: "NewGasLimitETHTransfer",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "maxCreatorFeeBp",
-				type: "uint256"
-			}
-		],
-		name: "NewMaxCreatorFeeBp",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "NewOwner",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "protocolFeeRecipient",
-				type: "address"
-			}
-		],
-		name: "NewProtocolFeeRecipient",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "standardProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "minTotalFeeBp",
-				type: "uint16"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "maxProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				indexed: false,
-				internalType: "bytes4",
-				name: "selector",
-				type: "bytes4"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isMakerBid",
-				type: "bool"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "implementation",
-				type: "address"
-			}
-		],
-		name: "NewStrategy",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "user",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "orderNonces",
-				type: "uint256[]"
-			}
-		],
-		name: "OrderNoncesCancelled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "standardProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "minTotalFeeBp",
-				type: "uint16"
-			}
-		],
-		name: "StrategyUpdated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "user",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "subsetNonces",
-				type: "uint256[]"
-			}
-		],
-		name: "SubsetNoncesCancelled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "orderHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "bool",
-						name: "isNonceInvalidated",
-						type: "bool"
-					}
-				],
-				indexed: false,
-				internalType: "struct ILooksRareProtocol.NonceInvalidationParameters",
-				name: "nonceInvalidationParameters",
-				type: "tuple"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "askUser",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "bidUser",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "collection",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "itemIds",
-				type: "uint256[]"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			},
-			{
-				indexed: false,
-				internalType: "address[2]",
-				name: "feeRecipients",
-				type: "address[2]"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[3]",
-				name: "feeAmounts",
-				type: "uint256[3]"
-			}
-		],
-		name: "TakerAsk",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "orderHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "bool",
-						name: "isNonceInvalidated",
-						type: "bool"
-					}
-				],
-				indexed: false,
-				internalType: "struct ILooksRareProtocol.NonceInvalidationParameters",
-				name: "nonceInvalidationParameters",
-				type: "tuple"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "bidUser",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "bidRecipient",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "collection",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "itemIds",
-				type: "uint256[]"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			},
-			{
-				indexed: false,
-				internalType: "address[2]",
-				name: "feeRecipients",
-				type: "address[2]"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[3]",
-				name: "feeAmounts",
-				type: "uint256[3]"
-			}
-		],
-		name: "TakerBid",
-		type: "event"
-	},
-	{
-		inputs: [
-		],
-		name: "MAGIC_VALUE_ORDER_NONCE_EXECUTED",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "WETH",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint16",
-				name: "standardProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "minTotalFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "maxProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "bytes4",
-				name: "selector",
-				type: "bytes4"
-			},
-			{
-				internalType: "bool",
-				name: "isMakerBid",
-				type: "bool"
-			},
-			{
-				internalType: "address",
-				name: "implementation",
-				type: "address"
-			}
-		],
-		name: "addStrategy",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "affiliateController",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "affiliateRates",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256[]",
-				name: "orderNonces",
-				type: "uint256[]"
-			}
-		],
-		name: "cancelOrderNonces",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "cancelOwnershipTransfer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256[]",
-				name: "subsetNonces",
-				type: "uint256[]"
-			}
-		],
-		name: "cancelSubsetNonces",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "chainId",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "confirmOwnershipRenouncement",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "confirmOwnershipTransfer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "creatorFeeManager",
-		outputs: [
-			{
-				internalType: "contract ICreatorFeeManager",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "domainSeparator",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "recipient",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Taker[]",
-				name: "takerBids",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "enum QuoteType",
-						name: "quoteType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "globalNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "subsetNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "strategyId",
-						type: "uint256"
-					},
-					{
-						internalType: "enum CollectionType",
-						name: "collectionType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "collection",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "signer",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256[]",
-						name: "itemIds",
-						type: "uint256[]"
-					},
-					{
-						internalType: "uint256[]",
-						name: "amounts",
-						type: "uint256[]"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Maker[]",
-				name: "makerAsks",
-				type: "tuple[]"
-			},
-			{
-				internalType: "bytes[]",
-				name: "makerSignatures",
-				type: "bytes[]"
-			},
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "root",
-						type: "bytes32"
-					},
-					{
-						components: [
-							{
-								internalType: "bytes32",
-								name: "value",
-								type: "bytes32"
-							},
-							{
-								internalType: "enum OrderStructs.MerkleTreeNodePosition",
-								name: "position",
-								type: "uint8"
-							}
-						],
-						internalType: "struct OrderStructs.MerkleTreeNode[]",
-						name: "proof",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct OrderStructs.MerkleTree[]",
-				name: "merkleTrees",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			},
-			{
-				internalType: "bool",
-				name: "isAtomic",
-				type: "bool"
-			}
-		],
-		name: "executeMultipleTakerBids",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "recipient",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Taker",
-				name: "takerAsk",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum QuoteType",
-						name: "quoteType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "globalNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "subsetNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "strategyId",
-						type: "uint256"
-					},
-					{
-						internalType: "enum CollectionType",
-						name: "collectionType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "collection",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "signer",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256[]",
-						name: "itemIds",
-						type: "uint256[]"
-					},
-					{
-						internalType: "uint256[]",
-						name: "amounts",
-						type: "uint256[]"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Maker",
-				name: "makerBid",
-				type: "tuple"
-			},
-			{
-				internalType: "bytes",
-				name: "makerSignature",
-				type: "bytes"
-			},
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "root",
-						type: "bytes32"
-					},
-					{
-						components: [
-							{
-								internalType: "bytes32",
-								name: "value",
-								type: "bytes32"
-							},
-							{
-								internalType: "enum OrderStructs.MerkleTreeNodePosition",
-								name: "position",
-								type: "uint8"
-							}
-						],
-						internalType: "struct OrderStructs.MerkleTreeNode[]",
-						name: "proof",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct OrderStructs.MerkleTree",
-				name: "merkleTree",
-				type: "tuple"
-			},
-			{
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			}
-		],
-		name: "executeTakerAsk",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "recipient",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Taker",
-				name: "takerBid",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum QuoteType",
-						name: "quoteType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "globalNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "subsetNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "strategyId",
-						type: "uint256"
-					},
-					{
-						internalType: "enum CollectionType",
-						name: "collectionType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "collection",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "signer",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256[]",
-						name: "itemIds",
-						type: "uint256[]"
-					},
-					{
-						internalType: "uint256[]",
-						name: "amounts",
-						type: "uint256[]"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Maker",
-				name: "makerAsk",
-				type: "tuple"
-			},
-			{
-				internalType: "bytes",
-				name: "makerSignature",
-				type: "bytes"
-			},
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "root",
-						type: "bytes32"
-					},
-					{
-						components: [
-							{
-								internalType: "bytes32",
-								name: "value",
-								type: "bytes32"
-							},
-							{
-								internalType: "enum OrderStructs.MerkleTreeNodePosition",
-								name: "position",
-								type: "uint8"
-							}
-						],
-						internalType: "struct OrderStructs.MerkleTreeNode[]",
-						name: "proof",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct OrderStructs.MerkleTree",
-				name: "merkleTree",
-				type: "tuple"
-			},
-			{
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			}
-		],
-		name: "executeTakerBid",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "root",
-				type: "bytes32"
-			},
-			{
-				internalType: "uint256",
-				name: "proofLength",
-				type: "uint256"
-			}
-		],
-		name: "hashBatchOrder",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "batchOrderHash",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "pure",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bool",
-				name: "bid",
-				type: "bool"
-			},
-			{
-				internalType: "bool",
-				name: "ask",
-				type: "bool"
-			}
-		],
-		name: "incrementBidAskNonces",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "initiateOwnershipRenouncement",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newPotentialOwner",
-				type: "address"
-			}
-		],
-		name: "initiateOwnershipTransfer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "isAffiliateProgramActive",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "isCurrencyAllowed",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "maxCreatorFeeBp",
-		outputs: [
-			{
-				internalType: "uint16",
-				name: "",
-				type: "uint16"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "owner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "ownershipStatus",
-		outputs: [
-			{
-				internalType: "enum IOwnableTwoSteps.Status",
-				name: "",
-				type: "uint8"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "potentialOwner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "protocolFeeRecipient",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "recipient",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Taker",
-				name: "takerBid",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum QuoteType",
-						name: "quoteType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "globalNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "subsetNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "strategyId",
-						type: "uint256"
-					},
-					{
-						internalType: "enum CollectionType",
-						name: "collectionType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "collection",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "signer",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256[]",
-						name: "itemIds",
-						type: "uint256[]"
-					},
-					{
-						internalType: "uint256[]",
-						name: "amounts",
-						type: "uint256[]"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Maker",
-				name: "makerAsk",
-				type: "tuple"
-			},
-			{
-				internalType: "address",
-				name: "sender",
-				type: "address"
-			},
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "restrictedExecuteTakerBid",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "protocolFeeAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		name: "strategyInfo",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			},
-			{
-				internalType: "uint16",
-				name: "standardProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "minTotalFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "maxProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "bytes4",
-				name: "selector",
-				type: "bytes4"
-			},
-			{
-				internalType: "bool",
-				name: "isMakerBid",
-				type: "bool"
-			},
-			{
-				internalType: "address",
-				name: "implementation",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "transferManager",
-		outputs: [
-			{
-				internalType: "contract TransferManager",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newAffiliateController",
-				type: "address"
-			}
-		],
-		name: "updateAffiliateController",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			}
-		],
-		name: "updateAffiliateProgramStatus",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "bp",
-				type: "uint256"
-			}
-		],
-		name: "updateAffiliateRate",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newCreatorFeeManager",
-				type: "address"
-			}
-		],
-		name: "updateCreatorFeeManager",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				internalType: "bool",
-				name: "isAllowed",
-				type: "bool"
-			}
-		],
-		name: "updateCurrencyStatus",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "updateDomainSeparator",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "newGasLimitETHTransfer",
-				type: "uint256"
-			}
-		],
-		name: "updateETHGasLimitForTransfer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint16",
-				name: "newMaxCreatorFeeBp",
-				type: "uint16"
-			}
-		],
-		name: "updateMaxCreatorFeeBp",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newProtocolFeeRecipient",
-				type: "address"
-			}
-		],
-		name: "updateProtocolFeeRecipient",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			},
-			{
-				internalType: "uint16",
-				name: "newStandardProtocolFee",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "newMinTotalFee",
-				type: "uint16"
-			}
-		],
-		name: "updateStrategy",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "userBidAskNonces",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "bidNonce",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "askNonce",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		name: "userOrderNonce",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		name: "userSubsetNonce",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	}
-];
-
-var LooksRareV2Trade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(LooksRareV2Trade, _NFTTrade);
-  function LooksRareV2Trade(orders) {
-    return _NFTTrade.call(this, exports.Market.LooksRareV2, orders) || this;
-  }
-  var _proto = LooksRareV2Trade.prototype;
-  _proto.encode = function encode(planner, config) {
-    var _this$refactorAPIData = this.refactorAPIData(this.orders),
-      takerBids = _this$refactorAPIData.takerBids,
-      makerOrders = _this$refactorAPIData.makerOrders,
-      makerSignatures = _this$refactorAPIData.makerSignatures,
-      totalValue = _this$refactorAPIData.totalValue,
-      merkleTrees = _this$refactorAPIData.merkleTrees;
-    var calldata;
-    if (this.orders.length == 1) {
-      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [takerBids[0], makerOrders[0], makerSignatures[0], merkleTrees[0], ZERO_ADDRESS]);
-    } else {
-      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [takerBids, makerOrders, makerSignatures, merkleTrees, ZERO_ADDRESS, false]);
-    }
-    planner.addCommand(exports.CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert);
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var item = _step.value;
-      var tokenAddress = item.apiOrder.collection;
-      var tokenType = item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? exports.TokenType.ERC721 : exports.TokenType.ERC1155;
-      for (var _iterator2 = _createForOfIteratorHelperLoose(item.apiOrder.itemIds), _step2; !(_step2 = _iterator2()).done;) {
-        var tokenId = _step2.value;
-        buyItems.push({
-          tokenAddress: tokenAddress,
-          tokenId: tokenId,
-          tokenType: tokenType
-        });
-      }
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = ethers.BigNumber.from(0);
-    for (var _iterator3 = _createForOfIteratorHelperLoose(this.orders), _step3; !(_step3 = _iterator3()).done;) {
-      var item = _step3.value;
-      total = total.add(item.apiOrder.price);
-    }
-    return total;
-  };
-  _proto.refactorAPIData = function refactorAPIData(orders) {
-    var takerBids = [];
-    var makerOrders = [];
-    var makerSignatures = [];
-    var totalValue = ethers.BigNumber.from(0);
-    var merkleTrees = [];
-    orders.forEach(function (order) {
-      var _order$apiOrder$merkl, _order$apiOrder$merkl2;
-      makerOrders.push(_extends({}, order.apiOrder));
-      makerSignatures.push(order.apiOrder.signature);
-      takerBids.push({
-        recipient: order.taker,
-        additionalParameters: '0x'
-      });
-      totalValue = totalValue.add(ethers.BigNumber.from(order.apiOrder.price));
-      merkleTrees.push({
-        root: (_order$apiOrder$merkl = order.apiOrder.merkleRoot) != null ? _order$apiOrder$merkl : '0x0000000000000000000000000000000000000000000000000000000000000000',
-        proof: (_order$apiOrder$merkl2 = order.apiOrder.merkleProof) != null ? _order$apiOrder$merkl2 : []
-      });
-    });
-    return {
-      takerBids: takerBids,
-      makerOrders: makerOrders,
-      makerSignatures: makerSignatures,
-      totalValue: totalValue,
-      merkleTrees: merkleTrees
-    };
-  };
-  return LooksRareV2Trade;
-}(NFTTrade);
-LooksRareV2Trade.INTERFACE = /*#__PURE__*/new abi$7.Interface(abi$1);
-LooksRareV2Trade.ERC721_ORDER = 0;
-
-var abi$2 = [
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "previousOwner",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "OwnershipTransferred",
-		type: "event"
-	},
-	{
-		inputs: [
-		],
-		name: "ETH",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "NFT20",
-		outputs: [
-			{
-				internalType: "contract INFT20Factory",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "UNIV2",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "UNIV3",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "WETH",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_nft",
-				type: "address"
-			},
-			{
-				internalType: "uint256[]",
-				name: "_toIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "_toAmounts",
-				type: "uint256[]"
-			},
-			{
-				internalType: "address",
-				name: "_receipient",
-				type: "address"
-			},
-			{
-				internalType: "uint24",
-				name: "_fee",
-				type: "uint24"
-			},
-			{
-				internalType: "bool",
-				name: "isV3",
-				type: "bool"
-			}
-		],
-		name: "ethForNft",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_nft",
-				type: "address"
-			},
-			{
-				internalType: "uint256[]",
-				name: "_ids",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "_amounts",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bool",
-				name: "isErc721",
-				type: "bool"
-			},
-			{
-				internalType: "uint24",
-				name: "_fee",
-				type: "uint24"
-			},
-			{
-				internalType: "bool",
-				name: "isV3",
-				type: "bool"
-			}
-		],
-		name: "nftForEth",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "owner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "tokenAddress",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "sendTo",
-				type: "address"
-			}
-		],
-		name: "recoverERC20",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "renounceOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_registry",
-				type: "address"
-			}
-		],
-		name: "setNFT20",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "transferOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "withdrawEth",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var NFT20Trade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(NFT20Trade, _NFTTrade);
-  function NFT20Trade(orders) {
-    return _NFTTrade.call(this, exports.Market.NFT20, orders) || this;
-  }
-  var _proto = NFT20Trade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var order = _step.value;
-      var calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [order.tokenAddress, order.tokenIds, order.tokenAmounts, order.recipient, order.fee, order.isV3]);
-      planner.addCommand(exports.CommandType.NFT20, [order.value, calldata], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var pool = _step2.value;
-      for (var _iterator3 = _createForOfIteratorHelperLoose(pool.tokenIds), _step3; !(_step3 = _iterator3()).done;) {
-        var tokenId = _step3.value;
-        buyItems.push({
-          tokenAddress: pool.tokenAddress,
-          tokenId: tokenId,
-          tokenType: exports.TokenType.ERC721
-        });
-      }
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = ethers.BigNumber.from(0);
-    for (var _iterator4 = _createForOfIteratorHelperLoose(this.orders), _step4; !(_step4 = _iterator4()).done;) {
-      var item = _step4.value;
-      total = total.add(item.value);
-    }
-    return total;
-  };
-  return NFT20Trade;
-}(NFTTrade);
-NFT20Trade.INTERFACE = /*#__PURE__*/new abi$7.Interface(abi$2);
-
-var abi$3 = [
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_nftxFactory",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "_WETH",
-				type: "address"
-			},
-			{
-				internalType: "address payable",
-				name: "_swapTarget",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "_dustThreshold",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "count",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "ethSpent",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "Buy",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "ethAmount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "vTokenAmount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "DustReturned",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "previousOwner",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "OwnershipTransferred",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "count",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "ethReceived",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "Sell",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "count",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "ethSpent",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "Swap",
-		type: "event"
-	},
-	{
-		inputs: [
-		],
-		name: "WETH",
-		outputs: [
-			{
-				internalType: "contract IWETH",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "specificIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "buyAndRedeem",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "idsIn",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "specificIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "buyAndSwap1155",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "idsIn",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "specificIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "buyAndSwap721",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "dustThreshold",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "feeDistributor",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "ids",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "mintAndSell1155",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "ids",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "mintAndSell721",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "nftxFactory",
-		outputs: [
-			{
-				internalType: "contract INFTXVaultFactory",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		name: "nftxVaultAddresses",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256[]",
-				name: "",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "",
-				type: "bytes"
-			}
-		],
-		name: "onERC1155BatchReceived",
-		outputs: [
-			{
-				internalType: "bytes4",
-				name: "",
-				type: "bytes4"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			},
-			{
-				internalType: "bytes",
-				name: "",
-				type: "bytes"
-			}
-		],
-		name: "onERC1155Received",
-		outputs: [
-			{
-				internalType: "bytes4",
-				name: "",
-				type: "bytes4"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			},
-			{
-				internalType: "bytes",
-				name: "",
-				type: "bytes"
-			}
-		],
-		name: "onERC721Received",
-		outputs: [
-			{
-				internalType: "bytes4",
-				name: "",
-				type: "bytes4"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "owner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bool",
-				name: "_paused",
-				type: "bool"
-			}
-		],
-		name: "pause",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "paused",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "renounceOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "token",
-				type: "address"
-			}
-		],
-		name: "rescue",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "_dustThreshold",
-				type: "uint256"
-			}
-		],
-		name: "setDustThreshold",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes4",
-				name: "interfaceId",
-				type: "bytes4"
-			}
-		],
-		name: "supportsInterface",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "transferOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var NFTXTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(NFTXTrade, _NFTTrade);
-  function NFTXTrade(orders) {
-    return _NFTTrade.call(this, exports.Market.NFTX, orders) || this;
-  }
-  var _proto = NFTXTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var order = _step.value;
-      var calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [order.vaultId, order.tokenIds.length, order.tokenIds, order.swapCalldata, order.recipient]);
-      planner.addCommand(exports.CommandType.NFTX, [order.value, calldata], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var order = _step2.value;
-      for (var _iterator3 = _createForOfIteratorHelperLoose(order.tokenIds), _step3; !(_step3 = _iterator3()).done;) {
-        var tokenId = _step3.value;
-        buyItems.push({
-          tokenAddress: order.tokenAddress,
-          tokenId: tokenId,
-          tokenType: exports.TokenType.ERC721
-        });
-      }
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = ethers.BigNumber.from(0);
-    for (var _iterator4 = _createForOfIteratorHelperLoose(this.orders), _step4; !(_step4 = _iterator4()).done;) {
-      var item = _step4.value;
-      total = total.add(item.value);
-    }
-    return total;
-  };
-  return NFTXTrade;
-}(NFTTrade);
-NFTXTrade.INTERFACE = /*#__PURE__*/new abi$7.Interface(abi$3);
-
-var abi$4 = [
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "conduitController",
-				type: "address"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		inputs: [
-		],
-		name: "BadContractSignature",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "BadFraction",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "token",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "BadReturnValueFromERC20OnTransfer",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint8",
-				name: "v",
-				type: "uint8"
-			}
-		],
-		name: "BadSignatureV",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "ConsiderationCriteriaResolverOutOfRange",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "orderIndex",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "considerationIndex",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "shortfallAmount",
-				type: "uint256"
-			}
-		],
-		name: "ConsiderationNotMet",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "CriteriaNotEnabledForItem",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "token",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256[]",
-				name: "identifiers",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			}
-		],
-		name: "ERC1155BatchTransferGenericFailure",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "account",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "EtherTransferGenericFailure",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InexactFraction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InsufficientEtherSupplied",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "Invalid1155BatchTransferEncoding",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidBasicOrderParameterEncoding",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "conduit",
-				type: "address"
-			}
-		],
-		name: "InvalidCallToConduit",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidCanceller",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "conduitKey",
-				type: "bytes32"
-			},
-			{
-				internalType: "address",
-				name: "conduit",
-				type: "address"
-			}
-		],
-		name: "InvalidConduit",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidERC721TransferAmount",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidFulfillmentComponentData",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "value",
-				type: "uint256"
-			}
-		],
-		name: "InvalidMsgValue",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidNativeOfferItem",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidProof",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "InvalidRestrictedOrder",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidSignature",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidSigner",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidTime",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "MismatchedFulfillmentOfferAndConsiderationComponents",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "enum Side",
-				name: "side",
-				type: "uint8"
-			}
-		],
-		name: "MissingFulfillmentComponentOnAggregation",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "MissingItemAmount",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "MissingOriginalConsiderationItems",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "account",
-				type: "address"
-			}
-		],
-		name: "NoContract",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoReentrantCalls",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoSpecifiedOrdersAvailable",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "OfferAndConsiderationRequiredOnFulfillment",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "OfferCriteriaResolverOutOfRange",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "OrderAlreadyFilled",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "OrderCriteriaResolverOutOfRange",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "OrderIsCancelled",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "OrderPartiallyFilled",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "PartialFillsNotEnabledForOrder",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "token",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "identifier",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "TokenTransferGenericFailure",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "UnresolvedConsiderationCriteria",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "UnresolvedOfferCriteria",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "UnusedItemParameters",
-		type: "error"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "newCounter",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			}
-		],
-		name: "CounterIncremented",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "zone",
-				type: "address"
-			}
-		],
-		name: "OrderCancelled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "zone",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "recipient",
-				type: "address"
-			},
-			{
-				components: [
-					{
-						internalType: "enum ItemType",
-						name: "itemType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "token",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "amount",
-						type: "uint256"
-					}
-				],
-				indexed: false,
-				internalType: "struct SpentItem[]",
-				name: "offer",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "enum ItemType",
-						name: "itemType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "token",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "amount",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "recipient",
-						type: "address"
-					}
-				],
-				indexed: false,
-				internalType: "struct ReceivedItem[]",
-				name: "consideration",
-				type: "tuple[]"
-			}
-		],
-		name: "OrderFulfilled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "zone",
-				type: "address"
-			}
-		],
-		name: "OrderValidated",
-		type: "event"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "zone",
-						type: "address"
-					},
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifierOrCriteria",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "startAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endAmount",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OfferItem[]",
-						name: "offer",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifierOrCriteria",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "startAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ConsiderationItem[]",
-						name: "consideration",
-						type: "tuple[]"
-					},
-					{
-						internalType: "enum OrderType",
-						name: "orderType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "zoneHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "counter",
-						type: "uint256"
-					}
-				],
-				internalType: "struct OrderComponents[]",
-				name: "orders",
-				type: "tuple[]"
-			}
-		],
-		name: "cancel",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "cancelled",
-				type: "bool"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "uint120",
-						name: "numerator",
-						type: "uint120"
-					},
-					{
-						internalType: "uint120",
-						name: "denominator",
-						type: "uint120"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					},
-					{
-						internalType: "bytes",
-						name: "extraData",
-						type: "bytes"
-					}
-				],
-				internalType: "struct AdvancedOrder",
-				name: "advancedOrder",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "enum Side",
-						name: "side",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "index",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32[]",
-						name: "criteriaProof",
-						type: "bytes32[]"
-					}
-				],
-				internalType: "struct CriteriaResolver[]",
-				name: "criteriaResolvers",
-				type: "tuple[]"
-			},
-			{
-				internalType: "bytes32",
-				name: "fulfillerConduitKey",
-				type: "bytes32"
-			},
-			{
-				internalType: "address",
-				name: "recipient",
-				type: "address"
-			}
-		],
-		name: "fulfillAdvancedOrder",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "fulfilled",
-				type: "bool"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "uint120",
-						name: "numerator",
-						type: "uint120"
-					},
-					{
-						internalType: "uint120",
-						name: "denominator",
-						type: "uint120"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					},
-					{
-						internalType: "bytes",
-						name: "extraData",
-						type: "bytes"
-					}
-				],
-				internalType: "struct AdvancedOrder[]",
-				name: "advancedOrders",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "enum Side",
-						name: "side",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "index",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32[]",
-						name: "criteriaProof",
-						type: "bytes32[]"
-					}
-				],
-				internalType: "struct CriteriaResolver[]",
-				name: "criteriaResolvers",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIndex",
-						type: "uint256"
-					}
-				],
-				internalType: "struct FulfillmentComponent[][]",
-				name: "offerFulfillments",
-				type: "tuple[][]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIndex",
-						type: "uint256"
-					}
-				],
-				internalType: "struct FulfillmentComponent[][]",
-				name: "considerationFulfillments",
-				type: "tuple[][]"
-			},
-			{
-				internalType: "bytes32",
-				name: "fulfillerConduitKey",
-				type: "bytes32"
-			},
-			{
-				internalType: "address",
-				name: "recipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "maximumFulfilled",
-				type: "uint256"
-			}
-		],
-		name: "fulfillAvailableAdvancedOrders",
-		outputs: [
-			{
-				internalType: "bool[]",
-				name: "availableOrders",
-				type: "bool[]"
-			},
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifier",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ReceivedItem",
-						name: "item",
-						type: "tuple"
-					},
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					}
-				],
-				internalType: "struct Execution[]",
-				name: "executions",
-				type: "tuple[]"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct Order[]",
-				name: "orders",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIndex",
-						type: "uint256"
-					}
-				],
-				internalType: "struct FulfillmentComponent[][]",
-				name: "offerFulfillments",
-				type: "tuple[][]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIndex",
-						type: "uint256"
-					}
-				],
-				internalType: "struct FulfillmentComponent[][]",
-				name: "considerationFulfillments",
-				type: "tuple[][]"
-			},
-			{
-				internalType: "bytes32",
-				name: "fulfillerConduitKey",
-				type: "bytes32"
-			},
-			{
-				internalType: "uint256",
-				name: "maximumFulfilled",
-				type: "uint256"
-			}
-		],
-		name: "fulfillAvailableOrders",
-		outputs: [
-			{
-				internalType: "bool[]",
-				name: "availableOrders",
-				type: "bool[]"
-			},
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifier",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ReceivedItem",
-						name: "item",
-						type: "tuple"
-					},
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					}
-				],
-				internalType: "struct Execution[]",
-				name: "executions",
-				type: "tuple[]"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "considerationToken",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "considerationIdentifier",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "considerationAmount",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "zone",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "offerToken",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "offerIdentifier",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "offerAmount",
-						type: "uint256"
-					},
-					{
-						internalType: "enum BasicOrderType",
-						name: "basicOrderType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "zoneHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "offererConduitKey",
-						type: "bytes32"
-					},
-					{
-						internalType: "bytes32",
-						name: "fulfillerConduitKey",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "totalOriginalAdditionalRecipients",
-						type: "uint256"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct AdditionalRecipient[]",
-						name: "additionalRecipients",
-						type: "tuple[]"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct BasicOrderParameters",
-				name: "parameters",
-				type: "tuple"
-			}
-		],
-		name: "fulfillBasicOrder",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "fulfilled",
-				type: "bool"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct Order",
-				name: "order",
-				type: "tuple"
-			},
-			{
-				internalType: "bytes32",
-				name: "fulfillerConduitKey",
-				type: "bytes32"
-			}
-		],
-		name: "fulfillOrder",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "fulfilled",
-				type: "bool"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			}
-		],
-		name: "getCounter",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "counter",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "zone",
-						type: "address"
-					},
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifierOrCriteria",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "startAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endAmount",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OfferItem[]",
-						name: "offer",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifierOrCriteria",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "startAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ConsiderationItem[]",
-						name: "consideration",
-						type: "tuple[]"
-					},
-					{
-						internalType: "enum OrderType",
-						name: "orderType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "zoneHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "counter",
-						type: "uint256"
-					}
-				],
-				internalType: "struct OrderComponents",
-				name: "order",
-				type: "tuple"
-			}
-		],
-		name: "getOrderHash",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "getOrderStatus",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "isValidated",
-				type: "bool"
-			},
-			{
-				internalType: "bool",
-				name: "isCancelled",
-				type: "bool"
-			},
-			{
-				internalType: "uint256",
-				name: "totalFilled",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "totalSize",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "incrementCounter",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "newCounter",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "information",
-		outputs: [
-			{
-				internalType: "string",
-				name: "version",
-				type: "string"
-			},
-			{
-				internalType: "bytes32",
-				name: "domainSeparator",
-				type: "bytes32"
-			},
-			{
-				internalType: "address",
-				name: "conduitController",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "uint120",
-						name: "numerator",
-						type: "uint120"
-					},
-					{
-						internalType: "uint120",
-						name: "denominator",
-						type: "uint120"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					},
-					{
-						internalType: "bytes",
-						name: "extraData",
-						type: "bytes"
-					}
-				],
-				internalType: "struct AdvancedOrder[]",
-				name: "advancedOrders",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "enum Side",
-						name: "side",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "index",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32[]",
-						name: "criteriaProof",
-						type: "bytes32[]"
-					}
-				],
-				internalType: "struct CriteriaResolver[]",
-				name: "criteriaResolvers",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "orderIndex",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIndex",
-								type: "uint256"
-							}
-						],
-						internalType: "struct FulfillmentComponent[]",
-						name: "offerComponents",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "orderIndex",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIndex",
-								type: "uint256"
-							}
-						],
-						internalType: "struct FulfillmentComponent[]",
-						name: "considerationComponents",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct Fulfillment[]",
-				name: "fulfillments",
-				type: "tuple[]"
-			}
-		],
-		name: "matchAdvancedOrders",
-		outputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifier",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ReceivedItem",
-						name: "item",
-						type: "tuple"
-					},
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					}
-				],
-				internalType: "struct Execution[]",
-				name: "executions",
-				type: "tuple[]"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct Order[]",
-				name: "orders",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "orderIndex",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIndex",
-								type: "uint256"
-							}
-						],
-						internalType: "struct FulfillmentComponent[]",
-						name: "offerComponents",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "orderIndex",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIndex",
-								type: "uint256"
-							}
-						],
-						internalType: "struct FulfillmentComponent[]",
-						name: "considerationComponents",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct Fulfillment[]",
-				name: "fulfillments",
-				type: "tuple[]"
-			}
-		],
-		name: "matchOrders",
-		outputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifier",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ReceivedItem",
-						name: "item",
-						type: "tuple"
-					},
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					}
-				],
-				internalType: "struct Execution[]",
-				name: "executions",
-				type: "tuple[]"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "name",
-		outputs: [
-			{
-				internalType: "string",
-				name: "contractName",
-				type: "string"
-			}
-		],
-		stateMutability: "pure",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct Order[]",
-				name: "orders",
-				type: "tuple[]"
-			}
-		],
-		name: "validate",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "validated",
-				type: "bool"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	}
-];
-
-var SeaportTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(SeaportTrade, _NFTTrade);
-  function SeaportTrade(orders) {
-    return _NFTTrade.call(this, exports.Market.Seaport, orders) || this;
-  }
-  var _proto = SeaportTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var order = _step.value;
-      var advancedOrders = [];
-      var orderFulfillments = order.items.map(function (_, index) {
-        return [{
-          orderIndex: index,
-          itemIndex: 0
-        }];
-      });
-      var considerationFulFillments = this.getConsiderationFulfillments(order.items);
-      for (var _iterator2 = _createForOfIteratorHelperLoose(order.items), _step2; !(_step2 = _iterator2()).done;) {
-        var item = _step2.value;
-        var _this$getAdvancedOrde = this.getAdvancedOrderParams(item),
-          advancedOrder = _this$getAdvancedOrde.advancedOrder;
-        advancedOrders.push(advancedOrder);
-      }
-      var calldata = void 0;
-      if (advancedOrders.length == 1) {
-        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [advancedOrders[0], [], SeaportTrade.OPENSEA_CONDUIT_KEY, order.recipient]);
-      } else {
-        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [advancedOrders, [], orderFulfillments, considerationFulFillments, SeaportTrade.OPENSEA_CONDUIT_KEY, order.recipient, 100]);
-      }
-      if (!!order.inputTokenProcessing) {
-        for (var _iterator3 = _createForOfIteratorHelperLoose(order.inputTokenProcessing), _step3; !(_step3 = _iterator3()).done;) {
-          var inputToken = _step3.value;
-          encodeInputTokenOptions(planner, {
-            approval: inputToken.protocolApproval ? {
-              token: inputToken.token,
-              protocol: order.protocolAddress
-            } : undefined,
-            permit2Permit: inputToken.permit2Permit,
-            permit2TransferFrom: inputToken.permit2TransferFrom ? {
-              token: inputToken.token,
-              amount: this.getTotalOrderPrice(order, inputToken.token).toString()
-            } : undefined
-          });
-        }
-      }
-      planner.addCommand(this.commandMap(order.protocolAddress), [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator4 = _createForOfIteratorHelperLoose(this.orders), _step4; !(_step4 = _iterator4()).done;) {
-      var order = _step4.value;
-      for (var _iterator5 = _createForOfIteratorHelperLoose(order.items), _step5; !(_step5 = _iterator5()).done;) {
-        var item = _step5.value;
-        for (var _iterator6 = _createForOfIteratorHelperLoose(item.parameters.offer), _step6; !(_step6 = _iterator6()).done;) {
-          var offer = _step6.value;
-          buyItems.push({
-            tokenAddress: offer.token,
-            tokenId: offer.identifierOrCriteria,
-            tokenType: exports.TokenType.ERC721
-          });
-        }
-      }
-    }
-    return buyItems;
-  };
-  _proto.getInputTokens = function getInputTokens() {
-    var inputTokens = new Set();
-    for (var _iterator7 = _createForOfIteratorHelperLoose(this.orders), _step7; !(_step7 = _iterator7()).done;) {
-      var order = _step7.value;
-      for (var _iterator8 = _createForOfIteratorHelperLoose(order.items), _step8; !(_step8 = _iterator8()).done;) {
-        var item = _step8.value;
-        for (var _iterator9 = _createForOfIteratorHelperLoose(item.parameters.consideration), _step9; !(_step9 = _iterator9()).done;) {
-          var consideration = _step9.value;
-          var token = consideration.token.toLowerCase();
-          inputTokens.add(token);
-        }
-      }
-    }
-    return inputTokens;
-  };
-  _proto.getTotalOrderPrice = function getTotalOrderPrice(order, token) {
-    if (token === void 0) {
-      token = ETH_ADDRESS;
-    }
-    var totalOrderPrice = ethers.BigNumber.from(0);
-    for (var _iterator10 = _createForOfIteratorHelperLoose(order.items), _step10; !(_step10 = _iterator10()).done;) {
-      var item = _step10.value;
-      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token));
-    }
-    return totalOrderPrice;
-  };
-  _proto.getTotalPrice = function getTotalPrice(token) {
-    if (token === void 0) {
-      token = ETH_ADDRESS;
-    }
-    var totalPrice = ethers.BigNumber.from(0);
-    for (var _iterator11 = _createForOfIteratorHelperLoose(this.orders), _step11; !(_step11 = _iterator11()).done;) {
-      var order = _step11.value;
-      for (var _iterator12 = _createForOfIteratorHelperLoose(order.items), _step12; !(_step12 = _iterator12()).done;) {
-        var item = _step12.value;
-        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token));
-      }
-    }
-    return totalPrice;
-  };
-  _proto.commandMap = function commandMap(protocolAddress) {
-    switch (protocolAddress.toLowerCase()) {
-      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc':
-        // Seaport v1.5
-        return exports.CommandType.SEAPORT_V1_5;
-      case '0x00000000000001ad428e4906ae43d8f9852d0dd6':
-        // Seaport v1.4
-        return exports.CommandType.SEAPORT_V1_4;
-      default:
-        throw new Error('unsupported Seaport address');
-    }
-  };
-  _proto.getConsiderationFulfillments = function getConsiderationFulfillments(protocolDatas) {
-    var considerationFulfillments = [];
-    var considerationRecipients = [];
-    for (var i in protocolDatas) {
-      var protocolData = protocolDatas[i];
-      var _loop = function _loop() {
-        var item = protocolData.parameters.consideration[j];
-        if (considerationRecipients.findIndex(function (x) {
-          return x === item.recipient;
-        }) === -1) {
-          considerationRecipients.push(item.recipient);
-        }
-        var recipientIndex = considerationRecipients.findIndex(function (x) {
-          return x === item.recipient;
-        });
-        if (!considerationFulfillments[recipientIndex]) {
-          considerationFulfillments.push([{
-            orderIndex: i,
-            itemIndex: j
-          }]);
-        } else {
-          considerationFulfillments[recipientIndex].push({
-            orderIndex: i,
-            itemIndex: j
-          });
-        }
-      };
-      for (var j in protocolData.parameters.consideration) {
-        _loop();
-      }
-    }
-    return considerationFulfillments;
-  };
-  _proto.getAdvancedOrderParams = function getAdvancedOrderParams(data) {
-    var advancedOrder = {
-      parameters: data.parameters,
-      numerator: ethers.BigNumber.from('1'),
-      denominator: ethers.BigNumber.from('1'),
-      signature: data.signature,
-      extraData: '0x00'
-    };
-    return {
-      advancedOrder: advancedOrder
-    };
-  };
-  _proto.calculateValue = function calculateValue(considerations, token) {
-    return considerations.reduce(function (amt, consideration) {
-      return consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt;
-    }, ethers.BigNumber.from(0));
-  };
-  return SeaportTrade;
-}(NFTTrade);
-SeaportTrade.INTERFACE = /*#__PURE__*/new abi$7.Interface(abi$4);
-SeaportTrade.OPENSEA_CONDUIT_KEY = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000';
-
-var abi$5 = [
-	{
-		inputs: [
-			{
-				internalType: "contract ILSSVMPairFactoryLike",
-				name: "_factory",
-				type: "address"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		inputs: [
-		],
-		name: "factory",
-		outputs: [
-			{
-				internalType: "contract ILSSVMPairFactoryLike",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "contract ERC20",
-				name: "token",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				internalType: "enum ILSSVMPairFactoryLike.PairVariant",
-				name: "variant",
-				type: "uint8"
-			}
-		],
-		name: "pairTransferERC20From",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "contract IERC721",
-				name: "nft",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "id",
-				type: "uint256"
-			},
-			{
-				internalType: "enum ILSSVMPairFactoryLike.PairVariant",
-				name: "variant",
-				type: "uint8"
-			}
-		],
-		name: "pairTransferNFTFrom",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "numItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapAny",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "maxCost",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapAny[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapERC20ForAnyNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "maxCost",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapERC20ForSpecificNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								components: [
-									{
-										internalType: "contract LSSVMPair",
-										name: "pair",
-										type: "address"
-									},
-									{
-										internalType: "uint256[]",
-										name: "nftIds",
-										type: "uint256[]"
-									}
-								],
-								internalType: "struct LSSVMRouter.PairSwapSpecific",
-								name: "swapInfo",
-								type: "tuple"
-							},
-							{
-								internalType: "uint256",
-								name: "maxCost",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.RobustPairSwapSpecific[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								components: [
-									{
-										internalType: "contract LSSVMPair",
-										name: "pair",
-										type: "address"
-									},
-									{
-										internalType: "uint256[]",
-										name: "nftIds",
-										type: "uint256[]"
-									}
-								],
-								internalType: "struct LSSVMRouter.PairSwapSpecific",
-								name: "swapInfo",
-								type: "tuple"
-							},
-							{
-								internalType: "uint256",
-								name: "minOutput",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.RobustPairSwapSpecificForToken[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						internalType: "uint256",
-						name: "inputAmount",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "tokenRecipient",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "nftRecipient",
-						type: "address"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",
-				name: "params",
-				type: "tuple"
-			}
-		],
-		name: "robustSwapERC20ForSpecificNFTsAndNFTsToToken",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "numItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapAny",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "maxCost",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapAny[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapETHForAnyNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "maxCost",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapETHForSpecificNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								components: [
-									{
-										internalType: "contract LSSVMPair",
-										name: "pair",
-										type: "address"
-									},
-									{
-										internalType: "uint256[]",
-										name: "nftIds",
-										type: "uint256[]"
-									}
-								],
-								internalType: "struct LSSVMRouter.PairSwapSpecific",
-								name: "swapInfo",
-								type: "tuple"
-							},
-							{
-								internalType: "uint256",
-								name: "maxCost",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.RobustPairSwapSpecific[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								components: [
-									{
-										internalType: "contract LSSVMPair",
-										name: "pair",
-										type: "address"
-									},
-									{
-										internalType: "uint256[]",
-										name: "nftIds",
-										type: "uint256[]"
-									}
-								],
-								internalType: "struct LSSVMRouter.PairSwapSpecific",
-								name: "swapInfo",
-								type: "tuple"
-							},
-							{
-								internalType: "uint256",
-								name: "minOutput",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.RobustPairSwapSpecificForToken[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						internalType: "uint256",
-						name: "inputAmount",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "tokenRecipient",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "nftRecipient",
-						type: "address"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",
-				name: "params",
-				type: "tuple"
-			}
-		],
-		name: "robustSwapETHForSpecificNFTsAndNFTsToToken",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "minOutput",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapSpecificForToken[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "tokenRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapNFTsForToken",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "numItems",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapAny[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapERC20ForAnyNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256[]",
-						name: "nftIds",
-						type: "uint256[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapERC20ForSpecificNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "numItems",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapAny[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapETHForAnyNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256[]",
-						name: "nftIds",
-						type: "uint256[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapETHForSpecificNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "numItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapAny[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.NFTsForAnyNFTsTrade",
-				name: "trade",
-				type: "tuple"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForAnyNFTsThroughERC20",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "numItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapAny[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.NFTsForAnyNFTsTrade",
-				name: "trade",
-				type: "tuple"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForAnyNFTsThroughETH",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.NFTsForSpecificNFTsTrade",
-				name: "trade",
-				type: "tuple"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForSpecificNFTsThroughERC20",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.NFTsForSpecificNFTsTrade",
-				name: "trade",
-				type: "tuple"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForSpecificNFTsThroughETH",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256[]",
-						name: "nftIds",
-						type: "uint256[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "tokenRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForToken",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var SudoswapTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(SudoswapTrade, _NFTTrade);
-  function SudoswapTrade(orders) {
-    return _NFTTrade.call(this, exports.Market.Sudoswap, orders) || this;
-  }
-  var _proto = SudoswapTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var order = _step.value;
-      var calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [order.swaps.map(function (swap) {
-        return {
-          swapInfo: swap.swapInfo,
-          maxCost: swap.maxCost
-        };
-      }), order.ethRecipient, order.nftRecipient, order.deadline]);
-      var value = order.swaps.reduce(function (prevVal, swap) {
-        return prevVal.add(swap.maxCost);
-      }, ethers.BigNumber.from(0));
-      planner.addCommand(exports.CommandType.SUDOSWAP, [value, calldata], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var order = _step2.value;
-      for (var _iterator3 = _createForOfIteratorHelperLoose(order.swaps), _step3; !(_step3 = _iterator3()).done;) {
-        var swap = _step3.value;
-        for (var _iterator4 = _createForOfIteratorHelperLoose(swap.swapInfo.nftIds), _step4; !(_step4 = _iterator4()).done;) {
-          var tokenId = _step4.value;
-          buyItems.push({
-            tokenAddress: swap.tokenAddress,
-            tokenId: tokenId,
-            tokenType: exports.TokenType.ERC721
-          });
-        }
-      }
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = ethers.BigNumber.from(0);
-    for (var _iterator5 = _createForOfIteratorHelperLoose(this.orders), _step5; !(_step5 = _iterator5()).done;) {
-      var order = _step5.value;
-      for (var _iterator6 = _createForOfIteratorHelperLoose(order.swaps), _step6; !(_step6 = _iterator6()).done;) {
-        var swap = _step6.value;
-        total = total.add(swap.maxCost);
-      }
-    }
-    return total;
-  };
-  return SudoswapTrade;
-}(NFTTrade);
-SudoswapTrade.INTERFACE = /*#__PURE__*/new abi$7.Interface(abi$5);
-
-var abi$6 = [
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "bytes32",
-				name: "itemHash",
-				type: "bytes32"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "incentive",
-				type: "uint256"
-			}
-		],
-		name: "EvAuctionRefund",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "bytes32",
-				name: "itemHash",
-				type: "bytes32"
-			}
-		],
-		name: "EvCancel",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "delegate",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isRemoval",
-				type: "bool"
-			}
-		],
-		name: "EvDelegate",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "index",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "bytes",
-				name: "error",
-				type: "bytes"
-			}
-		],
-		name: "EvFailure",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "newValue",
-				type: "uint256"
-			}
-		],
-		name: "EvFeeCapUpdate",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "bytes32",
-				name: "itemHash",
-				type: "bytes32"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "maker",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "taker",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "orderSalt",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "settleSalt",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "intent",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "delegateType",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "contract IERC20Upgradeable",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "bytes",
-				name: "dataMask",
-				type: "bytes"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes",
-						name: "data",
-						type: "bytes"
-					}
-				],
-				indexed: false,
-				internalType: "struct Market.OrderItem",
-				name: "item",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum Market.Op",
-						name: "op",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "orderIdx",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIdx",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "itemHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "contract IDelegate",
-						name: "executionDelegate",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "dataReplacement",
-						type: "bytes"
-					},
-					{
-						internalType: "uint256",
-						name: "bidIncentivePct",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "aucMinIncrementPct",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "aucIncDurationSecs",
-						type: "uint256"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "percentage",
-								type: "uint256"
-							},
-							{
-								internalType: "address",
-								name: "to",
-								type: "address"
-							}
-						],
-						internalType: "struct Market.Fee[]",
-						name: "fees",
-						type: "tuple[]"
-					}
-				],
-				indexed: false,
-				internalType: "struct Market.SettleDetail",
-				name: "detail",
-				type: "tuple"
-			}
-		],
-		name: "EvInventory",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bytes32",
-				name: "itemHash",
-				type: "bytes32"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "EvProfit",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "signer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isRemoval",
-				type: "bool"
-			}
-		],
-		name: "EvSigner",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "previousOwner",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "OwnershipTransferred",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "account",
-				type: "address"
-			}
-		],
-		name: "Paused",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "account",
-				type: "address"
-			}
-		],
-		name: "Unpaused",
-		type: "event"
-	},
-	{
-		inputs: [
-		],
-		name: "RATE_BASE",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32[]",
-				name: "itemHashes",
-				type: "bytes32[]"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			},
-			{
-				internalType: "uint8",
-				name: "v",
-				type: "uint8"
-			},
-			{
-				internalType: "bytes32",
-				name: "r",
-				type: "bytes32"
-			},
-			{
-				internalType: "bytes32",
-				name: "s",
-				type: "bytes32"
-			}
-		],
-		name: "cancel",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "delegates",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "feeCapPct",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "feeCapPct_",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "weth_",
-				type: "address"
-			}
-		],
-		name: "initialize",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		name: "inventoryStatus",
-		outputs: [
-			{
-				internalType: "enum Market.InvStatus",
-				name: "",
-				type: "uint8"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		name: "ongoingAuctions",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "netPrice",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "endAt",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "bidder",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "owner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "pause",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "paused",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "renounceOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "address",
-								name: "user",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "network",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "intent",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "delegateType",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "deadline",
-								type: "uint256"
-							},
-							{
-								internalType: "contract IERC20Upgradeable",
-								name: "currency",
-								type: "address"
-							},
-							{
-								internalType: "bytes",
-								name: "dataMask",
-								type: "bytes"
-							},
-							{
-								components: [
-									{
-										internalType: "uint256",
-										name: "price",
-										type: "uint256"
-									},
-									{
-										internalType: "bytes",
-										name: "data",
-										type: "bytes"
-									}
-								],
-								internalType: "struct Market.OrderItem[]",
-								name: "items",
-								type: "tuple[]"
-							},
-							{
-								internalType: "bytes32",
-								name: "r",
-								type: "bytes32"
-							},
-							{
-								internalType: "bytes32",
-								name: "s",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint8",
-								name: "v",
-								type: "uint8"
-							},
-							{
-								internalType: "uint8",
-								name: "signVersion",
-								type: "uint8"
-							}
-						],
-						internalType: "struct Market.Order[]",
-						name: "orders",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "enum Market.Op",
-								name: "op",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "orderIdx",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIdx",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "price",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "itemHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "contract IDelegate",
-								name: "executionDelegate",
-								type: "address"
-							},
-							{
-								internalType: "bytes",
-								name: "dataReplacement",
-								type: "bytes"
-							},
-							{
-								internalType: "uint256",
-								name: "bidIncentivePct",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "aucMinIncrementPct",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "aucIncDurationSecs",
-								type: "uint256"
-							},
-							{
-								components: [
-									{
-										internalType: "uint256",
-										name: "percentage",
-										type: "uint256"
-									},
-									{
-										internalType: "address",
-										name: "to",
-										type: "address"
-									}
-								],
-								internalType: "struct Market.Fee[]",
-								name: "fees",
-								type: "tuple[]"
-							}
-						],
-						internalType: "struct Market.SettleDetail[]",
-						name: "details",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "deadline",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amountToEth",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amountToWeth",
-								type: "uint256"
-							},
-							{
-								internalType: "address",
-								name: "user",
-								type: "address"
-							},
-							{
-								internalType: "bool",
-								name: "canFail",
-								type: "bool"
-							}
-						],
-						internalType: "struct Market.SettleShared",
-						name: "shared",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes32",
-						name: "r",
-						type: "bytes32"
-					},
-					{
-						internalType: "bytes32",
-						name: "s",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint8",
-						name: "v",
-						type: "uint8"
-					}
-				],
-				internalType: "struct Market.RunInput",
-				name: "input",
-				type: "tuple"
-			}
-		],
-		name: "run",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "address",
-						name: "user",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "network",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "intent",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "delegateType",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "deadline",
-						type: "uint256"
-					},
-					{
-						internalType: "contract IERC20Upgradeable",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "dataMask",
-						type: "bytes"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "price",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes",
-								name: "data",
-								type: "bytes"
-							}
-						],
-						internalType: "struct Market.OrderItem[]",
-						name: "items",
-						type: "tuple[]"
-					},
-					{
-						internalType: "bytes32",
-						name: "r",
-						type: "bytes32"
-					},
-					{
-						internalType: "bytes32",
-						name: "s",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint8",
-						name: "v",
-						type: "uint8"
-					},
-					{
-						internalType: "uint8",
-						name: "signVersion",
-						type: "uint8"
-					}
-				],
-				internalType: "struct Market.Order",
-				name: "order",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "deadline",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "amountToEth",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "amountToWeth",
-						type: "uint256"
-					},
-					{
-						internalType: "address",
-						name: "user",
-						type: "address"
-					},
-					{
-						internalType: "bool",
-						name: "canFail",
-						type: "bool"
-					}
-				],
-				internalType: "struct Market.SettleShared",
-				name: "shared",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum Market.Op",
-						name: "op",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "orderIdx",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIdx",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "itemHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "contract IDelegate",
-						name: "executionDelegate",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "dataReplacement",
-						type: "bytes"
-					},
-					{
-						internalType: "uint256",
-						name: "bidIncentivePct",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "aucMinIncrementPct",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "aucIncDurationSecs",
-						type: "uint256"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "percentage",
-								type: "uint256"
-							},
-							{
-								internalType: "address",
-								name: "to",
-								type: "address"
-							}
-						],
-						internalType: "struct Market.Fee[]",
-						name: "fees",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct Market.SettleDetail",
-				name: "detail",
-				type: "tuple"
-			}
-		],
-		name: "run1",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "signers",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "transferOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "unpause",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address[]",
-				name: "toAdd",
-				type: "address[]"
-			},
-			{
-				internalType: "address[]",
-				name: "toRemove",
-				type: "address[]"
-			}
-		],
-		name: "updateDelegates",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "val",
-				type: "uint256"
-			}
-		],
-		name: "updateFeeCap",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address[]",
-				name: "toAdd",
-				type: "address[]"
-			},
-			{
-				internalType: "address[]",
-				name: "toRemove",
-				type: "address[]"
-			}
-		],
-		name: "updateSigners",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "weth",
-		outputs: [
-			{
-				internalType: "contract IWETHUpgradable",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var X2Y2Trade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(X2Y2Trade, _NFTTrade);
-  function X2Y2Trade(orders) {
-    return _NFTTrade.call(this, exports.Market.X2Y2, orders) || this;
-  }
-  var _proto = X2Y2Trade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var item = _step.value;
-      var functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'));
-      var calldata = functionSelector + item.signedInput.slice(2);
-      if (item.tokenType == exports.TokenType.ERC721) {
-        planner.addCommand(exports.CommandType.X2Y2_721, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId], config.allowRevert);
-      } else if (item.tokenType == exports.TokenType.ERC1155) {
-        planner.addCommand(exports.CommandType.X2Y2_1155, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount], config.allowRevert);
-      }
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var item = _step2.value;
-      buyItems.push({
-        tokenAddress: item.tokenAddress,
-        tokenId: item.tokenId,
-        tokenType: item.tokenType
-      });
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = ethers.BigNumber.from(0);
-    for (var _iterator3 = _createForOfIteratorHelperLoose(this.orders), _step3; !(_step3 = _iterator3()).done;) {
-      var item = _step3.value;
-      total = total.add(item.price);
-    }
-    return total;
-  };
-  return X2Y2Trade;
-}(NFTTrade);
-X2Y2Trade.INTERFACE = /*#__PURE__*/new abi$7.Interface(abi$6);
-
-var UnwrapWETH = /*#__PURE__*/function () {
-  function UnwrapWETH(amount, chainId, permit2) {
-    this.tradeType = exports.RouterTradeType.UnwrapWETH;
-    this.wethAddress = WETH_ADDRESS(chainId);
-    this.amount = amount;
-    if (!!permit2) {
-      !(permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase()) ?  invariant(false, "must be permitting WETH address: " + this.wethAddress)  : void 0;
-      !(permit2.details.amount >= amount) ?  invariant(false, "Did not permit enough WETH for unwrapWETH transaction")  : void 0;
-      this.permit2Data = permit2;
-    }
-  }
-  var _proto = UnwrapWETH.prototype;
-  _proto.encode = function encode(planner, _) {
-    encodeInputTokenOptions(planner, {
-      permit2Permit: this.permit2Data,
-      permit2TransferFrom: {
-        token: this.wethAddress,
-        amount: this.amount.toString()
-      }
-    });
-    planner.addCommand(exports.CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount]);
-  };
-  return UnwrapWETH;
-}();
-
-(function (PoolType) {
-  PoolType["V2Pool"] = "v2-pool";
-  PoolType["V3Pool"] = "v3-pool";
-})(exports.PoolType || (exports.PoolType = {}));
-var isNativeCurrency = function isNativeCurrency(address) {
-  return address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase();
-};
-// Helper class to convert routing-specific quote entities to RouterTrade entities
-// the returned RouterTrade can then be used to build the UniswapTrade entity in this package
-var RouterTradeAdapter = /*#__PURE__*/function () {
-  function RouterTradeAdapter() {}
-  // Generate a RouterTrade using fields from a classic quote response
-  RouterTradeAdapter.fromClassicQuote = function fromClassicQuote(quote) {
-    var route = quote.route,
-      tokenIn = quote.tokenIn,
-      tokenOut = quote.tokenOut;
-    if (!route) throw new Error('Expected route to be present');
-    if (!route.length) throw new Error('Expected there to be at least one route');
-    if (route.some(function (r) {
-      return !r.length;
-    })) throw new Error('Expected all routes to have at least one pool');
-    var firstRoute = route[0];
-    var tokenInData = firstRoute[0].tokenIn;
-    var tokenOutData = firstRoute[firstRoute.length - 1].tokenOut;
-    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present');
-    if (tokenInData.chainId !== tokenOutData.chainId) throw new Error('Expected tokenIn and tokenOut to be have same chainId');
-    var parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData);
-    var parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData);
-    var typedRoutes = route.map(function (subRoute) {
-      var rawAmountIn = subRoute[0].amountIn;
-      var rawAmountOut = subRoute[subRoute.length - 1].amountOut;
-      if (!rawAmountIn || !rawAmountOut) {
-        throw new Error('Expected both raw amountIn and raw amountOut to be present');
-      }
-      var inputAmount = sdkCore.CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn);
-      var outputAmount = sdkCore.CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut);
-      var isOnlyV2 = RouterTradeAdapter.isVersionedRoute(exports.PoolType.V2Pool, subRoute);
-      var isOnlyV3 = RouterTradeAdapter.isVersionedRoute(exports.PoolType.V3Pool, subRoute);
-      return {
-        routev3: isOnlyV3 ? new v3Sdk.Route(subRoute.map(RouterTradeAdapter.toPool), parsedCurrencyIn, parsedCurrencyOut) : null,
-        routev2: isOnlyV2 ? new v2Sdk.Route(subRoute.map(RouterTradeAdapter.toPair), parsedCurrencyIn, parsedCurrencyOut) : null,
-        mixedRoute: !isOnlyV3 && !isOnlyV2 ? new routerSdk.MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut) : null,
-        inputAmount: inputAmount,
-        outputAmount: outputAmount
-      };
-    });
-    return new routerSdk.Trade({
-      v2Routes: typedRoutes.filter(function (route) {
-        return route.routev2;
-      }).map(function (route) {
-        return {
-          routev2: route.routev2,
-          inputAmount: route.inputAmount,
-          outputAmount: route.outputAmount
-        };
-      }),
-      v3Routes: typedRoutes.filter(function (route) {
-        return route.routev3;
-      }).map(function (route) {
-        return {
-          routev3: route.routev3,
-          inputAmount: route.inputAmount,
-          outputAmount: route.outputAmount
-        };
-      }),
-      mixedRoutes: typedRoutes.filter(function (route) {
-        return route.mixedRoute;
-      }).map(function (route) {
-        return {
-          mixedRoute: route.mixedRoute,
-          inputAmount: route.inputAmount,
-          outputAmount: route.outputAmount
-        };
-      }),
-      tradeType: quote.tradeType
-    });
-  };
-  RouterTradeAdapter.toCurrency = function toCurrency(isNative, token) {
-    if (isNative) {
-      return sdkCore.Ether.onChain(token.chainId);
-    }
-    return this.toToken(token);
-  };
-  RouterTradeAdapter.toToken = function toToken(token) {
-    var chainId = token.chainId,
-      address = token.address,
-      decimals = token.decimals,
-      symbol = token.symbol,
-      buyFeeBps = token.buyFeeBps,
-      sellFeeBps = token.sellFeeBps;
-    return new sdkCore.Token(chainId, address, parseInt(decimals.toString()), symbol, /* name */undefined, false, buyFeeBps ? ethers.BigNumber.from(buyFeeBps) : undefined, sellFeeBps ? ethers.BigNumber.from(sellFeeBps) : undefined);
-  };
-  RouterTradeAdapter.toPool = function toPool(_ref) {
-    var fee = _ref.fee,
-      sqrtRatioX96 = _ref.sqrtRatioX96,
-      liquidity = _ref.liquidity,
-      tickCurrent = _ref.tickCurrent,
-      tokenIn = _ref.tokenIn,
-      tokenOut = _ref.tokenOut;
-    return new v3Sdk.Pool(RouterTradeAdapter.toToken(tokenIn), RouterTradeAdapter.toToken(tokenOut), parseInt(fee), sqrtRatioX96, liquidity, parseInt(tickCurrent));
-  };
-  RouterTradeAdapter.isVersionedRoute = function isVersionedRoute(type, route) {
-    return route.every(function (pool) {
-      return pool.type === type;
-    });
-  };
-  return RouterTradeAdapter;
-}();
-RouterTradeAdapter.toPoolOrPair = function (pool) {
-  return pool.type === exports.PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool);
-};
-RouterTradeAdapter.toPair = function (_ref2) {
-  var reserve0 = _ref2.reserve0,
-    reserve1 = _ref2.reserve1;
-  return new v2Sdk.Pair(sdkCore.CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient), sdkCore.CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient));
-};
-
-exports.CryptopunkTrade = CryptopunkTrade;
-exports.FoundationTrade = FoundationTrade;
-exports.LooksRareV2Trade = LooksRareV2Trade;
-exports.NFT20Trade = NFT20Trade;
-exports.NFTTrade = NFTTrade;
-exports.NFTXTrade = NFTXTrade;
-exports.PERMIT2_ADDRESS = PERMIT2_ADDRESS;
-exports.ROUTER_AS_RECIPIENT = ROUTER_AS_RECIPIENT;
-exports.RoutePlanner = RoutePlanner;
-exports.RouterTradeAdapter = RouterTradeAdapter;
-exports.SeaportTrade = SeaportTrade;
-exports.SudoswapTrade = SudoswapTrade;
-exports.SwapRouter = SwapRouter;
-exports.UNIVERSAL_ROUTER_ADDRESS = UNIVERSAL_ROUTER_ADDRESS;
-exports.UNIVERSAL_ROUTER_CREATION_BLOCK = UNIVERSAL_ROUTER_CREATION_BLOCK;
-exports.UniswapTrade = UniswapTrade;
-exports.UnwrapWETH = UnwrapWETH;
-exports.WETH_ADDRESS = WETH_ADDRESS;
-exports.X2Y2Trade = X2Y2Trade;
-exports.isNativeCurrency = isNativeCurrency;
-//# sourceMappingURL=universal-router-sdk.cjs.development.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
deleted file mode 100644
index 442e461..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n  [7777777]: {\n    router: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 11832155,\n  },\n  [324]: {\n    router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    creationBlock: 12640979,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","process","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","_createClass","key","get","inputAmount","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","_iterator2","_step2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","_inheritsLoose","call","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","_iterator3","_step3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_iterator4","_step4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_iterator5","_step5","_iterator6","offer","_step6","identifierOrCriteria","inputTokens","_iterator7","_step7","_iterator8","_step8","_iterator9","consideration","_step9","totalOrderPrice","_iterator10","_step10","calculateValue","_iterator11","_step11","_iterator12","_step12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
deleted file mode 100644
index 5b4e1e5..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t,n=(e=require("tiny-invariant"))&&"object"==typeof e&&"default"in e?e.default:e,a=require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json"),r=require("@ethersproject/abi"),i=require("ethers"),p=require("ethers/lib/utils"),s=require("@uniswap/v2-sdk"),y=require("@uniswap/v3-sdk"),u=require("@uniswap/router-sdk"),o=require("@uniswap/sdk-core");function d(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,"string");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}function m(){return(m=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function l(e,t){var n,a;e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n=e,a=t,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(n,a)}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function c(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return T(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0;return function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}require("jsbi"),require("bignumber.js"),(t=exports.RouterTradeType||(exports.RouterTradeType={})).UniswapTrade="UniswapTrade",t.NFTTrade="NFTTrade",t.UnwrapWETH="UnwrapWETH";var f,b,v,C,A=function(e,t){this.tradeType=exports.RouterTradeType.NFTTrade,t.length>0||n(!1),this.market=e,this.orders=t};(f=exports.Market||(exports.Market={})).Foundation="foundation",f.LooksRareV2="looksrareV2",f.NFT20="nft20",f.NFTX="nftx",f.Seaport="seaport",f.Sudoswap="Sudoswap",f.Cryptopunks="cryptopunks",f.X2Y2="x2y2",f.Element="element",(b=exports.TokenType||(exports.TokenType={})).ERC721="ERC721",b.ERC1155="ERC1155",b.Cryptopunk="Cryptopunk",(C=exports.CommandType||(exports.CommandType={}))[C.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",C[C.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",C[C.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",C[C.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",C[C.SWEEP=4]="SWEEP",C[C.TRANSFER=5]="TRANSFER",C[C.PAY_PORTION=6]="PAY_PORTION",C[C.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",C[C.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",C[C.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",C[C.WRAP_ETH=11]="WRAP_ETH",C[C.UNWRAP_WETH=12]="UNWRAP_WETH",C[C.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",C[C.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",C[C.SEAPORT_V1_5=16]="SEAPORT_V1_5",C[C.LOOKS_RARE_V2=17]="LOOKS_RARE_V2",C[C.NFTX=18]="NFTX",C[C.CRYPTOPUNKS=19]="CRYPTOPUNKS",C[C.OWNER_CHECK_721=21]="OWNER_CHECK_721",C[C.OWNER_CHECK_1155=22]="OWNER_CHECK_1155",C[C.SWEEP_ERC721=23]="SWEEP_ERC721",C[C.X2Y2_721=24]="X2Y2_721",C[C.SUDOSWAP=25]="SUDOSWAP",C[C.NFT20=26]="NFT20",C[C.X2Y2_1155=27]="X2Y2_1155",C[C.FOUNDATION=28]="FOUNDATION",C[C.SWEEP_ERC1155=29]="SWEEP_ERC1155",C[C.ELEMENT_MARKET=30]="ELEMENT_MARKET",C[C.SEAPORT_V1_4=32]="SEAPORT_V1_4",C[C.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",C[C.APPROVE_ERC20=34]="APPROVE_ERC20";var x,R=new Set([exports.CommandType.SEAPORT_V1_5,exports.CommandType.SEAPORT_V1_4,exports.CommandType.NFTX,exports.CommandType.LOOKS_RARE_V2,exports.CommandType.X2Y2_721,exports.CommandType.X2Y2_1155,exports.CommandType.FOUNDATION,exports.CommandType.SUDOSWAP,exports.CommandType.NFT20,exports.CommandType.EXECUTE_SUB_PLAN,exports.CommandType.CRYPTOPUNKS,exports.CommandType.ELEMENT_MARKET]),I=((v={})[exports.CommandType.EXECUTE_SUB_PLAN]=["bytes","bytes[]"],v[exports.CommandType.PERMIT2_PERMIT]=["((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)","bytes"],v[exports.CommandType.PERMIT2_PERMIT_BATCH]=["((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)","bytes"],v[exports.CommandType.PERMIT2_TRANSFER_FROM]=["address","address","uint160"],v[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH]=["(address from,address to,uint160 amount,address token)[]"],v[exports.CommandType.V3_SWAP_EXACT_IN]=["address","uint256","uint256","bytes","bool"],v[exports.CommandType.V3_SWAP_EXACT_OUT]=["address","uint256","uint256","bytes","bool"],v[exports.CommandType.V2_SWAP_EXACT_IN]=["address","uint256","uint256","address[]","bool"],v[exports.CommandType.V2_SWAP_EXACT_OUT]=["address","uint256","uint256","address[]","bool"],v[exports.CommandType.WRAP_ETH]=["address","uint256"],v[exports.CommandType.UNWRAP_WETH]=["address","uint256"],v[exports.CommandType.SWEEP]=["address","address","uint256"],v[exports.CommandType.SWEEP_ERC721]=["address","address","uint256"],v[exports.CommandType.SWEEP_ERC1155]=["address","address","uint256","uint256"],v[exports.CommandType.TRANSFER]=["address","address","uint256"],v[exports.CommandType.PAY_PORTION]=["address","address","uint256"],v[exports.CommandType.BALANCE_CHECK_ERC20]=["address","address","uint256"],v[exports.CommandType.OWNER_CHECK_721]=["address","address","uint256"],v[exports.CommandType.OWNER_CHECK_1155]=["address","address","uint256","uint256"],v[exports.CommandType.APPROVE_ERC20]=["address","uint256"],v[exports.CommandType.SEAPORT_V1_5]=["uint256","bytes"],v[exports.CommandType.SEAPORT_V1_4]=["uint256","bytes"],v[exports.CommandType.NFTX]=["uint256","bytes"],v[exports.CommandType.LOOKS_RARE_V2]=["uint256","bytes"],v[exports.CommandType.X2Y2_721]=["uint256","bytes","address","address","uint256"],v[exports.CommandType.X2Y2_1155]=["uint256","bytes","address","address","uint256","uint256"],v[exports.CommandType.FOUNDATION]=["uint256","bytes","address","address","uint256"],v[exports.CommandType.SUDOSWAP]=["uint256","bytes"],v[exports.CommandType.NFT20]=["uint256","bytes"],v[exports.CommandType.CRYPTOPUNKS]=["uint256","address","uint256"],v[exports.CommandType.ELEMENT_MARKET]=["uint256","bytes"],v),S=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0)},t.addCommand=function(e,t,n){void 0===n&&(n=!1);var a=function(e,t){return{type:e,encodedInput:p.defaultAbiCoder.encode(I[e],t)}}(e,t);if(this.inputs.push(a.encodedInput),n){if(!R.has(a.type))throw new Error("command type: "+a.type+" cannot be allowed to revert");a.type=128|a.type}this.commands=this.commands.concat(a.type.toString(16).padStart(2,"0"))},e}(),M=((x={})[1]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",creationBlock:17143817},x[5]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",creationBlock:8940568},x[11155111]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",creationBlock:3543575},x[137]={router:"0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2",weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",creationBlock:52210153},x[80001]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",creationBlock:35176052},x[10]={router:"0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8",weth:"0x4200000000000000000000000000000000000006",creationBlock:114702266},x[420]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:8887728},x[42161]={router:"0x5E325eDA8064b456f4781070C0738d849c824258",weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",creationBlock:169472836},x[421613]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",creationBlock:18815277},x[42220]={router:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",weth:"0x0000000000000000000000000000000000000000",creationBlock:21407637},x[44787]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x0000000000000000000000000000000000000000",creationBlock:17566658},x[56]={router:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",creationBlock:35160263},x[43114]={router:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",creationBlock:40237257},x[84531]={router:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",weth:"0x4200000000000000000000000000000000000006",creationBlock:6915289},x[8453]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:9107268},x[81457]={router:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",weth:"0x4300000000000000000000000000000000000004",creationBlock:1116444},x[7777777]={router:"0x2986d9721A49838ab4297b695858aF7F17f38014",weth:"0x4200000000000000000000000000000000000006",creationBlock:11832155},x[324]={router:"0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06",weth:"0x5aea5775959fbc2557cc8789bc1bf90a239d9a91",creationBlock:12640979},x),_=function(e){if(!(e in M))throw new Error("Universal Router not deployed on chain "+e);if("0x0000000000000000000000000000000000000000"==M[e].weth)throw new Error("Chain "+e+" does not have WETH");return M[e].weth},k=i.BigNumber.from(2).pow(255),w="0x0000000000000000000000000000000000000000",P="0x0000000000000000000000000000000000000000",E="0x0000000000000000000000000000000000000001",h="0x0000000000000000000000000000000000000002",O=new o.Percent(50,100),F=function(){function e(e,t){if(this.trade=e,this.options=t,this.tradeType=exports.RouterTradeType.UniswapTrade,t.fee&&t.flatFee)throw new Error("Only one fee option permitted");this.payerIsUser=!this.inputRequiresWrap&&!this.options.useRouterBalance}var t,n;return e.prototype.encode=function(e,t){var n;this.inputRequiresWrap&&e.addCommand(exports.CommandType.WRAP_ETH,[h,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),this.options.recipient=null!=(n=this.options.recipient)?n:E;for(var a,r,p=this.trade.outputAmount.currency.isNative,s=this.trade.tradeType===o.TradeType.EXACT_INPUT&&this.trade.routes.length>2||p||!!(a=this.options).fee||!!a.flatFee,d=c(this.trade.swaps);!(r=d()).done;){var m=r.value;switch(m.route.protocol){case u.Protocol.V2:N(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.V3:g(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.MIXED:B(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}var l=i.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());if(s){if(this.options.fee){var T=y.toHex(this.options.fee.fee.multiply(1e4).quotient);e.addCommand(exports.CommandType.PAY_PORTION,[this.trade.outputAmount.currency.wrapped.address,this.options.fee.recipient,T]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(l=l.sub(l.mul(T).div(1e4)))}if(this.options.flatFee){var f=this.options.flatFee.amount;if(l.lt(f))throw new Error("Flat fee amount greater than minimumAmountOut");e.addCommand(exports.CommandType.TRANSFER,[this.trade.outputAmount.currency.wrapped.address,this.options.flatFee.recipient,f]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(l=l.sub(f))}p?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,l]):e.addCommand(exports.CommandType.SWEEP,[this.trade.outputAmount.currency.wrapped.address,this.options.recipient,l])}this.inputRequiresWrap&&(this.trade.tradeType===o.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(O))&&e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,0]),this.options.safeMode&&e.addCommand(exports.CommandType.SWEEP,[w,this.options.recipient,0])},t=e,(n=[{key:"inputRequiresWrap",get:function(){return this.trade.inputAmount.currency.isNative}}])&&function(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,d(a.key),a)}}(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function N(e,t,n,a,r,i){var p=t.route,y=new s.Trade(p,n==o.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,n);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[i?h:a.recipient,y.maximumAmountIn(a.slippageTolerance).quotient.toString(),y.minimumAmountOut(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),r]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT,[i?h:a.recipient,y.minimumAmountOut(a.slippageTolerance).quotient.toString(),y.maximumAmountIn(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),r])}function g(e,t,n,a,r,i){var p=t.route,s=y.Trade.createUncheckedTrade({route:p,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:n}),u=y.encodeRouteToPath(p,s.tradeType===o.TradeType.EXACT_OUTPUT);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[i?h:a.recipient,s.maximumAmountIn(a.slippageTolerance).quotient.toString(),s.minimumAmountOut(a.slippageTolerance).quotient.toString(),u,r]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT,[i?h:a.recipient,s.minimumAmountOut(a.slippageTolerance).quotient.toString(),s.maximumAmountIn(a.slippageTolerance).quotient.toString(),u,r])}function B(e,t,n,a,r,i){var p=t.route,o=t.inputAmount,d=t.outputAmount,m=i?h:a.recipient;if(1===p.pools.length){if(p.pools[0]instanceof y.Pool)return g(e,t,n,a,r,i);if(p.pools[0]instanceof s.Pair)return N(e,t,n,a,r,i);throw new Error("Invalid route type")}for(var l,T=u.MixedRouteTrade.createUncheckedTrade({route:p,inputAmount:o,outputAmount:d,tradeType:n}),c=T.maximumAmountIn(a.slippageTolerance,o).quotient.toString(),f=T.minimumAmountOut(a.slippageTolerance,d).quotient.toString(),b=u.partitionMixedRouteByProtocol(p),v=function(e){return e===b.length-1},C=p.input.wrapped,A=0;A<b.length;A++){var x=b[A];l=u.getOutputOfPools(x,C);var R=new u.MixedRouteSDK([].concat(x),x[0].token0.equals(C)?x[0].token0:x[0].token1,l),I=new u.MixedRoute(R);if(C=l,function(e){return e.pools.every((function(e){return e instanceof y.Pool}))}(I)){var S=u.encodeMixedRouteToPath(I);e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[v(A)?m:b[A+1][0].liquidityToken.address,0==A?c:k,v(A)?f:0,S,r&&0===A])}else e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[v(A)?m:h,0===A?c:k,v(A)?f:0,I.path.map((function(e){return e.address})),r&&0===A])}}function V(e,t){var n=t.signature,a=i.ethers.utils.arrayify(t.signature).length;65!==a&&64!==a||(n=i.ethers.utils.joinSignature(i.ethers.utils.splitSignature(t.signature))),e.addCommand(exports.CommandType.PERMIT2_PERMIT,[t,n])}function L(e,t){t.approval&&t.permit2Permit&&t.approval.token!==t.permit2Permit.details.token&&n(!1),t.approval&&t.permit2TransferFrom&&t.approval.token!==t.permit2TransferFrom.token&&n(!1),t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&n(!1),t.approval&&e.addCommand(exports.CommandType.APPROVE_ERC20,[t.approval.token,D(t.approval.protocol)]),t.permit2Permit&&V(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:h,t.permit2TransferFrom.amount])}function D(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return 0;case"0x2b2e8cda09bba9660dca5cb6233787738ad68329":return 1;default:throw new Error("unsupported protocol address")}}var U=function(){function e(){}return e.swapCallParameters=function(t,a){void 0===a&&(a={}),Array.isArray(t)||(t=[t]);for(var r,p=t.filter((function(e,t,n){return e.hasOwnProperty("market")})),s=1!=p.length||1!=p[0].orders.length,y=new S,u=i.BigNumber.from(0),o=i.BigNumber.from(0),d=new Set,m=c(t);!(r=m()).done;){var l=r.value;if(l.tradeType==exports.RouterTradeType.NFTTrade){var T=l;T.encode(y,{allowRevert:s});var f=T.getTotalPrice();T.market==exports.Market.Seaport?T.getInputTokens().forEach((function(e){d.add(e)})):d.add(w),u.lt(f)?(o=o.add(f.sub(u)),u=i.BigNumber.from(0)):u=u.sub(f)}else if(l.tradeType==exports.RouterTradeType.UniswapTrade){var b=l,v=b.trade.inputAmount.currency.isNative,C=b.trade.outputAmount.currency.isNative,A=b.options;v&&A.inputTokenPermit&&n(!1),A.inputTokenPermit&&V(y,A.inputTokenPermit),v&&(o=o.add(i.BigNumber.from(b.trade.maximumAmountIn(A.slippageTolerance).quotient.toString()))),C&&A.recipient==h&&(u=u.add(i.BigNumber.from(b.trade.minimumAmountOut(A.slippageTolerance).quotient.toString()))),b.encode(y,{allowRevert:!1})}else{if(l.tradeType!=exports.RouterTradeType.UnwrapWETH)throw"trade must be of instance: UniswapTrade or NFTTrade";var x=l;l.encode(y,{allowRevert:!1}),u=u.add(x.amount)}}return d.forEach((function(e){y.addCommand(exports.CommandType.SWEEP,[e,E,0])})),e.encodePlan(y,o,a)},e.swapNFTCallParameters=function(t,n){void 0===n&&(n={});for(var a,r=new S,p=i.BigNumber.from(0),s=1!=t.length||1!=t[0].orders.length,y=c(t);!(a=y()).done;){var u=a.value;u.encode(r,{allowRevert:s}),p=p.add(u.getTotalPrice())}return r.addCommand(exports.CommandType.SWEEP,[w,E,0]),e.encodePlan(r,p,n)},e.swapERC20CallParameters=function(t,a){var r=new S,p=new F(t,a),s=p.trade.inputAmount.currency;s.isNative&&a.inputTokenPermit&&n(!1),a.inputTokenPermit&&V(r,a.inputTokenPermit);var y=i.BigNumber.from(s.isNative?p.trade.maximumAmountIn(a.slippageTolerance).quotient.toString():0);return p.encode(r,{allowRevert:!1}),e.encodePlan(r,y,{deadline:a.deadlineOrPreviousBlockhash?i.BigNumber.from(a.deadlineOrPreviousBlockhash):void 0})},e.encodePlan=function(t,n,a){void 0===a&&(a={});var r=t.commands,i=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(a.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",a.deadline?[r,i,a.deadline]:[r,i]),value:n.toHexString()}},e}();U.INTERFACE=new r.Interface(a.abi);var H=function(e){function t(t){return e.call(this,exports.Market.Cryptopunks,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,t){for(var n,a=c(this.orders);!(n=a()).done;){var r=n.value;e.addCommand(exports.CommandType.CRYPTOPUNKS,[r.tokenId,r.recipient,r.value],t.allowRevert)}},n.getBuyItems=function(){for(var e,n=[],a=c(this.orders);!(e=a()).done;)n.push({tokenAddress:t.CRYPTOPUNK_ADDRESS,tokenId:e.value.tokenId,tokenType:exports.TokenType.Cryptopunk});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(A);H.CRYPTOPUNK_ADDRESS="0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb";var W=[{inputs:[{internalType:"address payable",name:"treasury",type:"address"},{internalType:"address",name:"feth",type:"address"},{internalType:"address",name:"royaltyRegistry",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"FoundationTreasuryNode_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"FoundationTreasuryNode_Caller_Not_Admin",type:"error"},{inputs:[{internalType:"uint256",name:"buyPrice",type:"uint256"}],name:"NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Buy_Unset_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Set_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Too_High",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketBuyPrice_Seller_Mismatch",type:"error"},{inputs:[],name:"NFTMarketCore_FETH_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"NFTMarketCore_Only_FETH_Can_Transfer_ETH",type:"error"},{inputs:[],name:"NFTMarketCore_Seller_Not_Found",type:"error"},{inputs:[],name:"NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",type:"error"},{inputs:[],name:"NFTMarketOffer_Cannot_Be_Made_While_In_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"currentOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Below_Min_Amount",type:"error"},{inputs:[{internalType:"uint256",name:"expiry",type:"uint256"}],name:"NFTMarketOffer_Offer_Expired",type:"error"},{inputs:[{internalType:"address",name:"currentOfferFrom",type:"address"}],name:"NFTMarketOffer_Offer_From_Does_Not_Match",type:"error"},{inputs:[{internalType:"uint256",name:"minOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",type:"error"},{inputs:[],name:"NFTMarketOffer_Reason_Required",type:"error"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"NFTMarketReserveAuction_Already_Listed",type:"error"},{inputs:[{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",type:"error"},{inputs:[{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",type:"error"},{inputs:[{internalType:"uint256",name:"maxDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Exceeds_Max_Duration",type:"error"},{inputs:[{internalType:"uint256",name:"extensionDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Less_Than_Extension_Duration",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketReserveAuction_Not_Matching_Seller",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Too_Much_Value_Provided",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"BuyPriceAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"BuyPriceSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"buyReferrer",type:"address"},{indexed:!1,internalType:"uint256",name:"buyReferrerProtocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"buyReferrerSellerFee",type:"uint256"}],name:"BuyReferralPaid",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"OfferAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"OfferCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"OfferInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expiration",type:"uint256"}],name:"OfferMade",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"}],name:"ReserveAuctionBidPlaced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"ReserveAuctionCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"duration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"extensionDuration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"ReserveAuctionFinalized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"ReserveAuctionUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawalToFETH",type:"event"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"offerFrom",type:"address"},{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"acceptOffer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"nftContracts",type:"address[]"},{internalType:"uint256[]",name:"tokenIds",type:"uint256[]"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelOffers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"buy",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"buyV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"cancelBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"cancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"createReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"finalizeReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getBuyPrice",outputs:[{internalType:"address",name:"seller",type:"address"},{internalType:"uint256",name:"price",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"getFeesAndRecipients",outputs:[{internalType:"uint256",name:"protocolFee",type:"uint256"},{internalType:"uint256",name:"creatorRev",type:"uint256"},{internalType:"address payable[]",name:"creatorRecipients",type:"address[]"},{internalType:"uint256[]",name:"creatorShares",type:"uint256[]"},{internalType:"uint256",name:"sellerRev",type:"uint256"},{internalType:"address payable",name:"owner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFethAddress",outputs:[{internalType:"address",name:"fethAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFoundationTreasury",outputs:[{internalType:"address payable",name:"treasuryAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getImmutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getMinBidAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getMinOfferAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"creator",type:"address"}],name:"getMutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOffer",outputs:[{internalType:"address",name:"buyer",type:"address"},{internalType:"uint256",name:"expiration",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOfferReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuction",outputs:[{components:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"seller",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256",name:"extensionDuration",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"address payable",name:"bidder",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct NFTMarketReserveAuction.ReserveAuction",name:"auction",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuctionBidReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getReserveAuctionIdFor",outputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRoyaltyRegistry",outputs:[{internalType:"address",name:"registry",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getTokenCreator",outputs:[{internalType:"address payable",name:"creator",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"makeOffer",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"makeOfferV2",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"placeBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"placeBidV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"setBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"updateReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],X=function(e){function t(t){return e.call(this,exports.Market.Foundation,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyV2",[i.tokenAddress,i.tokenId,i.price,i.referrer]);e.addCommand(exports.CommandType.FOUNDATION,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:exports.TokenType.ERC721})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(A);X.INTERFACE=new r.Interface(W);var K=[{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_protocolFeeRecipient",type:"address"},{internalType:"address",name:"_transferManager",type:"address"},{internalType:"address",name:"_weth",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"CallerInvalid",type:"error"},{inputs:[],name:"ChainIdInvalid",type:"error"},{inputs:[],name:"CreatorFeeBpTooHigh",type:"error"},{inputs:[],name:"CurrencyInvalid",type:"error"},{inputs:[],name:"ERC20TransferFromFail",type:"error"},{inputs:[],name:"LengthsInvalid",type:"error"},{inputs:[],name:"MerkleProofInvalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"MerkleProofTooLarge",type:"error"},{inputs:[],name:"NewGasLimitETHTransferTooLow",type:"error"},{inputs:[],name:"NewProtocolFeeRecipientCannotBeNullAddress",type:"error"},{inputs:[],name:"NoOngoingTransferInProgress",type:"error"},{inputs:[],name:"NoSelectorForStrategy",type:"error"},{inputs:[],name:"NoncesInvalid",type:"error"},{inputs:[],name:"NotAContract",type:"error"},{inputs:[],name:"NotAffiliateController",type:"error"},{inputs:[],name:"NotOwner",type:"error"},{inputs:[],name:"NotV2Strategy",type:"error"},{inputs:[],name:"NullSignerAddress",type:"error"},{inputs:[],name:"OutsideOfTimeRange",type:"error"},{inputs:[],name:"PercentageTooHigh",type:"error"},{inputs:[],name:"QuoteTypeInvalid",type:"error"},{inputs:[],name:"ReentrancyFail",type:"error"},{inputs:[],name:"RenouncementNotInProgress",type:"error"},{inputs:[],name:"SameDomainSeparator",type:"error"},{inputs:[],name:"SignatureEOAInvalid",type:"error"},{inputs:[],name:"SignatureERC1271Invalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"SignatureLengthInvalid",type:"error"},{inputs:[],name:"SignatureParameterSInvalid",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"SignatureParameterVInvalid",type:"error"},{inputs:[],name:"StrategyHasNoSelector",type:"error"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"}],name:"StrategyNotAvailable",type:"error"},{inputs:[],name:"StrategyNotUsed",type:"error"},{inputs:[],name:"StrategyProtocolFeeTooHigh",type:"error"},{inputs:[],name:"TransferAlreadyInProgress",type:"error"},{inputs:[],name:"TransferNotInProgress",type:"error"},{inputs:[],name:"WrongPotentialOwner",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"uint256",name:"affiliateFee",type:"uint256"}],name:"AffiliatePayment",type:"event"},{anonymous:!1,inputs:[],name:"CancelOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"bool",name:"isAllowed",type:"bool"}],name:"CurrencyStatusUpdated",type:"event"},{anonymous:!1,inputs:[],name:"InitiateOwnershipRenouncement",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"previousOwner",type:"address"},{indexed:!1,internalType:"address",name:"potentialOwner",type:"address"}],name:"InitiateOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliateController",type:"address"}],name:"NewAffiliateController",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isActive",type:"bool"}],name:"NewAffiliateProgramStatus",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"uint256",name:"rate",type:"uint256"}],name:"NewAffiliateRate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"bidNonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"askNonce",type:"uint256"}],name:"NewBidAskNonces",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"creatorFeeManager",type:"address"}],name:"NewCreatorFeeManager",type:"event"},{anonymous:!1,inputs:[],name:"NewDomainSeparator",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"gasLimitETHTransfer",type:"uint256"}],name:"NewGasLimitETHTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"maxCreatorFeeBp",type:"uint256"}],name:"NewMaxCreatorFeeBp",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOwner",type:"address"}],name:"NewOwner",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"protocolFeeRecipient",type:"address"}],name:"NewProtocolFeeRecipient",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"bytes4",name:"selector",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isMakerBid",type:"bool"},{indexed:!1,internalType:"address",name:"implementation",type:"address"}],name:"NewStrategy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"OrderNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"bool",name:"isActive",type:"bool"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"}],name:"StrategyUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"SubsetNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"askUser",type:"address"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerAsk",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"address",name:"bidRecipient",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerBid",type:"event"},{inputs:[],name:"MAGIC_VALUE_ORDER_NONCE_EXECUTED",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"affiliateController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"affiliateRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"cancelOrderNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"cancelOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"cancelSubsetNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"confirmOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"confirmOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"creatorFeeManager",outputs:[{internalType:"contract ICreatorFeeManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"domainSeparator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker[]",name:"takerBids",type:"tuple[]"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker[]",name:"makerAsks",type:"tuple[]"},{internalType:"bytes[]",name:"makerSignatures",type:"bytes[]"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree[]",name:"merkleTrees",type:"tuple[]"},{internalType:"address",name:"affiliate",type:"address"},{internalType:"bool",name:"isAtomic",type:"bool"}],name:"executeMultipleTakerBids",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerAsk",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerBid",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerAsk",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"root",type:"bytes32"},{internalType:"uint256",name:"proofLength",type:"uint256"}],name:"hashBatchOrder",outputs:[{internalType:"bytes32",name:"batchOrderHash",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"bool",name:"bid",type:"bool"},{internalType:"bool",name:"ask",type:"bool"}],name:"incrementBidAskNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initiateOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPotentialOwner",type:"address"}],name:"initiateOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isAffiliateProgramActive",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isCurrencyAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"maxCreatorFeeBp",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ownershipStatus",outputs:[{internalType:"enum IOwnableTwoSteps.Status",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"potentialOwner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolFeeRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"address",name:"sender",type:"address"},{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"restrictedExecuteTakerBid",outputs:[{internalType:"uint256",name:"protocolFeeAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"strategyInfo",outputs:[{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"transferManager",outputs:[{internalType:"contract TransferManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newAffiliateController",type:"address"}],name:"updateAffiliateController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"isActive",type:"bool"}],name:"updateAffiliateProgramStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"affiliate",type:"address"},{internalType:"uint256",name:"bp",type:"uint256"}],name:"updateAffiliateRate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newCreatorFeeManager",type:"address"}],name:"updateCreatorFeeManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"currency",type:"address"},{internalType:"bool",name:"isAllowed",type:"bool"}],name:"updateCurrencyStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"updateDomainSeparator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"newGasLimitETHTransfer",type:"uint256"}],name:"updateETHGasLimitForTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint16",name:"newMaxCreatorFeeBp",type:"uint16"}],name:"updateMaxCreatorFeeBp",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newProtocolFeeRecipient",type:"address"}],name:"updateProtocolFeeRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"newStandardProtocolFee",type:"uint16"},{internalType:"uint16",name:"newMinTotalFee",type:"uint16"}],name:"updateStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"userBidAskNonces",outputs:[{internalType:"uint256",name:"bidNonce",type:"uint256"},{internalType:"uint256",name:"askNonce",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userOrderNonce",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userSubsetNonce",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],q=function(e){function t(t){return e.call(this,exports.Market.LooksRareV2,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){var a,r=this.refactorAPIData(this.orders),i=r.takerBids,p=r.makerOrders,s=r.makerSignatures,y=r.totalValue,u=r.merkleTrees;a=1==this.orders.length?t.INTERFACE.encodeFunctionData("executeTakerBid",[i[0],p[0],s[0],u[0],P]):t.INTERFACE.encodeFunctionData("executeMultipleTakerBids",[i,p,s,u,P,!1]),e.addCommand(exports.CommandType.LOOKS_RARE_V2,[y,a],n.allowRevert)},n.getBuyItems=function(){for(var e,n=[],a=c(this.orders);!(e=a()).done;)for(var r,i=e.value,p=i.apiOrder.collection,s=i.apiOrder.collectionType==t.ERC721_ORDER?exports.TokenType.ERC721:exports.TokenType.ERC1155,y=c(i.apiOrder.itemIds);!(r=y()).done;)n.push({tokenAddress:p,tokenId:r.value,tokenType:s});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.apiOrder.price);return t},n.refactorAPIData=function(e){var t=[],n=[],a=[],r=i.BigNumber.from(0),p=[];return e.forEach((function(e){var s,y;n.push(m({},e.apiOrder)),a.push(e.apiOrder.signature),t.push({recipient:e.taker,additionalParameters:"0x"}),r=r.add(i.BigNumber.from(e.apiOrder.price)),p.push({root:null!=(s=e.apiOrder.merkleRoot)?s:"0x0000000000000000000000000000000000000000000000000000000000000000",proof:null!=(y=e.apiOrder.merkleProof)?y:[]})})),{takerBids:t,makerOrders:n,makerSignatures:a,totalValue:r,merkleTrees:p}},t}(A);q.INTERFACE=new r.Interface(K),q.ERC721_ORDER=0;var z=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[],name:"ETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"NFT20",outputs:[{internalType:"contract INFT20Factory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV3",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_toIds",type:"uint256[]"},{internalType:"uint256[]",name:"_toAmounts",type:"uint256[]"},{internalType:"address",name:"_receipient",type:"address"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"ethForNft",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_ids",type:"uint256[]"},{internalType:"uint256[]",name:"_amounts",type:"uint256[]"},{internalType:"bool",name:"isErc721",type:"bool"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"nftForEth",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"address",name:"sendTo",type:"address"}],name:"recoverERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_registry",type:"address"}],name:"setNFT20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawEth",outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}],Y=function(e){function t(t){return e.call(this,exports.Market.NFT20,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("ethForNft",[i.tokenAddress,i.tokenIds,i.tokenAmounts,i.recipient,i.fee,i.isV3]);e.addCommand(exports.CommandType.NFT20,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=e.value,i=c(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(A);Y.INTERFACE=new r.Interface(z);var j=[{inputs:[{internalType:"address",name:"_nftxFactory",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address payable",name:"_swapTarget",type:"address"},{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Buy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ethAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vTokenAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"DustReturned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethReceived",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Sell",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},{inputs:[],name:"WETH",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap1155",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap721",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"dustThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeDistributor",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell1155",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell721",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"nftxFactory",outputs:[{internalType:"contract INFTXVaultFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"nftxVaultAddresses",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155BatchReceived",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"_paused",type:"bool"}],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"rescue",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],name:"setDustThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],G=function(e){function t(t){return e.call(this,exports.Market.NFTX,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyAndRedeem",[i.vaultId,i.tokenIds.length,i.tokenIds,i.swapCalldata,i.recipient]);e.addCommand(exports.CommandType.NFTX,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=e.value,i=c(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(A);G.INTERFACE=new r.Interface(j);var Q=[{inputs:[{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"BadContractSignature",type:"error"},{inputs:[],name:"BadFraction",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"BadReturnValueFromERC20OnTransfer",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"BadSignatureV",type:"error"},{inputs:[],name:"ConsiderationCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"considerationIndex",type:"uint256"},{internalType:"uint256",name:"shortfallAmount",type:"uint256"}],name:"ConsiderationNotMet",type:"error"},{inputs:[],name:"CriteriaNotEnabledForItem",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"identifiers",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],name:"ERC1155BatchTransferGenericFailure",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"EtherTransferGenericFailure",type:"error"},{inputs:[],name:"InexactFraction",type:"error"},{inputs:[],name:"InsufficientEtherSupplied",type:"error"},{inputs:[],name:"Invalid1155BatchTransferEncoding",type:"error"},{inputs:[],name:"InvalidBasicOrderParameterEncoding",type:"error"},{inputs:[{internalType:"address",name:"conduit",type:"address"}],name:"InvalidCallToConduit",type:"error"},{inputs:[],name:"InvalidCanceller",type:"error"},{inputs:[{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"address",name:"conduit",type:"address"}],name:"InvalidConduit",type:"error"},{inputs:[],name:"InvalidERC721TransferAmount",type:"error"},{inputs:[],name:"InvalidFulfillmentComponentData",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"InvalidMsgValue",type:"error"},{inputs:[],name:"InvalidNativeOfferItem",type:"error"},{inputs:[],name:"InvalidProof",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"InvalidRestrictedOrder",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"InvalidTime",type:"error"},{inputs:[],name:"MismatchedFulfillmentOfferAndConsiderationComponents",type:"error"},{inputs:[{internalType:"enum Side",name:"side",type:"uint8"}],name:"MissingFulfillmentComponentOnAggregation",type:"error"},{inputs:[],name:"MissingItemAmount",type:"error"},{inputs:[],name:"MissingOriginalConsiderationItems",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"NoContract",type:"error"},{inputs:[],name:"NoReentrantCalls",type:"error"},{inputs:[],name:"NoSpecifiedOrdersAvailable",type:"error"},{inputs:[],name:"OfferAndConsiderationRequiredOnFulfillment",type:"error"},{inputs:[],name:"OfferCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderAlreadyFilled",type:"error"},{inputs:[],name:"OrderCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderIsCancelled",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderPartiallyFilled",type:"error"},{inputs:[],name:"PartialFillsNotEnabledForOrder",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenTransferGenericFailure",type:"error"},{inputs:[],name:"UnresolvedConsiderationCriteria",type:"error"},{inputs:[],name:"UnresolvedOfferCriteria",type:"error"},{inputs:[],name:"UnusedItemParameters",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newCounter",type:"uint256"},{indexed:!0,internalType:"address",name:"offerer",type:"address"}],name:"CounterIncremented",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],indexed:!1,internalType:"struct SpentItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ReceivedItem[]",name:"consideration",type:"tuple[]"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderValidated",type:"event"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents[]",name:"orders",type:"tuple[]"}],name:"cancel",outputs:[{internalType:"bool",name:"cancelled",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder",name:"advancedOrder",type:"tuple"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"}],name:"fulfillAdvancedOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableAdvancedOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"considerationToken",type:"address"},{internalType:"uint256",name:"considerationIdentifier",type:"uint256"},{internalType:"uint256",name:"considerationAmount",type:"uint256"},{internalType:"address payable",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{internalType:"address",name:"offerToken",type:"address"},{internalType:"uint256",name:"offerIdentifier",type:"uint256"},{internalType:"uint256",name:"offerAmount",type:"uint256"},{internalType:"enum BasicOrderType",name:"basicOrderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"offererConduitKey",type:"bytes32"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalAdditionalRecipients",type:"uint256"},{components:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct AdditionalRecipient[]",name:"additionalRecipients",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct BasicOrderParameters",name:"parameters",type:"tuple"}],name:"fulfillBasicOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order",name:"order",type:"tuple"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"}],name:"fulfillOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"offerer",type:"address"}],name:"getCounter",outputs:[{internalType:"uint256",name:"counter",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents",name:"order",type:"tuple"}],name:"getOrderHash",outputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"getOrderStatus",outputs:[{internalType:"bool",name:"isValidated",type:"bool"},{internalType:"bool",name:"isCancelled",type:"bool"},{internalType:"uint256",name:"totalFilled",type:"uint256"},{internalType:"uint256",name:"totalSize",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"incrementCounter",outputs:[{internalType:"uint256",name:"newCounter",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"information",outputs:[{internalType:"string",name:"version",type:"string"},{internalType:"bytes32",name:"domainSeparator",type:"bytes32"},{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchAdvancedOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"contractName",type:"string"}],stateMutability:"pure",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"}],name:"validate",outputs:[{internalType:"bool",name:"validated",type:"bool"}],stateMutability:"nonpayable",type:"function"}],Z=function(e){function t(t){return e.call(this,exports.Market.Seaport,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){for(var i,p=a.value,s=[],y=p.items.map((function(e,t){return[{orderIndex:t,itemIndex:0}]})),u=this.getConsiderationFulfillments(p.items),o=c(p.items);!(i=o()).done;){var d=this.getAdvancedOrderParams(i.value);s.push(d.advancedOrder)}var m;if(m=1==s.length?t.INTERFACE.encodeFunctionData("fulfillAdvancedOrder",[s[0],[],t.OPENSEA_CONDUIT_KEY,p.recipient]):t.INTERFACE.encodeFunctionData("fulfillAvailableAdvancedOrders",[s,[],y,u,t.OPENSEA_CONDUIT_KEY,p.recipient,100]),p.inputTokenProcessing)for(var l,T=c(p.inputTokenProcessing);!(l=T()).done;){var f=l.value;L(e,{approval:f.protocolApproval?{token:f.token,protocol:p.protocolAddress}:void 0,permit2Permit:f.permit2Permit,permit2TransferFrom:f.permit2TransferFrom?{token:f.token,amount:this.getTotalOrderPrice(p,f.token).toString()}:void 0})}e.addCommand(this.commandMap(p.protocolAddress),[this.getTotalOrderPrice(p,w).toString(),m],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.items);!(a=r()).done;)for(var i,p=c(a.value.parameters.offer);!(i=p()).done;){var s=i.value;t.push({tokenAddress:s.token,tokenId:s.identifierOrCriteria,tokenType:exports.TokenType.ERC721})}return t},n.getInputTokens=function(){for(var e,t=new Set,n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.items);!(a=r()).done;)for(var i,p=c(a.value.parameters.consideration);!(i=p()).done;){var s=i.value.token.toLowerCase();t.add(s)}return t},n.getTotalOrderPrice=function(e,t){void 0===t&&(t=w);for(var n,a=i.BigNumber.from(0),r=c(e.items);!(n=r()).done;)a=a.add(this.calculateValue(n.value.parameters.consideration,t));return a},n.getTotalPrice=function(e){void 0===e&&(e=w);for(var t,n=i.BigNumber.from(0),a=c(this.orders);!(t=a()).done;)for(var r,p=c(t.value.items);!(r=p()).done;)n=n.add(this.calculateValue(r.value.parameters.consideration,e));return n},n.commandMap=function(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":return exports.CommandType.SEAPORT_V1_5;case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return exports.CommandType.SEAPORT_V1_4;default:throw new Error("unsupported Seaport address")}},n.getConsiderationFulfillments=function(e){var t=[],n=[];for(var a in e){var r=e[a],i=function(){var e=r.parameters.consideration[p];-1===n.findIndex((function(t){return t===e.recipient}))&&n.push(e.recipient);var i=n.findIndex((function(t){return t===e.recipient}));t[i]?t[i].push({orderIndex:a,itemIndex:p}):t.push([{orderIndex:a,itemIndex:p}])};for(var p in r.parameters.consideration)i()}return t},n.getAdvancedOrderParams=function(e){return{advancedOrder:{parameters:e.parameters,numerator:i.BigNumber.from("1"),denominator:i.BigNumber.from("1"),signature:e.signature,extraData:"0x00"}}},n.calculateValue=function(e,t){return e.reduce((function(e,n){return n.token.toLowerCase()==t.toLowerCase()?e.add(n.startAmount):e}),i.BigNumber.from(0))},t}(A);Z.INTERFACE=new r.Interface(Q),Z.OPENSEA_CONDUIT_KEY="0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000";var $=[{inputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"_factory",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"factory",outputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract ERC20",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferERC20From",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC721",name:"nft",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferNFTFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapERC20ForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapETHForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],J=function(e){function t(t){return e.call(this,exports.Market.Sudoswap,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var p=a.value,s=t.INTERFACE.encodeFunctionData("robustSwapETHForSpecificNFTs",[p.swaps.map((function(e){return{swapInfo:e.swapInfo,maxCost:e.maxCost}})),p.ethRecipient,p.nftRecipient,p.deadline]),y=p.swaps.reduce((function(e,t){return e.add(t.maxCost)}),i.BigNumber.from(0));e.addCommand(exports.CommandType.SUDOSWAP,[y,s],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.swaps);!(a=r()).done;)for(var i,p=a.value,s=c(p.swapInfo.nftIds);!(i=s()).done;)t.push({tokenAddress:p.tokenAddress,tokenId:i.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.swaps);!(a=r()).done;)t=t.add(a.value.maxCost);return t},t}(A);J.INTERFACE=new r.Interface($);var ee=[{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"incentive",type:"uint256"}],name:"EvAuctionRefund",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"}],name:"EvCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"delegate",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvDelegate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"bytes",name:"error",type:"bytes"}],name:"EvFailure",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"EvFeeCapUpdate",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"maker",type:"address"},{indexed:!1,internalType:"address",name:"taker",type:"address"},{indexed:!1,internalType:"uint256",name:"orderSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"settleSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"intent",type:"uint256"},{indexed:!1,internalType:"uint256",name:"delegateType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{indexed:!1,internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],indexed:!1,internalType:"struct Market.OrderItem",name:"item",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],indexed:!1,internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"EvInventory",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EvProfit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"signer",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvSigner",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"RATE_BASE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"itemHashes",type:"bytes32[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"cancel",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"delegates",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeCapPct",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"feeCapPct_",type:"uint256"},{internalType:"address",name:"weth_",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"inventoryStatus",outputs:[{internalType:"enum Market.InvStatus",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"ongoingAuctions",outputs:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256",name:"netPrice",type:"uint256"},{internalType:"uint256",name:"endAt",type:"uint256"},{internalType:"address",name:"bidder",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail[]",name:"details",type:"tuple[]"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"}],internalType:"struct Market.RunInput",name:"input",type:"tuple"}],name:"run",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order",name:"order",type:"tuple"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"run1",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"signers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateDelegates",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"val",type:"uint256"}],name:"updateFeeCap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateSigners",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"weth",outputs:[{internalType:"contract IWETHUpgradable",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],te=function(e){function t(t){return e.call(this,exports.Market.X2Y2,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.getSighash(t.INTERFACE.getFunction("run"))+i.signedInput.slice(2);i.tokenType==exports.TokenType.ERC721?e.addCommand(exports.CommandType.X2Y2_721,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert):i.tokenType==exports.TokenType.ERC1155&&e.addCommand(exports.CommandType.X2Y2_1155,[i.price,p,i.recipient,i.tokenAddress,i.tokenId,i.tokenAmount],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:a.tokenType})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(A);te.INTERFACE=new r.Interface(ee);var ne,ae=function(){function e(e,t,a){this.tradeType=exports.RouterTradeType.UnwrapWETH,this.wethAddress=_(t),this.amount=e,a&&(a.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&n(!1),a.details.amount>=e||n(!1),this.permit2Data=a)}return e.prototype.encode=function(e,t){L(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.UNWRAP_WETH,[h,this.amount])},e}();(ne=exports.PoolType||(exports.PoolType={})).V2Pool="v2-pool",ne.V3Pool="v3-pool";var re=function(e){return e.toLowerCase()===w.toLowerCase()||e.toLowerCase()==="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".toLowerCase()},ie=function(){function e(){}return e.fromClassicQuote=function(t){var n=t.route,a=t.tokenIn,r=t.tokenOut;if(!n)throw new Error("Expected route to be present");if(!n.length)throw new Error("Expected there to be at least one route");if(n.some((function(e){return!e.length})))throw new Error("Expected all routes to have at least one pool");var i=n[0],p=i[0].tokenIn,d=i[i.length-1].tokenOut;if(!p||!d)throw new Error("Expected both tokenIn and tokenOut to be present");if(p.chainId!==d.chainId)throw new Error("Expected tokenIn and tokenOut to be have same chainId");var m=e.toCurrency(re(a),p),l=e.toCurrency(re(r),d),T=n.map((function(t){var n=t[0].amountIn,a=t[t.length-1].amountOut;if(!n||!a)throw new Error("Expected both raw amountIn and raw amountOut to be present");var r=o.CurrencyAmount.fromRawAmount(m,n),i=o.CurrencyAmount.fromRawAmount(l,a),p=e.isVersionedRoute(exports.PoolType.V2Pool,t),d=e.isVersionedRoute(exports.PoolType.V3Pool,t);return{routev3:d?new y.Route(t.map(e.toPool),m,l):null,routev2:p?new s.Route(t.map(e.toPair),m,l):null,mixedRoute:d||p?null:new u.MixedRouteSDK(t.map(e.toPoolOrPair),m,l),inputAmount:r,outputAmount:i}}));return new u.Trade({v2Routes:T.filter((function(e){return e.routev2})).map((function(e){return{routev2:e.routev2,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v3Routes:T.filter((function(e){return e.routev3})).map((function(e){return{routev3:e.routev3,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),mixedRoutes:T.filter((function(e){return e.mixedRoute})).map((function(e){return{mixedRoute:e.mixedRoute,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),tradeType:t.tradeType})},e.toCurrency=function(e,t){return e?o.Ether.onChain(t.chainId):this.toToken(t)},e.toToken=function(e){var t=e.symbol,n=e.buyFeeBps,a=e.sellFeeBps;return new o.Token(e.chainId,e.address,parseInt(e.decimals.toString()),t,void 0,!1,n?i.BigNumber.from(n):void 0,a?i.BigNumber.from(a):void 0)},e.toPool=function(t){var n=t.fee,a=t.sqrtRatioX96,r=t.liquidity,i=t.tickCurrent,p=t.tokenOut;return new y.Pool(e.toToken(t.tokenIn),e.toToken(p),parseInt(n),a,r,parseInt(i))},e.isVersionedRoute=function(e,t){return t.every((function(t){return t.type===e}))},e}();ie.toPoolOrPair=function(e){return e.type===exports.PoolType.V3Pool?ie.toPool(e):ie.toPair(e)},ie.toPair=function(e){var t=e.reserve0,n=e.reserve1;return new s.Pair(o.CurrencyAmount.fromRawAmount(ie.toToken(t.token),t.quotient),o.CurrencyAmount.fromRawAmount(ie.toToken(n.token),n.quotient))},exports.CryptopunkTrade=H,exports.FoundationTrade=X,exports.LooksRareV2Trade=q,exports.NFT20Trade=Y,exports.NFTTrade=A,exports.NFTXTrade=G,exports.PERMIT2_ADDRESS="0x000000000022D473030F116dDEE9F6B43aC78BA3",exports.ROUTER_AS_RECIPIENT=h,exports.RoutePlanner=S,exports.RouterTradeAdapter=ie,exports.SeaportTrade=Z,exports.SudoswapTrade=J,exports.SwapRouter=U,exports.UNIVERSAL_ROUTER_ADDRESS=function(e){if(!(e in M))throw new Error("Universal Router not deployed on chain "+e);return M[e].router},exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e){if(!(e in M))throw new Error("Universal Router not deployed on chain "+e);return M[e].creationBlock},exports.UniswapTrade=F,exports.UnwrapWETH=ae,exports.WETH_ADDRESS=_,exports.X2Y2Trade=te,exports.isNativeCurrency=re;
-//# sourceMappingURL=universal-router-sdk.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
deleted file mode 100644
index 89bb756..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/utils/routerTradeAdapter.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n  [7777777]: {\n    router: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 11832155,\n  },\n  [324]: {\n    router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    creationBlock: 12640979,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","CHAIN_CONFIGS","_CHAIN_CONFIGS","router","weth","creationBlock","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","payerIsUser","inputRequiresWrap","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","quotient","recipient","_this$options$recipie","swapOptions","_step","outputIsNative","outputAmount","currency","isNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","_iterator","_createForOfIteratorHelperLoose","swaps","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","toHex","multiply","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","priceImpact","greaterThan","safeMode","key","get","inputAmount","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","_step2","totalPrice","_iterator2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","call","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","_step3","total","_iterator3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_step4","_iterator4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_step5","_iterator5","_step6","_iterator6","offer","identifierOrCriteria","_step7","inputTokens","_iterator7","_step8","_iterator8","_step9","_iterator9","consideration","_step10","totalOrderPrice","_iterator10","calculateValue","_step11","_iterator11","_step12","_iterator12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","PoolType","wethAddress","permit2Data","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","symbol","buyFeeBps","sellFeeBps","Token","parseInt","decimals","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"0EAMYA,o7DAAAA,EAAAA,0BAAAA,yDAEVA,sBACAA,8BC0CUC,EAYAC,ICxDAC,EDkBUC,EAKpB,SAAYC,EAAgBC,GAJnBC,eAA6BP,wBAAgBI,SAK1CE,EAAOE,OAAS,GAA1BC,MACAF,KAAKF,OAASA,EACdE,KAAKD,OAASA,IAkBNL,EAAAA,iBAAAA,4CAEVA,4BACAA,gBACAA,cACAA,oBACAA,sBACAA,4BACAA,cACAA,qBAGUC,EAAAA,oBAAAA,uCAEVA,oBACAA,2BC3DUC,EAAAA,sBAAAA,kEAEVA,6CACAA,qDACAA,mDACAA,qBACAA,2BACAA,iCAEAA,2CACAA,6CACAA,wCACAA,4BACAA,kCACAA,kEACAA,kDAGAA,oCACAA,sCACAA,oBACAA,kCAEAA,0CACAA,4CACAA,oCAEAA,4BACAA,4BACAA,sBACAA,8BACAA,gCACAA,sCACAA,wCAEAA,oCACAA,4CACAA,sCAGF,MAEMO,EAAsB,IAAIC,IAAiB,CAC/CR,oBAAYS,aACZT,oBAAYU,aACZV,oBAAYW,KACZX,oBAAYY,cACZZ,oBAAYa,SACZb,oBAAYc,UACZd,oBAAYe,WACZf,oBAAYgB,SACZhB,oBAAYiB,MACZjB,oBAAYkB,iBACZlB,oBAAYmB,YACZnB,oBAAYoB,iBAYRC,IAAcC,MAEjBtB,oBAAYkB,kBAAmB,CAAC,QAAS,WAAUI,EAGnDtB,oBAAYuB,gBAAiB,CAb9B,8GAa8C,SAAQD,EACrDtB,oBAAYwB,sBAAuB,CAXpC,gHAW0D,SAAQF,EACjEtB,oBAAYyB,uBAAwB,CAAC,UAAW,UAAW,WAAUH,EACrEtB,oBAAY0B,6BAA8B,CAVFC,4DAUsCL,EAG9EtB,oBAAY4B,kBAAmB,CAAC,UAAW,UAAW,UAAW,QAAS,QAAON,EACjFtB,oBAAY6B,mBAAoB,CAAC,UAAW,UAAW,UAAW,QAAS,QAAOP,EAClFtB,oBAAY8B,kBAAmB,CAAC,UAAW,UAAW,UAAW,YAAa,QAAOR,EACrFtB,oBAAY+B,mBAAoB,CAAC,UAAW,UAAW,UAAW,YAAa,QAAOT,EAGtFtB,oBAAYgC,UAAW,CAAC,UAAW,WAAUV,EAC7CtB,oBAAYiC,aAAc,CAAC,UAAW,WAAUX,EAChDtB,oBAAYkC,OAAQ,CAAC,UAAW,UAAW,WAAUZ,EACrDtB,oBAAYmC,cAAe,CAAC,UAAW,UAAW,WAAUb,EAC5DtB,oBAAYoC,eAAgB,CAAC,UAAW,UAAW,UAAW,WAAUd,EACxEtB,oBAAYqC,UAAW,CAAC,UAAW,UAAW,WAAUf,EACxDtB,oBAAYsC,aAAc,CAAC,UAAW,UAAW,WAAUhB,EAC3DtB,oBAAYuC,qBAAsB,CAAC,UAAW,UAAW,WAAUjB,EACnEtB,oBAAYwC,iBAAkB,CAAC,UAAW,UAAW,WAAUlB,EAC/DtB,oBAAYyC,kBAAmB,CAAC,UAAW,UAAW,UAAW,WAAUnB,EAC3EtB,oBAAY0C,eAAgB,CAAC,UAAW,WAAUpB,EAGlDtB,oBAAYS,cAAe,CAAC,UAAW,SAAQa,EAC/CtB,oBAAYU,cAAe,CAAC,UAAW,SAAQY,EAC/CtB,oBAAYW,MAAO,CAAC,UAAW,SAAQW,EACvCtB,oBAAYY,eAAgB,CAAC,UAAW,SAAQU,EAChDtB,oBAAYa,UAAW,CAAC,UAAW,QAAS,UAAW,UAAW,WAAUS,EAC5EtB,oBAAYc,WAAY,CAAC,UAAW,QAAS,UAAW,UAAW,UAAW,WAAUQ,EACxFtB,oBAAYe,YAAa,CAAC,UAAW,QAAS,UAAW,UAAW,WAAUO,EAC9EtB,oBAAYgB,UAAW,CAAC,UAAW,SAAQM,EAC3CtB,oBAAYiB,OAAQ,CAAC,UAAW,SAAQK,EACxCtB,oBAAYmB,aAAc,CAAC,UAAW,UAAW,WAAUG,EAC3DtB,oBAAYoB,gBAAiB,CAAC,UAAW,SAAQE,GAGvCqB,aAIX,SAAAA,IACEvC,KAAKwC,SAAW,KAChBxC,KAAKyC,OAAS,GACf,IAAAC,EAAAH,EAAAI,UAiBA,OAjBAD,EAEDE,WAAA,SAAWC,GACT7C,KAAK8C,WAAWlD,oBAAYkB,iBAAkB,CAAC+B,EAAQL,SAAUK,EAAQJ,SAAS,IACnFC,EAEDI,WAAA,SAAWC,EAAmBC,EAAmBC,YAAAA,IAAAA,GAAc,GAC7D,IAAIC,WAkBsBH,EAAmBC,GAE/C,MAAO,CAAED,KAAAA,EAAMI,aADMC,kBAAgBC,OAAOpC,EAAe8B,GAAOC,IAnBlDM,CAAcP,EAAMC,GAElC,GADAhD,KAAKyC,OAAOc,KAAKL,EAAQC,cACrBF,EAAa,CACf,IAAK9C,EAAoBqD,IAAIN,EAAQH,MACnC,MAAM,IAAIU,uBAAuBP,EAAQH,qCAE3CG,EAAQH,KAzFY,IAyFLG,EAAQH,KAGzB/C,KAAKwC,SAAWxC,KAAKwC,SAASkB,OAAOR,EAAQH,KAAKY,SAAS,IAAIC,SAAS,EAAG,OAC5ErB,KClIGsB,IAAaC,MAEhB,GAAI,CACHC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,UAChBH,EAEA,GAAI,CACHC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,SAChBH,EAEA,UAAW,CACVC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,SAChBH,EAEA,KAAM,CACLC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,UAChBH,EAEA,OAAQ,CACPC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,UAChBH,EAEA,IAAK,CACJC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,WAChBH,EAEA,KAAM,CACLC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,SAChBH,EAEA,OAAQ,CACPC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,WAChBH,EAEA,QAAS,CACRC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,UAChBH,EAEA,OAAQ,CACPC,OAAQ,6CACRC,KA5DgC,6CA6DhCC,cAAe,UAChBH,EAEA,OAAQ,CACPC,OAAQ,6CACRC,KAlEgC,6CAmEhCC,cAAe,UAChBH,EAEA,IAAK,CACJC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,UAChBH,EAEA,OAAQ,CACPC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,UAChBH,EAEA,OAAQ,CACPC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,SAChBH,EAEA,MAAO,CACNC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,SAChBH,EACA,OAAQ,CACPC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,SAChBH,EACA,SAAU,CACTC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,UAChBH,EACA,KAAM,CACLC,OAAQ,6CACRC,KAAM,6CACNC,cAAe,UAChBH,GAaUI,EAAe,SAACC,GAC3B,KAAMA,KAAWN,GAAgB,MAAM,IAAIJ,gDAAgDU,GAE3F,GA3HkC,8CA2H9BN,EAAcM,GAASH,KAAqC,MAAM,IAAIP,eAAeU,yBAEzF,OAAON,EAAcM,GAASH,MAKnBI,EAAmBC,YAAUC,KAAK,GAAGC,IAAI,KACzCC,EAAc,6CAEdC,EAAe,6CAIfC,EAAsB,6CACtBC,EAAsB,6CC1G7BC,EAAoC,IAAIC,UAAQ,GAAI,KAU7CC,aAIX,SAAAA,EAAmBC,EAA0DC,GAC3E,GADiBhF,WAAA+E,EAA0D/E,aAAAgF,EAHpEhF,eAA6BP,wBAAgBqF,aAI9CE,EAAQC,KAASD,EAAQE,QAAS,MAAM,IAAIzB,MAAM,iCAE5BzD,KAAKmF,aAA7BnF,KAAKoF,oBACApF,KAAKgF,QAAQK,iBAEvB,QAIA,OAJAP,EAAAnC,UAMDU,OAAA,SAAOiC,EAAuBC,SAExBvF,KAAKoF,mBAEPE,EAAQxC,WAAWlD,oBAAYgC,SAAU,CACvC+C,EACA3E,KAAK+E,MAAMS,gBAAgBxF,KAAKgF,QAAQS,mBAAmBC,SAAS/B,aAIxE3D,KAAKgF,QAAQW,iBAASC,EAAG5F,KAAKgF,QAAQW,WAASC,EAAIlB,EAWnD,IALA,IAwPkBmB,EAnPiBC,EAH7BC,EAAiB/F,KAAK+E,MAAMiB,aAAaC,SAASC,SAClDC,EAFJnG,KAAK+E,MAAMqB,YAAcC,YAAUC,aAAetG,KAAK+E,MAAMwB,OAAOtG,OAAS,GAEnB8F,MAqP1CF,EArPyE7F,KAAKgF,SAsP7EC,OAASY,EAAYX,QApPxCsB,EAAAC,EAAmBzG,KAAK+E,MAAM2B,SAAKZ,EAAAU,KAAAG,MAAE,CAAA,IAA1BC,EAAId,EAAAe,MACb,OAAQD,EAAKE,MAAMC,UACjB,KAAKC,WAASC,GACZC,EAAU5B,EAASsB,EAAM5G,KAAK+E,MAAMqB,UAAWpG,KAAKgF,QAAShF,KAAKmF,YAAagB,GAC/E,MACF,KAAKa,WAASG,GACZC,EAAU9B,EAASsB,EAAM5G,KAAK+E,MAAMqB,UAAWpG,KAAKgF,QAAShF,KAAKmF,YAAagB,GAC/E,MACF,KAAKa,WAASK,MACZC,EAAahC,EAASsB,EAAM5G,KAAK+E,MAAMqB,UAAWpG,KAAKgF,QAAShF,KAAKmF,YAAagB,GAClF,MACF,QACE,MAAM,IAAI1C,MAAM,+BAItB,IAAI8D,EAA8BlD,YAAUC,KAC1CtE,KAAK+E,MAAMwC,iBAAiBvH,KAAKgF,QAAQS,mBAAmBC,SAAS/B,YAIvE,GAAIwC,EAAmB,CAGrB,GAAMnG,KAAKgF,QAAQC,IAAK,CACtB,IAAMuC,EChGLC,QDgG6BzH,KAAKgF,QAAQC,IAAIA,IChGpCyC,SAAS,KAAQhC,UDiG5BJ,EAAQxC,WAAWlD,oBAAYsC,YAAa,CAC1ClC,KAAK+E,MAAMiB,aAAaC,SAAS0B,QAAQC,QACzC5H,KAAKgF,QAAQC,IAAIU,UACjB6B,IAKExH,KAAK+E,MAAMqB,YAAcC,YAAUwB,eACrCN,EAAmBA,EAAiBO,IAAIP,EAAiBQ,IAAIP,GAASQ,IAAI,OAM9E,GAAMhI,KAAKgF,QAAQE,QAAS,CAC1B,IAAM+C,EAAYjI,KAAKgF,QAAQE,QAAQgD,OACvC,GAAIX,EAAiBY,GAAGF,GAAY,MAAM,IAAIxE,MAAM,iDAEpD6B,EAAQxC,WAAWlD,oBAAYqC,SAAU,CACvCjC,KAAK+E,MAAMiB,aAAaC,SAAS0B,QAAQC,QACzC5H,KAAKgF,QAAQE,QAAQS,UACrBsC,IAKEjI,KAAK+E,MAAMqB,YAAcC,YAAUwB,eACrCN,EAAmBA,EAAiBO,IAAIG,IAMxClC,EACFT,EAAQxC,WAAWlD,oBAAYiC,YAAa,CAAC7B,KAAKgF,QAAQW,UAAW4B,IAErEjC,EAAQxC,WAAWlD,oBAAYkC,MAAO,CACpC9B,KAAK+E,MAAMiB,aAAaC,SAAS0B,QAAQC,QACzC5H,KAAKgF,QAAQW,UACb4B,IAKFvH,KAAKoF,oBAAsBpF,KAAK+E,MAAMqB,YAAcC,YAAUwB,cAAkC7H,KAAK+E,MAyK9FqD,YAAYC,YAAYzD,KAtKjCU,EAAQxC,WAAWlD,oBAAYiC,YAAa,CAAC7B,KAAKgF,QAAQW,UAAW,IAGnE3F,KAAKgF,QAAQsD,UAAUhD,EAAQxC,WAAWlD,oBAAYkC,MAAO,CAAC0C,EAAaxE,KAAKgF,QAAQW,UAAW,OACxGb,OAAAyD,wBAAAC,IAvGD,WACE,OAAOxI,KAAK+E,MAAM0D,YAAYxC,SAASC,wPACxCpB,KAyGH,SAASoC,EACP5B,EAAqBoD,EAErBtC,EACApB,EACAG,EACAgB,OAJEW,EAAK4B,EAAL5B,MAMI/B,EAAQ,IAAI4D,QAChB7B,EACAV,GAAaC,YAAUC,YARLoC,EAAXD,YAAyBC,EAAZ1C,aASpBI,GAGEA,GAAaC,YAAUC,YACzBhB,EAAQxC,WAAWlD,oBAAY8B,iBAAkB,CAE/CyE,EAAoBxB,EAAsBK,EAAQW,UAClDZ,EAAMS,gBAAgBR,EAAQS,mBAAmBC,SAAS/B,WAC1DoB,EAAMwC,iBAAiBvC,EAAQS,mBAAmBC,SAAS/B,WAC3DmD,EAAM8B,KAAKC,KAAI,SAACC,GAAI,OAAKA,EAAKlB,WAC9BzC,IAEOiB,GAAaC,YAAUwB,cAChCvC,EAAQxC,WAAWlD,oBAAY+B,kBAAmB,CAChDwE,EAAoBxB,EAAsBK,EAAQW,UAClDZ,EAAMwC,iBAAiBvC,EAAQS,mBAAmBC,SAAS/B,WAC3DoB,EAAMS,gBAAgBR,EAAQS,mBAAmBC,SAAS/B,WAC1DmD,EAAM8B,KAAKC,KAAI,SAACC,GAAI,OAAKA,EAAKlB,WAC9BzC,IAMN,SAASiC,EACP9B,EAAqByD,EAErB3C,EACApB,EACAG,EACAgB,OAJEW,EAAKiC,EAALjC,MAMI/B,EAAQiE,QAAQC,qBAAqB,CACzCnC,MAAOA,EACP2B,YARkBM,EAAXN,YASPzC,aATgC+C,EAAZ/C,aAUpBI,UAAAA,IAGIwC,EAAOM,oBAAkBpC,EAAmC/B,EAAMqB,YAAcC,YAAUwB,cAC5FzB,GAAaC,YAAUC,YACzBhB,EAAQxC,WAAWlD,oBAAY4B,iBAAkB,CAC/C2E,EAAoBxB,EAAsBK,EAAQW,UAClDZ,EAAMS,gBAAgBR,EAAQS,mBAAmBC,SAAS/B,WAC1DoB,EAAMwC,iBAAiBvC,EAAQS,mBAAmBC,SAAS/B,WAC3DiF,EACAzD,IAEOiB,GAAaC,YAAUwB,cAChCvC,EAAQxC,WAAWlD,oBAAY6B,kBAAmB,CAChD0E,EAAoBxB,EAAsBK,EAAQW,UAClDZ,EAAMwC,iBAAiBvC,EAAQS,mBAAmBC,SAAS/B,WAC3DoB,EAAMS,gBAAgBR,EAAQS,mBAAmBC,SAAS/B,WAC1DiF,EACAzD,IAMN,SAASmC,EACPhC,EACAsB,EACAR,EACApB,EACAG,EACAgB,GAEA,IAAQW,EAAqCF,EAArCE,MAAO2B,EAA8B7B,EAA9B6B,YAAazC,EAAiBY,EAAjBZ,aACtBmD,EAAiBhD,EAAoBxB,EAAsBK,EAAQW,UAGzE,GAA2B,IAAvBmB,EAAMsC,MAAMnJ,OAAc,CAC5B,GAAI6G,EAAMsC,MAAM,aAAcC,OAC5B,OAAOjC,EAAU9B,EAASsB,EAAMR,EAAWpB,EAASG,EAAagB,GAC5D,GAAIW,EAAMsC,MAAM,aAAcE,OACnC,OAAOpC,EAAU5B,EAASsB,EAAMR,EAAWpB,EAASG,EAAagB,GAEjE,MAAM,IAAI1C,MAAM,sBAwBpB,IApBA,IAiBI8F,EAjBExE,EAAQyE,kBAAgBP,qBAAqB,CACjDnC,MAAOA,EACP2B,YAAAA,EACAzC,aAAAA,EACAI,UAAAA,IAGIqD,EAAW1E,EAAMS,gBAAgBR,EAAQS,kBAAmBgD,GAAa/C,SAAS/B,WAClF+F,EAAY3E,EAAMwC,iBAAiBvC,EAAQS,kBAAmBO,GAAcN,SAAS/B,WAIrFgG,EAAWC,gCAA8B9C,GACzC+C,EAAuB,SAACC,GAC5B,OAAOA,IAAMH,EAAS1J,OAAS,GAI7B8J,EAAajD,EAAMkD,MAAMrC,QAEpBmC,EAAI,EAAGA,EAAIH,EAAS1J,OAAQ6J,IAAK,CACxC,IAAMG,EAAUN,EAASG,GAEzBP,EAAcW,mBAAiBD,EAASF,GAExC,IAAMI,EAAmB,IAAIC,mBAAa1G,OACpCuG,GACJA,EAAQ,GAAGI,OAAOC,OAAOP,GAAcE,EAAQ,GAAGI,OAASJ,EAAQ,GAAGM,OACtEhB,GAEIiB,EAAW,IAAIC,aAAWN,GAShC,GANAJ,EAAaR,EAEa,SAACzC,GACzB,OAAOA,EAAMsC,MAAMsB,OAAM,SAAC5B,GAAI,OAAKA,aAAgBO,UAGjDsB,CAAkBH,GAAW,CAC/B,IAAM5B,EAAegC,yBAAuBJ,GAE5ClF,EAAQxC,WAAWlD,oBAAY4B,iBAAkB,CAG/CqI,EAAqBC,GAAKX,EAAkBQ,EAASG,EAAI,GAAG,GAAYe,eAAejD,QAClF,GAALkC,EAASL,EAAWrF,EACnByF,EAAqBC,GAASJ,EAAJ,EAC3Bd,EACAzD,GAAqB,IAAN2E,SAGjBxE,EAAQxC,WAAWlD,oBAAY8B,iBAAkB,CAC/CmI,EAAqBC,GAAKX,EAAiBxE,EACrC,IAANmF,EAAUL,EAAWrF,EACpByF,EAAqBC,GAASJ,EAAJ,EAC3Bc,EAAS5B,KAAKC,KAAI,SAACC,GAAI,OAAKA,EAAKlB,WACjCzC,GAAqB,IAAN2E,cEjSPgB,EAAaxF,EAAuByF,GAClD,IAAIC,EAAYD,EAAQC,UAElB/K,EAASgL,SAAOC,MAAMC,SAASJ,EAAQC,WAAW/K,OANjC,KAQnBA,GAP4B,KAOGA,IAEjC+K,EAAYC,SAAOC,MAAME,cAAcH,SAAOC,MAAMG,eAAeN,EAAQC,aAG7E1F,EAAQxC,WAAWlD,oBAAYuB,eAAgB,CAAC4J,EAASC,aAQ3CM,EAAwBhG,EAAuBN,GAEvDA,EAAQuG,UAAcvG,EAAQwG,eACxBxG,EAAQuG,SAASE,QAAUzG,EAAQwG,cAAcE,QAAQD,OAAnEvL,MACI8E,EAAQuG,UAAcvG,EAAQ2G,qBACxB3G,EAAQuG,SAASE,QAAUzG,EAAQ2G,oBAAoBF,OAAjEvL,MACI8E,EAAQ2G,qBAAyB3G,EAAQwG,eACnCxG,EAAQ2G,oBAAoBF,QAAUzG,EAAQwG,cAAcE,QAAQD,OAA9EvL,MAGI8E,EAAQuG,UACZjG,EAAQxC,WAAWlD,oBAAY0C,cAAe,CAC5C0C,EAAQuG,SAASE,MACjBG,EAAoB5G,EAAQuG,SAASxE,YAKnC/B,EAAQwG,eACZV,EAAaxF,EAASN,EAAQwG,eAG1BxG,EAAQ2G,qBACZrG,EAAQxC,WAAWlD,oBAAYyB,sBAAuB,CACpD2D,EAAQ2G,oBAAoBF,MAC5BzG,EAAQ2G,oBAAoBhG,UAAYX,EAAQ2G,oBAAoBhG,UAAYhB,EAChFK,EAAQ2G,oBAAoBzD,SAKlC,SAAS0D,EAAoBC,GAC3B,OAAQA,EAAgBC,eACtB,IAAK,6CAEL,IAAK,6CACH,OHgEoC,EG/DtC,IAAK,6CACH,OH+D6B,EG9D/B,QACE,MAAM,IAAIrI,MAAM,qCCjEAsI,aAAU,SAAAA,KAmK7B,OAnK6BA,EAGhBC,mBAAP,SAA0BC,EAA6BC,YAAAA,IAAAA,EAA2B,IAClFC,MAAMC,QAAQH,KAASA,EAAS,CAACA,IAatC,IAXA,IAW0BnG,EAXpBuG,EAAYJ,EAAOK,QAAO,SAACvH,EAAOwH,EAAC7D,GAAA,OAAS3D,EAAMyH,eAAe,aACjEvJ,EAAkC,GAApBoJ,EAAUpM,QAA6C,GAA9BoM,EAAU,GAAGtM,OAAOE,OAC3DqF,EAAU,IAAI/C,EAGhBkK,EAA6BpI,YAAUC,KAAK,GAC5CoI,EAAmBrI,YAAUC,KAAK,GAGlCqI,EAAiB,IAAIvM,IAEzBoG,EAAAC,EAAoBwF,KAAMnG,EAAAU,KAAAG,MAAE,CAAA,IAAjB5B,EAAKe,EAAAe,MAId,GAAI9B,EAAMqB,WAAa3G,wBAAgBI,SAAU,CAC/C,IAAM+M,EAAW7H,EACjB6H,EAASvJ,OAAOiC,EAAS,CAAErC,YAAAA,IAC3B,IAAM4J,EAAaD,EAASE,gBAExBF,EAAS9M,QAAUJ,eAAOqN,QACPH,EACmBI,iBACrBC,SAAQ,SAAClD,GAC1B4C,EAAeO,IAAInD,MAGrB4C,EAAeO,IAAI1I,GAIjBiI,EAA2BtE,GAAG0E,IAChCH,EAAmBA,EAAiBQ,IAAIL,EAAW/E,IAAI2E,IACvDA,EAA6BpI,YAAUC,KAAK,IAE5CmI,EAA6BA,EAA2B3E,IAAI+E,QAKzD,GAAI9H,EAAMqB,WAAa3G,wBAAgBqF,aAAc,CAC1D,IAAMqI,EAAepI,EACfqI,EAAgBD,EAAapI,MAAM0D,YAAYxC,SAASC,SACxDH,EAAiBoH,EAAapI,MAAMiB,aAAaC,SAASC,SAC1DL,EAAcsH,EAAanI,QAErBoI,GAAmBvH,EAAYwH,kBAA3CnN,MAEM2F,EAAYwH,kBAChBvC,EAAaxF,EAASO,EAAYwH,kBAGhCD,IACFV,EAAmBA,EAAiBQ,IAClC7I,YAAUC,KAAK6I,EAAapI,MAAMS,gBAAgBK,EAAYJ,mBAAmBC,SAAS/B,cAI1FoC,GAAkBF,EAAYF,WAAahB,IAC7C8H,EAA6BA,EAA2BS,IACtD7I,YAAUC,KAAK6I,EAAapI,MAAMwC,iBAAiB1B,EAAYJ,mBAAmBC,SAAS/B,cAG/FwJ,EAAa9J,OAAOiC,EAAS,CAAErC,aAAa,QAIvC,CAAA,GAAI8B,EAAMqB,WAAa3G,wBAAgB6N,WAQ5C,KAAM,sDAPN,IAAMA,EAAavI,EACnBA,EAAM1B,OAAOiC,EAAS,CAAErC,aAAa,IACrCwJ,EAA6BA,EAA2BS,IAAII,EAAWpF,SAe3E,OAHAyE,EAAeM,SAAQ,SAAClD,GACtBzE,EAAQxC,WAAWlD,oBAAYkC,MAAO,CAACiI,EAAYrF,EAAqB,OAEnEqH,EAAWwB,WAAWjI,EAASoH,EAAkBR,IAG1DH,EAMcyB,sBAAP,SAA6BvB,EAA6BC,YAAAA,IAAAA,EAA2B,IAM1F,IALA,IAK0BuB,EALtBnI,EAAU,IAAI/C,EACdmL,EAAarJ,YAAUC,KAAK,GAE1BrB,EAA+B,GAAjBgJ,EAAOhM,QAA0C,GAA3BgM,EAAO,GAAGlM,OAAOE,OAE3D0N,EAAAlH,EAAoBwF,KAAMwB,EAAAE,KAAAhH,MAAE,CAAA,IAAjB5B,EAAK0I,EAAA5G,MACd9B,EAAM1B,OAAOiC,EAAS,CAAErC,YAAAA,IACxByK,EAAaA,EAAWR,IAAInI,EAAM+H,iBAIpC,OADAxH,EAAQxC,WAAWlD,oBAAYkC,MAAO,CAAC0C,EAAaE,EAAqB,IAClEqH,EAAWwB,WAAWjI,EAASoI,EAAYxB,IAGpDH,EAMc6B,wBAAP,SACL3B,EACAjH,GAGA,IAAMM,EAAU,IAAI/C,EAEdwC,EAAsB,IAAID,EAAamH,EAAQjH,GAE/C6I,EAAgB9I,EAAMA,MAAM0D,YAAYxC,SAClC4H,EAAc3H,UAAclB,EAAQqI,kBAAhDnN,MAEI8E,EAAQqI,kBACVvC,EAAaxF,EAASN,EAAQqI,kBAGhC,IAAMS,EACFzJ,YAAUC,KADcuJ,EAAc3H,SACvBnB,EAAMA,MAAMS,gBAAgBR,EAAQS,mBAAmBC,SAAS/B,WAChE,GAGnB,OADAoB,EAAM1B,OAAOiC,EAAS,CAAErC,aAAa,IAC9B8I,EAAWwB,WAAWjI,EAASwI,EAAqB,CACzDC,SAAU/I,EAAQgJ,4BAA8B3J,YAAUC,KAAKU,EAAQgJ,kCAA+BC,KAI1GlC,EAMewB,WAAP,SACNjI,EACAwI,EACA5B,YAAAA,IAAAA,EAA2B,IAE3B,IAAQ1J,EAAqB8C,EAArB9C,SAAUC,EAAW6C,EAAX7C,OAIlB,MAAO,CAAEyL,SADQnC,EAAWoC,UAAUC,mBAFVlC,EAAO6B,SAAW,iCAAmC,yBAC5D7B,EAAO6B,SAAW,CAACvL,EAAUC,EAAQyJ,EAAO6B,UAAY,CAACvL,EAAUC,IAErEoE,MAAOiH,EAAoBO,gBAC/CtC,KAlKaA,YAAuB,IAAIuC,YAAUC,WCbxCC,WAAgBC,GAG3B,SAAAD,EAAYzO,UACV0O,EAAAC,UAAMhP,eAAOiP,YAAa5O,SAJD6O,EAAAJ,EAAAC,GAK1B,IAAA/L,EAAA8L,EAAA7L,UA0BA,OA1BAD,EAEDW,OAAA,SAAOiC,EAAuB4G,GAC5B,QAA8BpG,EAA9BU,EAAAC,EAAmBzG,KAAKD,UAAM+F,EAAAU,KAAAG,MAAE,CAAA,IAArBkI,EAAI/I,EAAAe,MACbvB,EAAQxC,WAAWlD,oBAAYmB,YAAa,CAAC8N,EAAKC,QAASD,EAAKlJ,UAAWkJ,EAAKhI,OAAQqF,EAAOjJ,eAElGP,EAEDqM,YAAA,WAEE,IADA,IAC8BtB,EAD1BuB,EAAsB,GAC1BrB,EAAAlH,EAAmBzG,KAAKD,UAAM0N,EAAAE,KAAAhH,MAC5BqI,EAASzL,KAAK,CACZ0L,aAAcT,EAAgBU,mBAC9BJ,QAHWrB,EAAA5G,MAGGiI,QACdK,UAAWxP,kBAAUyP,aAGzB,OAAOJ,GACRtM,EAEDoK,cAAA,WAEE,IADA,IAC8BuC,EAD1BC,EAAQjL,YAAUC,KAAK,GAC3BiL,EAAA9I,EAAmBzG,KAAKD,UAAMsP,EAAAE,KAAA5I,MAC5B2I,EAAQA,EAAMpC,IADDmC,EAAAxI,MACUA,OAEzB,OAAOyI,GACRd,GA/BkC3O,GACrB2O,qBAA6B,i1jBCGhCgB,WAAgBf,GAG3B,SAAAe,EAAYzP,UACV0O,EAAAC,UAAMhP,eAAO+P,WAAY1P,SAJA6O,EAAAY,EAAAf,GAK1B,IAAA/L,EAAA8M,EAAA7M,UAoCA,OApCAD,EAEDW,OAAA,SAAOiC,EAAuB4G,GAC5B,QAA8BpG,EAA9BU,EAAAC,EAAmBzG,KAAKD,UAAM+F,EAAAU,KAAAG,MAAE,CAAA,IAArBkI,EAAI/I,EAAAe,MACPqH,EAAWsB,EAAgBrB,UAAUC,mBAAmB,QAAS,CACrES,EAAKI,aACLJ,EAAKC,QACLD,EAAKa,MACLb,EAAKc,WAEPrK,EAAQxC,WACNlD,oBAAYe,WACZ,CAACkO,EAAKa,MAAOxB,EAAUW,EAAKlJ,UAAWkJ,EAAKI,aAAcJ,EAAKC,SAC/D5C,EAAOjJ,eAGZP,EAEDqM,YAAA,WAEE,IADA,IAC8BtB,EAD1BuB,EAAsB,GAC1BrB,EAAAlH,EAAmBzG,KAAKD,UAAM0N,EAAAE,KAAAhH,MAAE,CAAA,IAArBkI,EAAIpB,EAAA5G,MACbmI,EAASzL,KAAK,CACZ0L,aAAcJ,EAAKI,aACnBH,QAASD,EAAKC,QACdK,UAAWxP,kBAAUiQ,SAGzB,OAAOZ,GACRtM,EAEDoK,cAAA,WAEE,IADA,IAC8BuC,EAD1BC,EAAQjL,YAAUC,KAAK,GAC3BiL,EAAA9I,EAAmBzG,KAAKD,UAAMsP,EAAAE,KAAA5I,MAC5B2I,EAAQA,EAAMpC,IADDmC,EAAAxI,MACU6I,OAEzB,OAAOJ,GACRE,GAzCkC3P,GACrB2P,YAAuB,IAAIlB,YAAUC,+uqBCwCxCsB,WAAiBpB,GAI5B,SAAAoB,EAAY9P,UACV0O,EAAAC,UAAMhP,eAAOoQ,YAAa/P,SALA6O,EAAAiB,EAAApB,GAM3B,IAAA/L,EAAAmN,EAAAlN,UAoFA,OApFAD,EAEDW,OAAA,SAAOiC,EAAuB4G,GAC5B,IAEIgC,EAFJ6B,EAA6E/P,KAAKgQ,gBAAgBhQ,KAAKD,QAA/FkQ,EAASF,EAATE,UAAWC,EAAWH,EAAXG,YAAaC,EAAeJ,EAAfI,gBAAiBC,EAAUL,EAAVK,WAAYC,EAAWN,EAAXM,YAI3DnC,EADwB,GAAtBlO,KAAKD,OAAOE,OACH4P,EAAiB1B,UAAUC,mBAAmB,kBAAmB,CAC1E6B,EAAU,GACVC,EAAY,GACZC,EAAgB,GAChBE,EAAY,GACZ5L,IAGSoL,EAAiB1B,UAAUC,mBAAmB,2BAA4B,CACnF6B,EACAC,EACAC,EACAE,EACA5L,GACA,IAIJa,EAAQxC,WAAWlD,oBAAYY,cAAe,CAAC4P,EAAYlC,GAAWhC,EAAOjJ,cAC9EP,EAEDqM,YAAA,WAEE,IADA,IAC8BjJ,EAD1BkJ,EAAsB,GAC1BxI,EAAAC,EAAmBzG,KAAKD,UAAM+F,EAAAU,KAAAG,MAI5B,IAJ8B,IAIa8G,EAJlCoB,EAAI/I,EAAAe,MACPoI,EAAeJ,EAAKyB,SAASC,WAC7BpB,EACJN,EAAKyB,SAASE,gBAAkBX,EAAiBY,aAAe9Q,kBAAUiQ,OAASjQ,kBAAU+Q,QAC/F/C,EAAAlH,EAAsBoI,EAAKyB,SAASK,WAAOlD,EAAAE,KAAAhH,MACzCqI,EAASzL,KAAK,CACZ0L,aAAAA,EACAH,QAHcrB,EAAA5G,MAIdsI,UAAAA,IAGN,OAAOH,GACRtM,EAEDoK,cAAA,WAEE,IADA,IAC8BuC,EAD1BC,EAAQjL,YAAUC,KAAK,GAC3BiL,EAAA9I,EAAmBzG,KAAKD,UAAMsP,EAAAE,KAAA5I,MAC5B2I,EAAQA,EAAMpC,IADDmC,EAAAxI,MACUyJ,SAASZ,OAElC,OAAOJ,GACR5M,EAEOsN,gBAAA,SAAgBjQ,GAOtB,IAAIkQ,EAA0B,GAC1BC,EAA4B,GAC5BC,EAA4B,GAC5BC,EAAwB/L,YAAUC,KAAK,GACvC+L,EAA4B,GAoBhC,OAlBAtQ,EAAOkN,SAAQ,SAAC2D,WACdV,EAAY3M,KAAIsN,KAAMD,EAAMN,WAE5BH,EAAgB5M,KAAKqN,EAAMN,SAAStF,WAEpCiF,EAAU1M,KAAK,CACboC,UAAWiL,EAAME,MACjBC,qBAAsB,OAGxBX,EAAaA,EAAWlD,IAAI7I,YAAUC,KAAKsM,EAAMN,SAASZ,QAE1DW,EAAY9M,KAAK,CACfyN,YAAIC,EAAEL,EAAMN,SAASY,YAAUD,EAAI,qEACnCE,aAAKC,EAAER,EAAMN,SAASe,aAAWD,EAAI,QAIlC,CAAEnB,UAAAA,EAAWC,YAAAA,EAAaC,gBAAAA,EAAiBC,WAAAA,EAAYC,YAAAA,IAC/DR,GA1FmChQ,GACtBgQ,YAAuB,IAAIvB,YAAUC,GACpCsB,eAAe,o+ECzCnByB,WAAW7C,GAGtB,SAAA6C,EAAYvR,UACV0O,EAAAC,UAAMhP,eAAOmB,MAAOd,SAJA6O,EAAA0C,EAAA7C,GAKrB,IAAA/L,EAAA4O,EAAA3O,UAqCA,OArCAD,EAEDW,OAAA,SAAOiC,EAAuB4G,GAC5B,QAA+BpG,EAA/BU,EAAAC,EAAoBzG,KAAKD,UAAM+F,EAAAU,KAAAG,MAAE,CAAA,IAAtBiK,EAAK9K,EAAAe,MACRqH,EAAWoD,EAAWnD,UAAUC,mBAAmB,YAAa,CACpEwC,EAAM3B,aACN2B,EAAMW,SACNX,EAAMY,aACNZ,EAAMjL,UACNiL,EAAM3L,IACN2L,EAAMa,OAERnM,EAAQxC,WAAWlD,oBAAYiB,MAAO,CAAC+P,EAAM/J,MAAOqH,GAAWhC,EAAOjJ,eAEzEP,EAEDqM,YAAA,WAEE,IADA,IAC8BtB,EAD1BuB,EAAsB,GAC1BrB,EAAAlH,EAAmBzG,KAAKD,UAAM0N,EAAAE,KAAAhH,MAC5B,IAD8B,IACK0I,EAD1BvG,EAAI2E,EAAA5G,MACb0I,EAAA9I,EAAsBqC,EAAKyI,YAAQlC,EAAAE,KAAA5I,MACjCqI,EAASzL,KAAK,CACZ0L,aAAcnG,EAAKmG,aACnBH,QAHcO,EAAAxI,MAIdsI,UAAWxP,kBAAUiQ,SAK3B,OAAOZ,GACRtM,EAEDoK,cAAA,WAEE,IADA,IAC8B4E,EAD1BpC,EAAQjL,YAAUC,KAAK,GAC3BqN,EAAAlL,EAAmBzG,KAAKD,UAAM2R,EAAAC,KAAAhL,MAC5B2I,EAAQA,EAAMpC,IADDwE,EAAA7K,MACUA,OAEzB,OAAOyI,GACRgC,GA1C6BzR,GAChByR,YAAuB,IAAIhD,YAAUC,8oMCFxCqD,WAAUnD,GAGrB,SAAAmD,EAAY7R,UACV0O,EAAAC,UAAMhP,eAAOa,KAAMR,SAJA6O,EAAAgD,EAAAnD,GAKpB,IAAA/L,EAAAkP,EAAAjP,UAoCA,OApCAD,EAEDW,OAAA,SAAOiC,EAAuB4G,GAC5B,QAA+BpG,EAA/BU,EAAAC,EAAoBzG,KAAKD,UAAM+F,EAAAU,KAAAG,MAAE,CAAA,IAAtBiK,EAAK9K,EAAAe,MACRqH,EAAW0D,EAAUzD,UAAUC,mBAAmB,eAAgB,CACtEwC,EAAMiB,QACNjB,EAAMW,SAAStR,OACf2Q,EAAMW,SACNX,EAAMkB,aACNlB,EAAMjL,YAGRL,EAAQxC,WAAWlD,oBAAYW,KAAM,CAACqQ,EAAM/J,MAAOqH,GAAWhC,EAAOjJ,eAExEP,EAEDqM,YAAA,WAEE,IADA,IAC+BtB,EAD3BuB,EAAsB,GAC1BrB,EAAAlH,EAAoBzG,KAAKD,UAAM0N,EAAAE,KAAAhH,MAC7B,IAD+B,IACK0I,EAD3BuB,EAAKnD,EAAA5G,MACd0I,EAAA9I,EAAsBmK,EAAMW,YAAQlC,EAAAE,KAAA5I,MAClCqI,EAASzL,KAAK,CACZ0L,aAAc2B,EAAM3B,aACpBH,QAHcO,EAAAxI,MAIdsI,UAAWxP,kBAAUiQ,SAI3B,OAAOZ,GACRtM,EAEDoK,cAAA,WAEE,IADA,IAC8B4E,EAD1BpC,EAAQjL,YAAUC,KAAK,GAC3BqN,EAAAlL,EAAmBzG,KAAKD,UAAM2R,EAAAC,KAAAhL,MAC5B2I,EAAQA,EAAMpC,IADDwE,EAAA7K,MACUA,OAEzB,OAAOyI,GACRsC,GAzC4B/R,GACf+R,YAAuB,IAAItD,YAAUC,mr6BCgDxCwD,WAAatD,GAIxB,SAAAsD,EAAYhS,UACV0O,EAAAC,UAAMhP,eAAOqN,QAAShN,SALA6O,EAAAmD,EAAAtD,GAMvB,IAAA/L,EAAAqP,EAAApP,UAqKA,OArKAD,EAEDW,OAAA,SAAOiC,EAAuB4G,GAC5B,QAA+BpG,EAA/BU,EAAAC,EAAoBzG,KAAKD,UAAM+F,EAAAU,KAAAG,MAAE,CAO/B,IAP+B,IAOD8G,EAPrBmD,EAAK9K,EAAAe,MACVmL,EAAkC,GAClCC,EAA8CrB,EAAMsB,MAAMrJ,KAAI,SAAC0D,EAAG4F,GAAK,MAAK,CAC9E,CAAEC,WAAYD,EAAOE,UAAW,OAE9BC,EAAsDtS,KAAKuS,6BAA6B3B,EAAMsB,OAElGvE,EAAAlH,EAAmBmK,EAAMsB,SAAKzE,EAAAE,KAAAhH,MAAE,CAAA,IAC9B6L,EAA0BxS,KAAKyS,uBADlBhF,EAAA5G,OAEbmL,EAAezO,KADMiP,EAAbE,eAIV,IAAIxE,EAoBJ,GAlBEA,EAD2B,GAAzB8D,EAAe/R,OACN8R,EAAa5D,UAAUC,mBAAmB,uBAAwB,CAC3E4D,EAAe,GACf,GACAD,EAAaY,oBACb/B,EAAMjL,YAGGoM,EAAa5D,UAAUC,mBAAmB,iCAAkC,CACrF4D,EACA,GACAC,EACAK,EACAP,EAAaY,oBACb/B,EAAMjL,UACN,MAIEiL,EAAMgC,qBACV,QAAmDvD,EAAnDE,EAAA9I,EAAyBmK,EAAMgC,wBAAoBvD,EAAAE,KAAA5I,MACjD,CAAA,IADSoD,EAAUsF,EAAAxI,MACnByE,EAAwBhG,EAAS,CAC/BiG,SAAUxB,EAAW8I,iBACjB,CAAEpH,MAAO1B,EAAW0B,MAAO1E,SAAU6J,EAAM/E,sBAC3CoC,EACJzC,cAAezB,EAAWyB,cAC1BG,oBAAqB5B,EAAW4B,oBAC5B,CAAEF,MAAO1B,EAAW0B,MAAOvD,OAAQlI,KAAK8S,mBAAmBlC,EAAO7G,EAAW0B,OAAO9H,iBACpFsK,IAIV3I,EAAQxC,WACN9C,KAAK+S,WAAWnC,EAAM/E,iBACtB,CAAC7L,KAAK8S,mBAAmBlC,EAAOpM,GAAab,WAAYuK,GACzDhC,EAAOjJ,eAGZP,EAEDqM,YAAA,WAEE,IADA,IAC+B2C,EAD3B1C,EAAsB,GAC1B2C,EAAAlL,EAAoBzG,KAAKD,UAAM2R,EAAAC,KAAAhL,MAC7B,IAD+B,IACDqM,EAA9BC,EAAAxM,EADciL,EAAA7K,MACWqL,SAAKc,EAAAC,KAAAtM,MAC5B,IAD8B,IACWuM,EAAzCC,EAAA1M,EADauM,EAAAnM,MACY7D,WAAWoQ,SAAKF,EAAAC,KAAAxM,MAAE,CAAA,IAAhCyM,EAAKF,EAAArM,MACdmI,EAASzL,KAAK,CACZ0L,aAAcmE,EAAM3H,MACpBqD,QAASsE,EAAMC,qBACflE,UAAWxP,kBAAUiQ,SAK7B,OAAOZ,GACRtM,EAEDsK,eAAA,WAEE,IADA,IAC+BsG,EAD3BC,EAAc,IAAInT,IACtBoT,EAAA/M,EAAoBzG,KAAKD,UAAMuT,EAAAE,KAAA7M,MAC7B,IAD+B,IACD8M,EAA9BC,EAAAjN,EADc6M,EAAAzM,MACWqL,SAAKuB,EAAAC,KAAA/M,MAC5B,IAD8B,IAC2BgN,EAAzDC,EAAAnN,EADagN,EAAA5M,MACoB7D,WAAW6Q,iBAAaF,EAAAC,KAAAjN,MAAE,CAAA,IACnD8E,EADgBkI,EAAA9M,MACM4E,MAAMK,cAClCyH,EAAYrG,IAAIzB,GAItB,OAAO8H,GACR7Q,EAEDoQ,mBAAA,SAAmBlC,EAAoBnF,YAAAA,IAAAA,EAAgBjH,GAErD,IADA,IAC8BsP,EAD1BC,EAAkB1P,YAAUC,KAAK,GACrC0P,EAAAvN,EAAmBmK,EAAMsB,SAAK4B,EAAAE,KAAArN,MAC5BoN,EAAkBA,EAAgB7G,IAAIlN,KAAKiU,eAD9BH,EAAAjN,MACkD7D,WAAW6Q,cAAepI,IAE3F,OAAOsI,GACRrR,EAEDoK,cAAA,SAAcrB,YAAAA,IAAAA,EAAgBjH,GAE5B,IADA,IAC+B0P,EAD3BxG,EAAarJ,YAAUC,KAAK,GAChC6P,EAAA1N,EAAoBzG,KAAKD,UAAMmU,EAAAC,KAAAxN,MAC7B,IAD+B,IACDyN,EAA9BC,EAAA5N,EADcyN,EAAArN,MACWqL,SAAKkC,EAAAC,KAAA1N,MAC5B+G,EAAaA,EAAWR,IAAIlN,KAAKiU,eADpBG,EAAAvN,MACwC7D,WAAW6Q,cAAepI,IAGnF,OAAOiC,GACRhL,EAEOqQ,WAAA,SAAWlH,GACjB,OAAQA,EAAgBC,eACtB,IAAK,6CACH,OAAOlM,oBAAYS,aACrB,IAAK,6CACH,OAAOT,oBAAYU,aACrB,QACE,MAAM,IAAImD,MAAM,iCAErBf,EAEO6P,6BAAA,SAA6B+B,GACnC,IAAIC,EAAsD,GACpDC,EAAoC,GAE1C,IAAK,IAAM1K,KAAKwK,EAAe,CAC7B,IAAMG,EAAeH,EAAcxK,GAAE4K,aAGnC,IAAM7F,EAAO4F,EAAazR,WAAW6Q,cAAcc,IAEqB,IAApEH,EAAwBI,WAAU,SAACC,GAAC,OAAKA,IAAMhG,EAAKlJ,cACtD6O,EAAwBjR,KAAKsL,EAAKlJ,WAGpC,IAAMmP,EAAiBN,EAAwBI,WAAU,SAACC,GAAC,OAAKA,IAAMhG,EAAKlJ,aAEtE4O,EAA0BO,GAQ7BP,EAA0BO,GAAgBvR,KAAK,CAC7C6O,WAAYtI,EACZuI,UAAWsC,IATbJ,EAA0BhR,KAAK,CAC7B,CACE6O,WAAYtI,EACZuI,UAAWsC,MAbnB,IAAK,IAAMA,KAAKF,EAAazR,WAAW6Q,cAAaa,IAwBvD,OAAOH,GACR7R,EAEO+P,uBAAA,SAAuBsC,GAQ7B,MAAO,CAAErC,cAPa,CACpB1P,WAAY+R,EAAK/R,WACjBgS,UAAW3Q,YAAUC,KAAK,KAC1B2Q,YAAa5Q,YAAUC,KAAK,KAC5B0G,UAAW+J,EAAK/J,UAChBkK,UAAW,UAGdxS,EAEOuR,eAAA,SAAekB,EAAqC1J,GAC1D,OAAO0J,EAAeC,QACpB,SAACC,EAAgBxB,GAAgC,OAC/CA,EAAcpI,MAAMK,eAAiBL,EAAMK,cAAgBuJ,EAAInI,IAAI2G,EAAcyB,aAAeD,IAClGhR,YAAUC,KAAK,KAElByN,GA3K+BlS,GAClBkS,YAAuB,IAAIzD,YAAUC,GACrCwD,sBAA8B,mkbC5CjCwD,WAAc9G,GAGzB,SAAA8G,EAAYxV,UACV0O,EAAAC,UAAMhP,eAAO8V,SAAUzV,SAJA6O,EAAA2G,EAAA9G,GAKxB,IAAA/L,EAAA6S,EAAA5S,UA2CA,OA3CAD,EAEDW,OAAA,SAAOiC,EAAuB4G,GAC5B,QAA+BpG,EAA/BU,EAAAC,EAAoBzG,KAAKD,UAAM+F,EAAAU,KAAAG,MAAE,CAAA,IAAtBiK,EAAK9K,EAAAe,MACRqH,EAAWqH,EAAcpH,UAAUC,mBAAmB,+BAAgC,CAC1FwC,EAAMlK,MAAMmC,KAAI,SAACjC,GACf,MAAO,CAAE6O,SAAU7O,EAAK6O,SAAUC,QAAS9O,EAAK8O,YAElD9E,EAAM+E,aACN/E,EAAMgF,aACNhF,EAAM7C,WAEFlH,EAAQ+J,EAAMlK,MAAM0O,QAAO,SAACS,EAASjP,GACzC,OAAOiP,EAAQ3I,IAAItG,EAAK8O,WACvBrR,YAAUC,KAAK,IAClBgB,EAAQxC,WAAWlD,oBAAYgB,SAAU,CAACiG,EAAOqH,GAAWhC,EAAOjJ,eAEtEP,EAEDqM,YAAA,WAEE,IADA,IAC+BtB,EAD3BuB,EAAsB,GAC1BrB,EAAAlH,EAAoBzG,KAAKD,UAAM0N,EAAAE,KAAAhH,MAC7B,IAD+B,IACD0I,EAA9BE,EAAA9I,EADcgH,EAAA5G,MACWH,SAAK2I,EAAAE,KAAA5I,MAC5B,IAD8B,IACY+K,EADjC9K,EAAIyI,EAAAxI,MACb8K,EAAAlL,EAAsBG,EAAK6O,SAASK,UAAMpE,EAAAC,KAAAhL,MACxCqI,EAASzL,KAAK,CACZ0L,aAAcrI,EAAKqI,aACnBH,QAHc4C,EAAA7K,MAIdsI,UAAWxP,kBAAUiQ,SAK7B,OAAOZ,GACRtM,EAEDoK,cAAA,WAEE,IADA,IAC+BkG,EAD3B1D,EAAQjL,YAAUC,KAAK,GAC3B2O,EAAAxM,EAAoBzG,KAAKD,UAAMiT,EAAAC,KAAAtM,MAC7B,IAD+B,IACDuM,EAA9BC,EAAA1M,EADcuM,EAAAnM,MACWH,SAAKwM,EAAAC,KAAAxM,MAC5B2I,EAAQA,EAAMpC,IADDgG,EAAArM,MACU6O,SAG3B,OAAOpG,GACRiG,GAhDgC1V,GACnB0V,YAAuB,IAAIjH,YAAUC,22WCExCwH,YAAUtH,GAGrB,SAAAsH,EAAYhW,UACV0O,EAAAC,UAAMhP,eAAOsW,KAAMjW,SAJA6O,EAAAmH,EAAAtH,GAKpB,IAAA/L,EAAAqT,EAAApT,UAyCA,OAzCAD,EAEDW,OAAA,SAAOiC,EAAuB4G,GAC5B,QAA8BpG,EAA9BU,EAAAC,EAAmBzG,KAAKD,UAAM+F,EAAAU,KAAAG,MAAE,CAAA,IAArBkI,EAAI/I,EAAAe,MAEPqH,EADmB6H,EAAU5H,UAAU8H,WAAWF,EAAU5H,UAAU+H,YAAY,QACpDrH,EAAKsH,YAAYC,MAAM,GAEvDvH,EAAKM,WAAaxP,kBAAUiQ,OAC9BtK,EAAQxC,WACNlD,oBAAYa,SACZ,CAACoO,EAAKa,MAAOxB,EAAUW,EAAKlJ,UAAWkJ,EAAKI,aAAcJ,EAAKC,SAC/D5C,EAAOjJ,aAEA4L,EAAKM,WAAaxP,kBAAU+Q,SACrCpL,EAAQxC,WACNlD,oBAAYc,UACZ,CAACmO,EAAKa,MAAOxB,EAAUW,EAAKlJ,UAAWkJ,EAAKI,aAAcJ,EAAKC,QAASD,EAAKwH,aAC7EnK,EAAOjJ,eAIdP,EAEDqM,YAAA,WAEE,IADA,IAC8BtB,EAD1BuB,EAAsB,GAC1BrB,EAAAlH,EAAmBzG,KAAKD,UAAM0N,EAAAE,KAAAhH,MAAE,CAAA,IAArBkI,EAAIpB,EAAA5G,MACbmI,EAASzL,KAAK,CACZ0L,aAAcJ,EAAKI,aACnBH,QAASD,EAAKC,QACdK,UAAWN,EAAKM,YAGpB,OAAOH,GACRtM,EAEDoK,cAAA,WAEE,IADA,IAC8BuC,EAD1BC,EAAQjL,YAAUC,KAAK,GAC3BiL,EAAA9I,EAAmBzG,KAAKD,UAAMsP,EAAAE,KAAA5I,MAC5B2I,EAAQA,EAAMpC,IADDmC,EAAAxI,MACU6I,OAEzB,OAAOJ,GACRyG,GA9C4BlW,GACfkW,aAAuB,IAAIzH,YAAUC,QCVzC+H,GCVChJ,cAMX,SAAAA,EAAYpF,EAAsB/D,EAAiB4G,GAL1C/K,eAA6BP,wBAAgB6N,WAMpDtN,KAAKuW,YAAcrS,EAAaC,GAChCnE,KAAKkI,OAASA,EAER6C,IAEFA,EAAQW,QAAQD,MAAMK,gBAAkB9L,KAAKuW,YAAYzK,eAD3D5L,MAIU6K,EAAQW,QAAQxD,QAAUA,GAApChI,MACAF,KAAKwW,YAAczL,GAatB,OAXAuC,EAAA3K,UAEDU,OAAA,SAAOiC,EAAuBiH,GAC5BjB,EAAwBhG,EAAS,CAC/BkG,cAAexL,KAAKwW,YACpB7K,oBAAqB,CACnBF,MAAOzL,KAAKuW,YACZrO,OAAQlI,KAAKkI,OAAOvE,cAGxB2B,EAAQxC,WAAWlD,oBAAYiC,YAAa,CAAC8C,EAAqB3E,KAAKkI,UACxEoF,MDnBSgJ,GAAAA,mBAAAA,uCAEVA,wBAgDWG,GAAmB,SAAC7O,GAAe,OAC9CA,EAAQkE,gBAAkBtH,EAAYsH,eAAiBlE,EAAQkE,gBbwEpC,6CaxEoEA,eAIpF4K,cAAkB,SAAAA,KAoI5B,OAnIDA,EACOC,iBAAP,SAAwBC,GACtB,IAAQ9P,EAA6B8P,EAA7B9P,MAAO+P,EAAsBD,EAAtBC,QAASC,EAAaF,EAAbE,SAExB,IAAKhQ,EAAO,MAAM,IAAIrD,MAAM,gCAC5B,IAAKqD,EAAM7G,OAAQ,MAAM,IAAIwD,MAAM,2CACnC,GAAIqD,EAAMiQ,MAAK,SAACC,GAAC,OAAMA,EAAE/W,UAAS,MAAM,IAAIwD,MAAM,iDAClD,IAAMwT,EAAanQ,EAAM,GAEnBoQ,EAAcD,EAAW,GAAGJ,QAC5BM,EAAeF,EAAWA,EAAWhX,OAAS,GAAG6W,SAEvD,IAAKI,IAAgBC,EAAc,MAAM,IAAI1T,MAAM,oDACnD,GAAIyT,EAAY/S,UAAYgT,EAAahT,QACvC,MAAM,IAAIV,MAAM,yDAElB,IAAM2T,EAAmBV,EAAmBW,WAAWZ,GAAiBI,GAAUK,GAC5EI,EAAoBZ,EAAmBW,WAAWZ,GAAiBK,GAAWK,GAE9EI,EAA6BzQ,EAAM+B,KAAI,SAAC2O,GAC5C,IAAMC,EAAcD,EAAS,GAAG/N,SAC1BiO,EAAeF,EAASA,EAASvX,OAAS,GAAGyJ,UAEnD,IAAK+N,IAAgBC,EACnB,MAAM,IAAIjU,MAAM,8DAGlB,IAAMgF,EAAckP,iBAAeC,cAAcR,EAAkBK,GAC7DzR,EAAe2R,iBAAeC,cAAcN,EAAmBI,GAE/DG,EAAWnB,EAAmBoB,iBAAgCxB,iBAASyB,OAAQP,GAC/EQ,EAAWtB,EAAmBoB,iBAAgCxB,iBAAS2B,OAAQT,GAErF,MAAO,CACLU,QAASF,EACL,IAAIG,QACDX,EAA6B3O,IAAI6N,EAAmB0B,QACrDhB,EACAE,GAEF,KACJe,QAASR,EACL,IAAIS,QACDd,EAA6B3O,IAAI6N,EAAmB6B,QACrDnB,EACAE,GAEF,KACJkB,WACGR,GAAaH,EAEV,KADA,IAAIzN,gBAAcoN,EAAS3O,IAAI6N,EAAmB+B,cAAerB,EAAkBE,GAEzF7O,YAAAA,EACAzC,aAAAA,MAIJ,OAAO,IAAI0S,QAAY,CACrBC,SAAUpB,EACPjL,QAAO,SAACxF,GAAK,OAAKA,EAAMuR,WACxBxP,KAAI,SAAC/B,GAAK,MAAM,CACfuR,QAASvR,EAAMuR,QACf5P,YAAa3B,EAAM2B,YACnBzC,aAAcc,EAAMd,iBAExB4S,SAAUrB,EACPjL,QAAO,SAACxF,GAAK,OAAKA,EAAMoR,WACxBrP,KAAI,SAAC/B,GAAK,MAAM,CACfoR,QAASpR,EAAMoR,QACfzP,YAAa3B,EAAM2B,YACnBzC,aAAcc,EAAMd,iBAExB6S,YAAatB,EACVjL,QAAO,SAACxF,GAAK,OAAKA,EAAM0R,cACxB3P,KAAI,SAAC/B,GAAK,MAAM,CACf0R,WAAY1R,EAAM0R,WAClB/P,YAAa3B,EAAM2B,YACnBzC,aAAcc,EAAMd,iBAExBI,UAAWwQ,EAAMxQ,aAEpBsQ,EAEcW,WAAP,SAAkBnR,EAAmBuF,GAC3C,OAAIvF,EACK4S,QAAMC,QAAQtN,EAAMtH,SAEtBnE,KAAKgZ,QAAQvN,IACrBiL,EAMcsC,QAAP,SAAevN,GACrB,IAAoCwN,EAAkCxN,EAAlCwN,OAAQC,EAA0BzN,EAA1ByN,UAAWC,EAAe1N,EAAf0N,WACvD,OAAO,IAAIC,QAD2D3N,EAA9DtH,QAA8DsH,EAArD7D,QAIfyR,SAJoE5N,EAA5C6N,SAIN3V,YAClBsV,OACWhL,GACX,EACAiL,EAAY7U,YAAUC,KAAK4U,QAAajL,EACxCkL,EAAa9U,YAAUC,KAAK6U,QAAclL,IAE7CyI,EAEc0B,OAAP,SAAA1P,OAAgBzD,EAAGyD,EAAHzD,IAAKsU,EAAY7Q,EAAZ6Q,aAAcC,EAAS9Q,EAAT8Q,UAAWC,EAAW/Q,EAAX+Q,YAAsB3C,EAAQpO,EAARoO,SAC1E,OAAO,IAAIzN,OACTqN,EAAmBsC,QAFmDtQ,EAAPmO,SAG/DH,EAAmBsC,QAAQlC,GAC3BuC,SAASpU,GACTsU,EACAC,EACAH,SAASI,KAEZ/C,EAScoB,iBAAP,SACN/U,EACA+D,GAEA,OAAOA,EAAM4D,OAAM,SAAC5B,GAAI,OAAKA,EAAK/F,OAASA,MAC5C2T,KAzCcA,gBAAe,SAAC5N,GAC7B,OAAOA,EAAK/F,OAASuT,iBAAS2B,OAASvB,GAAmB0B,OAAOtP,GAAQ4N,GAAmB6B,OAAOzP,IA4BtF4N,UAAS,SAAA3N,OAAG2Q,EAAQ3Q,EAAR2Q,SAAUC,EAAQ5Q,EAAR4Q,SACnC,OAAO,IAAIrQ,OACTqO,iBAAeC,cAAclB,GAAmBsC,QAAQU,EAASjO,OAAQiO,EAAShU,UAClFiS,iBAAeC,cAAclB,GAAmBsC,QAAQW,EAASlO,OAAQkO,EAASjU,+Kb3DzD,qOAlBS,SAACvB,GACvC,KAAMA,KAAWN,GAAgB,MAAM,IAAIJ,gDAAgDU,GAC3F,OAAON,EAAcM,GAASJ,gDAGe,SAACI,GAC9C,KAAMA,KAAWN,GAAgB,MAAM,IAAIJ,gDAAgDU,GAC3F,OAAON,EAAcM,GAASF"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
deleted file mode 100644
index 90f6af2..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
+++ /dev/null
@@ -1,10714 +0,0 @@
-import invariant from 'tiny-invariant';
-import { abi as abi$7 } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json';
-import { Interface } from '@ethersproject/abi';
-import { BigNumber, ethers } from 'ethers';
-import { defaultAbiCoder } from 'ethers/lib/utils';
-import { Trade, Pair, Route as Route$1 } from '@uniswap/v2-sdk';
-import { toHex, Trade as Trade$1, encodeRouteToPath, Pool, Route } from '@uniswap/v3-sdk';
-import { Protocol, MixedRouteTrade, partitionMixedRouteByProtocol, getOutputOfPools, MixedRouteSDK, MixedRoute, encodeMixedRouteToPath, Trade as Trade$2 } from '@uniswap/router-sdk';
-import { TradeType, Percent, CurrencyAmount, Ether, Token } from '@uniswap/sdk-core';
-import 'jsbi';
-import 'bignumber.js';
-
-function _toPrimitive(t, r) {
-  if ("object" != typeof t || !t) return t;
-  var e = t[Symbol.toPrimitive];
-  if (void 0 !== e) {
-    var i = e.call(t, r || "default");
-    if ("object" != typeof i) return i;
-    throw new TypeError("@@toPrimitive must return a primitive value.");
-  }
-  return ("string" === r ? String : Number)(t);
-}
-function _toPropertyKey(t) {
-  var i = _toPrimitive(t, "string");
-  return "symbol" == typeof i ? i : String(i);
-}
-function _defineProperties(target, props) {
-  for (var i = 0; i < props.length; i++) {
-    var descriptor = props[i];
-    descriptor.enumerable = descriptor.enumerable || false;
-    descriptor.configurable = true;
-    if ("value" in descriptor) descriptor.writable = true;
-    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
-  }
-}
-function _createClass(Constructor, protoProps, staticProps) {
-  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
-  if (staticProps) _defineProperties(Constructor, staticProps);
-  Object.defineProperty(Constructor, "prototype", {
-    writable: false
-  });
-  return Constructor;
-}
-function _extends() {
-  _extends = Object.assign ? Object.assign.bind() : function (target) {
-    for (var i = 1; i < arguments.length; i++) {
-      var source = arguments[i];
-      for (var key in source) {
-        if (Object.prototype.hasOwnProperty.call(source, key)) {
-          target[key] = source[key];
-        }
-      }
-    }
-    return target;
-  };
-  return _extends.apply(this, arguments);
-}
-function _inheritsLoose(subClass, superClass) {
-  subClass.prototype = Object.create(superClass.prototype);
-  subClass.prototype.constructor = subClass;
-  _setPrototypeOf(subClass, superClass);
-}
-function _setPrototypeOf(o, p) {
-  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
-    o.__proto__ = p;
-    return o;
-  };
-  return _setPrototypeOf(o, p);
-}
-function _unsupportedIterableToArray(o, minLen) {
-  if (!o) return;
-  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
-  var n = Object.prototype.toString.call(o).slice(8, -1);
-  if (n === "Object" && o.constructor) n = o.constructor.name;
-  if (n === "Map" || n === "Set") return Array.from(o);
-  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
-}
-function _arrayLikeToArray(arr, len) {
-  if (len == null || len > arr.length) len = arr.length;
-  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
-  return arr2;
-}
-function _createForOfIteratorHelperLoose(o, allowArrayLike) {
-  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
-  if (it) return (it = it.call(o)).next.bind(it);
-  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
-    if (it) o = it;
-    var i = 0;
-    return function () {
-      if (i >= o.length) return {
-        done: true
-      };
-      return {
-        done: false,
-        value: o[i++]
-      };
-    };
-  }
-  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
-}
-
-var RouterTradeType;
-(function (RouterTradeType) {
-  RouterTradeType["UniswapTrade"] = "UniswapTrade";
-  RouterTradeType["NFTTrade"] = "NFTTrade";
-  RouterTradeType["UnwrapWETH"] = "UnwrapWETH";
-})(RouterTradeType || (RouterTradeType = {}));
-
-var NFTTrade = function NFTTrade(market, orders) {
-  this.tradeType = RouterTradeType.NFTTrade;
-  !(orders.length > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, 'no buy Items') : invariant(false) : void 0;
-  this.market = market;
-  this.orders = orders;
-};
-var Market;
-(function (Market) {
-  Market["Foundation"] = "foundation";
-  Market["LooksRareV2"] = "looksrareV2";
-  Market["NFT20"] = "nft20";
-  Market["NFTX"] = "nftx";
-  Market["Seaport"] = "seaport";
-  Market["Sudoswap"] = "Sudoswap";
-  Market["Cryptopunks"] = "cryptopunks";
-  Market["X2Y2"] = "x2y2";
-  Market["Element"] = "element";
-})(Market || (Market = {}));
-var TokenType;
-(function (TokenType) {
-  TokenType["ERC721"] = "ERC721";
-  TokenType["ERC1155"] = "ERC1155";
-  TokenType["Cryptopunk"] = "Cryptopunk";
-})(TokenType || (TokenType = {}));
-
-var _ABI_DEFINITION;
-/**
- * CommandTypes
- * @description Flags that modify a command's execution
- * @enum {number}
- */
-var CommandType;
-(function (CommandType) {
-  CommandType[CommandType["V3_SWAP_EXACT_IN"] = 0] = "V3_SWAP_EXACT_IN";
-  CommandType[CommandType["V3_SWAP_EXACT_OUT"] = 1] = "V3_SWAP_EXACT_OUT";
-  CommandType[CommandType["PERMIT2_TRANSFER_FROM"] = 2] = "PERMIT2_TRANSFER_FROM";
-  CommandType[CommandType["PERMIT2_PERMIT_BATCH"] = 3] = "PERMIT2_PERMIT_BATCH";
-  CommandType[CommandType["SWEEP"] = 4] = "SWEEP";
-  CommandType[CommandType["TRANSFER"] = 5] = "TRANSFER";
-  CommandType[CommandType["PAY_PORTION"] = 6] = "PAY_PORTION";
-  CommandType[CommandType["V2_SWAP_EXACT_IN"] = 8] = "V2_SWAP_EXACT_IN";
-  CommandType[CommandType["V2_SWAP_EXACT_OUT"] = 9] = "V2_SWAP_EXACT_OUT";
-  CommandType[CommandType["PERMIT2_PERMIT"] = 10] = "PERMIT2_PERMIT";
-  CommandType[CommandType["WRAP_ETH"] = 11] = "WRAP_ETH";
-  CommandType[CommandType["UNWRAP_WETH"] = 12] = "UNWRAP_WETH";
-  CommandType[CommandType["PERMIT2_TRANSFER_FROM_BATCH"] = 13] = "PERMIT2_TRANSFER_FROM_BATCH";
-  CommandType[CommandType["BALANCE_CHECK_ERC20"] = 14] = "BALANCE_CHECK_ERC20";
-  // NFT-related command types
-  CommandType[CommandType["SEAPORT_V1_5"] = 16] = "SEAPORT_V1_5";
-  CommandType[CommandType["LOOKS_RARE_V2"] = 17] = "LOOKS_RARE_V2";
-  CommandType[CommandType["NFTX"] = 18] = "NFTX";
-  CommandType[CommandType["CRYPTOPUNKS"] = 19] = "CRYPTOPUNKS";
-  // 0x14
-  CommandType[CommandType["OWNER_CHECK_721"] = 21] = "OWNER_CHECK_721";
-  CommandType[CommandType["OWNER_CHECK_1155"] = 22] = "OWNER_CHECK_1155";
-  CommandType[CommandType["SWEEP_ERC721"] = 23] = "SWEEP_ERC721";
-  CommandType[CommandType["X2Y2_721"] = 24] = "X2Y2_721";
-  CommandType[CommandType["SUDOSWAP"] = 25] = "SUDOSWAP";
-  CommandType[CommandType["NFT20"] = 26] = "NFT20";
-  CommandType[CommandType["X2Y2_1155"] = 27] = "X2Y2_1155";
-  CommandType[CommandType["FOUNDATION"] = 28] = "FOUNDATION";
-  CommandType[CommandType["SWEEP_ERC1155"] = 29] = "SWEEP_ERC1155";
-  CommandType[CommandType["ELEMENT_MARKET"] = 30] = "ELEMENT_MARKET";
-  CommandType[CommandType["SEAPORT_V1_4"] = 32] = "SEAPORT_V1_4";
-  CommandType[CommandType["EXECUTE_SUB_PLAN"] = 33] = "EXECUTE_SUB_PLAN";
-  CommandType[CommandType["APPROVE_ERC20"] = 34] = "APPROVE_ERC20";
-})(CommandType || (CommandType = {}));
-var ALLOW_REVERT_FLAG = 0x80;
-var REVERTIBLE_COMMANDS = /*#__PURE__*/new Set([CommandType.SEAPORT_V1_5, CommandType.SEAPORT_V1_4, CommandType.NFTX, CommandType.LOOKS_RARE_V2, CommandType.X2Y2_721, CommandType.X2Y2_1155, CommandType.FOUNDATION, CommandType.SUDOSWAP, CommandType.NFT20, CommandType.EXECUTE_SUB_PLAN, CommandType.CRYPTOPUNKS, CommandType.ELEMENT_MARKET]);
-var PERMIT_STRUCT = '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)';
-var PERMIT_BATCH_STRUCT = '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)';
-var PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)';
-var PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]';
-var ABI_DEFINITION = (_ABI_DEFINITION = {}, _ABI_DEFINITION[CommandType.EXECUTE_SUB_PLAN] = ['bytes', 'bytes[]'], _ABI_DEFINITION[CommandType.PERMIT2_PERMIT] = [PERMIT_STRUCT, 'bytes'], _ABI_DEFINITION[CommandType.PERMIT2_PERMIT_BATCH] = [PERMIT_BATCH_STRUCT, 'bytes'], _ABI_DEFINITION[CommandType.PERMIT2_TRANSFER_FROM] = ['address', 'address', 'uint160'], _ABI_DEFINITION[CommandType.PERMIT2_TRANSFER_FROM_BATCH] = [PERMIT2_TRANSFER_FROM_BATCH_STRUCT], _ABI_DEFINITION[CommandType.V3_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[CommandType.V3_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[CommandType.V2_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[CommandType.V2_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[CommandType.WRAP_ETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.UNWRAP_WETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP_ERC721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP_ERC1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.TRANSFER] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.PAY_PORTION] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.BALANCE_CHECK_ERC20] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.OWNER_CHECK_721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.OWNER_CHECK_1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.APPROVE_ERC20] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.SEAPORT_V1_5] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.SEAPORT_V1_4] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.NFTX] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.LOOKS_RARE_V2] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.X2Y2_721] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.X2Y2_1155] = ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.FOUNDATION] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SUDOSWAP] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.NFT20] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.CRYPTOPUNKS] = ['uint256', 'address', 'uint256'], _ABI_DEFINITION[CommandType.ELEMENT_MARKET] = ['uint256', 'bytes'], _ABI_DEFINITION);
-var RoutePlanner = /*#__PURE__*/function () {
-  function RoutePlanner() {
-    this.commands = '0x';
-    this.inputs = [];
-  }
-  var _proto = RoutePlanner.prototype;
-  _proto.addSubPlan = function addSubPlan(subplan) {
-    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true);
-  };
-  _proto.addCommand = function addCommand(type, parameters, allowRevert) {
-    if (allowRevert === void 0) {
-      allowRevert = false;
-    }
-    var command = createCommand(type, parameters);
-    this.inputs.push(command.encodedInput);
-    if (allowRevert) {
-      if (!REVERTIBLE_COMMANDS.has(command.type)) {
-        throw new Error("command type: " + command.type + " cannot be allowed to revert");
-      }
-      command.type = command.type | ALLOW_REVERT_FLAG;
-    }
-    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'));
-  };
-  return RoutePlanner;
-}();
-function createCommand(type, parameters) {
-  var encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters);
-  return {
-    type: type,
-    encodedInput: encodedInput
-  };
-}
-
-var _CHAIN_CONFIGS;
-var WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000';
-var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
-  creationBlock: 17143817
-}, _CHAIN_CONFIGS[5] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',
-  creationBlock: 8940568
-}, _CHAIN_CONFIGS[11155111] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
-  creationBlock: 3543575
-}, _CHAIN_CONFIGS[137] = {
-  router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
-  weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
-  creationBlock: 52210153
-}, _CHAIN_CONFIGS[80001] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
-  creationBlock: 35176052
-}, _CHAIN_CONFIGS[10] = {
-  router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 114702266
-}, _CHAIN_CONFIGS[420] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 8887728
-}, _CHAIN_CONFIGS[42161] = {
-  router: '0x5E325eDA8064b456f4781070C0738d849c824258',
-  weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
-  creationBlock: 169472836
-}, _CHAIN_CONFIGS[421613] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',
-  creationBlock: 18815277
-}, _CHAIN_CONFIGS[42220] = {
-  router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',
-  weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 21407637
-}, _CHAIN_CONFIGS[44787] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 17566658
-}, _CHAIN_CONFIGS[56] = {
-  router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
-  weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
-  creationBlock: 35160263
-}, _CHAIN_CONFIGS[43114] = {
-  router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
-  weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
-  creationBlock: 40237257
-}, _CHAIN_CONFIGS[84531] = {
-  router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 6915289
-}, _CHAIN_CONFIGS[8453] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 9107268
-}, _CHAIN_CONFIGS[81457] = {
-  router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
-  weth: '0x4300000000000000000000000000000000000004',
-  creationBlock: 1116444
-}, _CHAIN_CONFIGS[7777777] = {
-  router: '0x2986d9721A49838ab4297b695858aF7F17f38014',
-  weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 11832155
-}, _CHAIN_CONFIGS[324] = {
-  router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',
-  weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',
-  creationBlock: 12640979
-}, _CHAIN_CONFIGS);
-var UNIVERSAL_ROUTER_ADDRESS = function UNIVERSAL_ROUTER_ADDRESS(chainId) {
-  if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  return CHAIN_CONFIGS[chainId].router;
-};
-var UNIVERSAL_ROUTER_CREATION_BLOCK = function UNIVERSAL_ROUTER_CREATION_BLOCK(chainId) {
-  if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  return CHAIN_CONFIGS[chainId].creationBlock;
-};
-var WETH_ADDRESS = function WETH_ADDRESS(chainId) {
-  if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error("Chain " + chainId + " does not have WETH");
-  return CHAIN_CONFIGS[chainId].weth;
-};
-var PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3';
-var CONTRACT_BALANCE = /*#__PURE__*/BigNumber.from(2).pow(255);
-var ETH_ADDRESS = '0x0000000000000000000000000000000000000000';
-var E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';
-var ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
-var SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001';
-var ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002';
-var OPENSEA_CONDUIT_SPENDER_ID = 0;
-var SUDOSWAP_SPENDER_ID = 1;
-
-function encodeFeeBips(fee) {
-  return toHex(fee.multiply(10000).quotient);
-}
-
-var REFUND_ETH_PRICE_IMPACT_THRESHOLD = /*#__PURE__*/new Percent(50, 100);
-// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router
-// also translates trade objects from previous (v2, v3) SDKs
-var UniswapTrade = /*#__PURE__*/function () {
-  function UniswapTrade(trade, options) {
-    this.trade = trade;
-    this.options = options;
-    this.tradeType = RouterTradeType.UniswapTrade;
-    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted');
-    if (this.inputRequiresWrap) this.payerIsUser = false;else if (this.options.useRouterBalance) this.payerIsUser = false;else this.payerIsUser = true;
-  }
-  var _proto = UniswapTrade.prototype;
-  _proto.encode = function encode(planner, _config) {
-    var _this$options$recipie;
-    // If the input currency is the native currency, we need to wrap it with the router as the recipient
-    if (this.inputRequiresWrap) {
-      // TODO: optimize if only one v2 pool we can directly send this to the pool
-      planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]);
-    }
-    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender
-    this.options.recipient = (_this$options$recipie = this.options.recipient) != null ? _this$options$recipie : SENDER_AS_RECIPIENT;
-    // flag for whether we want to perform slippage check on aggregate output of multiple routes
-    //   1. when there are >2 exact input trades. this is only a heuristic,
-    //      as it's still more gas-expensive even in this case, but has benefits
-    //      in that the reversion probability is lower
-    var performAggregatedSlippageCheck = this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2;
-    var outputIsNative = this.trade.outputAmount.currency.isNative;
-    var routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options);
-    for (var _iterator = _createForOfIteratorHelperLoose(this.trade.swaps), _step; !(_step = _iterator()).done;) {
-      var swap = _step.value;
-      switch (swap.route.protocol) {
-        case Protocol.V2:
-          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody);
-          break;
-        case Protocol.V3:
-          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody);
-          break;
-        case Protocol.MIXED:
-          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody);
-          break;
-        default:
-          throw new Error('UNSUPPORTED_TRADE_PROTOCOL');
-      }
-    }
-    var minimumAmountOut = BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());
-    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check
-    if (routerMustCustody) {
-      // If there is a fee, that percentage is sent to the fee recipient
-      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)
-      if (!!this.options.fee) {
-        var feeBips = encodeFeeBips(this.options.fee.fee);
-        planner.addCommand(CommandType.PAY_PORTION, [this.trade.outputAmount.currency.wrapped.address, this.options.fee.recipient, feeBips]);
-        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee
-        // Otherwise we continue as expected with the trade's normal expected output
-        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {
-          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000));
-        }
-      }
-      // If there is a flat fee, that absolute amount is sent to the fee recipient
-      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)
-      if (!!this.options.flatFee) {
-        var feeAmount = this.options.flatFee.amount;
-        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut');
-        planner.addCommand(CommandType.TRANSFER, [this.trade.outputAmount.currency.wrapped.address, this.options.flatFee.recipient, feeAmount]);
-        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee
-        // Otherwise we continue as expected with the trade's normal expected output
-        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {
-          minimumAmountOut = minimumAmountOut.sub(feeAmount);
-        }
-      }
-      // The remaining tokens that need to be sent to the user after the fee is taken will be caught
-      // by this if-else clause.
-      if (outputIsNative) {
-        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut]);
-      } else {
-        planner.addCommand(CommandType.SWEEP, [this.trade.outputAmount.currency.wrapped.address, this.options.recipient, minimumAmountOut]);
-      }
-    }
-    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {
-      // for exactOutput swaps that take native currency as input
-      // we need to send back the change to the user
-      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0]);
-    }
-    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0]);
-  };
-  _createClass(UniswapTrade, [{
-    key: "inputRequiresWrap",
-    get: function get() {
-      return this.trade.inputAmount.currency.isNative;
-    }
-  }]);
-  return UniswapTrade;
-}();
-// encode a uniswap v2 swap
-function addV2Swap(planner, _ref, tradeType, options, payerIsUser, routerMustCustody) {
-  var route = _ref.route,
-    inputAmount = _ref.inputAmount,
-    outputAmount = _ref.outputAmount;
-  var trade = new Trade(route, tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount, tradeType);
-  if (tradeType == TradeType.EXACT_INPUT) {
-    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [
-    // if native, we have to unwrap so keep in the router for now
-    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
-      return pool.address;
-    }), payerIsUser]);
-  } else if (tradeType == TradeType.EXACT_OUTPUT) {
-    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
-      return pool.address;
-    }), payerIsUser]);
-  }
-}
-// encode a uniswap v3 swap
-function addV3Swap(planner, _ref2, tradeType, options, payerIsUser, routerMustCustody) {
-  var route = _ref2.route,
-    inputAmount = _ref2.inputAmount,
-    outputAmount = _ref2.outputAmount;
-  var trade = Trade$1.createUncheckedTrade({
-    route: route,
-    inputAmount: inputAmount,
-    outputAmount: outputAmount,
-    tradeType: tradeType
-  });
-  var path = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT);
-  if (tradeType == TradeType.EXACT_INPUT) {
-    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), path, payerIsUser]);
-  } else if (tradeType == TradeType.EXACT_OUTPUT) {
-    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), path, payerIsUser]);
-  }
-}
-// encode a mixed route swap, i.e. including both v2 and v3 pools
-function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMustCustody) {
-  var route = swap.route,
-    inputAmount = swap.inputAmount,
-    outputAmount = swap.outputAmount;
-  var tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient;
-  // single hop, so it can be reduced to plain v2 or v3 swap logic
-  if (route.pools.length === 1) {
-    if (route.pools[0] instanceof Pool) {
-      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody);
-    } else if (route.pools[0] instanceof Pair) {
-      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody);
-    } else {
-      throw new Error('Invalid route type');
-    }
-  }
-  var trade = MixedRouteTrade.createUncheckedTrade({
-    route: route,
-    inputAmount: inputAmount,
-    outputAmount: outputAmount,
-    tradeType: tradeType
-  });
-  var amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString();
-  var amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString();
-  // logic from
-  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276
-  var sections = partitionMixedRouteByProtocol(route);
-  var isLastSectionInRoute = function isLastSectionInRoute(i) {
-    return i === sections.length - 1;
-  };
-  var outputToken;
-  var inputToken = route.input.wrapped;
-  for (var i = 0; i < sections.length; i++) {
-    var section = sections[i];
-    /// Now, we get output of this section
-    outputToken = getOutputOfPools(section, inputToken);
-    var newRouteOriginal = new MixedRouteSDK([].concat(section), section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1, outputToken);
-    var newRoute = new MixedRoute(newRouteOriginal);
-    /// Previous output is now input
-    inputToken = outputToken;
-    var mixedRouteIsAllV3 = function mixedRouteIsAllV3(route) {
-      return route.pools.every(function (pool) {
-        return pool instanceof Pool;
-      });
-    };
-    if (mixedRouteIsAllV3(newRoute)) {
-      var path = encodeMixedRouteToPath(newRoute);
-      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [
-      // if not last section: send tokens directly to the first v2 pair of the next section
-      // note: because of the partitioning function we can be sure that the next section is v2
-      isLastSectionInRoute(i) ? tradeRecipient : sections[i + 1][0].liquidityToken.address, i == 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, path, payerIsUser && i === 0]);
-    } else {
-      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, i === 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, newRoute.path.map(function (pool) {
-        return pool.address;
-      }), payerIsUser && i === 0]);
-    }
-  }
-}
-// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap
-function riskOfPartialFill(trade) {
-  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD);
-}
-function hasFeeOption(swapOptions) {
-  return !!swapOptions.fee || !!swapOptions.flatFee;
-}
-
-var SIGNATURE_LENGTH = 65;
-var EIP_2098_SIGNATURE_LENGTH = 64;
-function encodePermit(planner, permit2) {
-  var signature = permit2.signature;
-  var length = ethers.utils.arrayify(permit2.signature).length;
-  // signature data provided for EIP-1271 may have length different from ECDSA signature
-  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {
-    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id
-    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature));
-  }
-  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature]);
-}
-// Handles the encoding of commands needed to gather input tokens for a trade
-// Approval: The router approving another address to take tokens.
-//   note: Only seaport and sudoswap support this action. Approvals are left open.
-// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens
-// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address
-function encodeInputTokenOptions(planner, options) {
-  // first ensure that all tokens provided for encoding are the same
-  if (!!options.approval && !!options.permit2Permit) !(options.approval.token === options.permit2Permit.details.token) ? process.env.NODE_ENV !== "production" ? invariant(false, "inconsistent token") : invariant(false) : void 0;
-  if (!!options.approval && !!options.permit2TransferFrom) !(options.approval.token === options.permit2TransferFrom.token) ? process.env.NODE_ENV !== "production" ? invariant(false, "inconsistent token") : invariant(false) : void 0;
-  if (!!options.permit2TransferFrom && !!options.permit2Permit) !(options.permit2TransferFrom.token === options.permit2Permit.details.token) ? process.env.NODE_ENV !== "production" ? invariant(false, "inconsistent token") : invariant(false) : void 0;
-  // if an options.approval is required, add it
-  if (!!options.approval) {
-    planner.addCommand(CommandType.APPROVE_ERC20, [options.approval.token, mapApprovalProtocol(options.approval.protocol)]);
-  }
-  // if this order has a options.permit2Permit, encode it
-  if (!!options.permit2Permit) {
-    encodePermit(planner, options.permit2Permit);
-  }
-  if (!!options.permit2TransferFrom) {
-    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [options.permit2TransferFrom.token, options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT, options.permit2TransferFrom.amount]);
-  }
-}
-function mapApprovalProtocol(protocolAddress) {
-  switch (protocolAddress.toLowerCase()) {
-    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc':
-      // Seaport v1.5
-      return OPENSEA_CONDUIT_SPENDER_ID;
-    case '0x00000000000001ad428e4906ae43d8f9852d0dd6':
-      // Seaport v1.4
-      return OPENSEA_CONDUIT_SPENDER_ID;
-    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329':
-      // Sudoswap
-      return SUDOSWAP_SPENDER_ID;
-    default:
-      throw new Error('unsupported protocol address');
-  }
-}
-
-var SwapRouter = /*#__PURE__*/function () {
-  function SwapRouter() {}
-  SwapRouter.swapCallParameters = function swapCallParameters(trades, config) {
-    if (config === void 0) {
-      config = {};
-    }
-    if (!Array.isArray(trades)) trades = [trades];
-    var nftTrades = trades.filter(function (trade, _, _ref) {
-      return trade.hasOwnProperty('market');
-    });
-    var allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true;
-    var planner = new RoutePlanner();
-    // track value flow to require the right amount of native value
-    var currentNativeValueInRouter = BigNumber.from(0);
-    var transactionValue = BigNumber.from(0);
-    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep
-    var nftInputTokens = new Set();
-    for (var _iterator = _createForOfIteratorHelperLoose(trades), _step; !(_step = _iterator()).done;) {
-      var trade = _step.value;
-      /**
-       * is NFTTrade
-       */
-      if (trade.tradeType == RouterTradeType.NFTTrade) {
-        var nftTrade = trade;
-        nftTrade.encode(planner, {
-          allowRevert: allowRevert
-        });
-        var tradePrice = nftTrade.getTotalPrice();
-        if (nftTrade.market == Market.Seaport) {
-          var seaportTrade = nftTrade;
-          var seaportInputTokens = seaportTrade.getInputTokens();
-          seaportInputTokens.forEach(function (inputToken) {
-            nftInputTokens.add(inputToken);
-          });
-        } else {
-          nftInputTokens.add(ETH_ADDRESS);
-        }
-        // send enough native value to contract for NFT purchase
-        if (currentNativeValueInRouter.lt(tradePrice)) {
-          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter));
-          currentNativeValueInRouter = BigNumber.from(0);
-        } else {
-          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice);
-        }
-        /**
-         * is UniswapTrade
-         */
-      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {
-        var uniswapTrade = trade;
-        var inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative;
-        var outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative;
-        var swapOptions = uniswapTrade.options;
-        !!(inputIsNative && !!swapOptions.inputTokenPermit) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NATIVE_INPUT_PERMIT') : invariant(false) : void 0;
-        if (!!swapOptions.inputTokenPermit) {
-          encodePermit(planner, swapOptions.inputTokenPermit);
-        }
-        if (inputIsNative) {
-          transactionValue = transactionValue.add(BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString()));
-        }
-        // track amount of native currency in the router
-        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {
-          currentNativeValueInRouter = currentNativeValueInRouter.add(BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString()));
-        }
-        uniswapTrade.encode(planner, {
-          allowRevert: false
-        });
-        /**
-         * is UnwrapWETH
-         */
-      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {
-        var UnwrapWETH = trade;
-        trade.encode(planner, {
-          allowRevert: false
-        });
-        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount);
-        /**
-         * else
-         */
-      } else {
-        throw 'trade must be of instance: UniswapTrade or NFTTrade';
-      }
-    }
-    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades
-    // or NFT trades with potential slippage (i.e. sudo).
-    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient
-    nftInputTokens.forEach(function (inputToken) {
-      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0]);
-    });
-    return SwapRouter.encodePlan(planner, transactionValue, config);
-  }
-  /**
-   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0
-   * This version does not work correctly for Seaport ERC20->NFT purchases
-   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.
-   * @param trades to produce call parameters for
-   */;
-  SwapRouter.swapNFTCallParameters = function swapNFTCallParameters(trades, config) {
-    if (config === void 0) {
-      config = {};
-    }
-    var planner = new RoutePlanner();
-    var totalPrice = BigNumber.from(0);
-    var allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true;
-    for (var _iterator2 = _createForOfIteratorHelperLoose(trades), _step2; !(_step2 = _iterator2()).done;) {
-      var trade = _step2.value;
-      trade.encode(planner, {
-        allowRevert: allowRevert
-      });
-      totalPrice = totalPrice.add(trade.getTotalPrice());
-    }
-    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0]);
-    return SwapRouter.encodePlan(planner, totalPrice, config);
-  }
-  /**
-   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0
-   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.
-   * @param trades to produce call parameters for
-   * @param options options for the call parameters
-   */;
-  SwapRouter.swapERC20CallParameters = function swapERC20CallParameters(trades, options) {
-    // TODO: use permit if signature included in swapOptions
-    var planner = new RoutePlanner();
-    var trade = new UniswapTrade(trades, options);
-    var inputCurrency = trade.trade.inputAmount.currency;
-    !!(inputCurrency.isNative && !!options.inputTokenPermit) ? process.env.NODE_ENV !== "production" ? invariant(false, 'NATIVE_INPUT_PERMIT') : invariant(false) : void 0;
-    if (options.inputTokenPermit) {
-      encodePermit(planner, options.inputTokenPermit);
-    }
-    var nativeCurrencyValue = inputCurrency.isNative ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString()) : BigNumber.from(0);
-    trade.encode(planner, {
-      allowRevert: false
-    });
-    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {
-      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined
-    });
-  }
-  /**
-   * Encodes a planned route into a method name and parameters for the Router contract.
-   * @param planner the planned route
-   * @param nativeCurrencyValue the native currency value of the planned route
-   * @param config the router config
-   */;
-  SwapRouter.encodePlan = function encodePlan(planner, nativeCurrencyValue, config) {
-    if (config === void 0) {
-      config = {};
-    }
-    var commands = planner.commands,
-      inputs = planner.inputs;
-    var functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])';
-    var parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs];
-    var calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters);
-    return {
-      calldata: calldata,
-      value: nativeCurrencyValue.toHexString()
-    };
-  };
-  return SwapRouter;
-}();
-SwapRouter.INTERFACE = /*#__PURE__*/new Interface(abi$7);
-
-var CryptopunkTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(CryptopunkTrade, _NFTTrade);
-  function CryptopunkTrade(orders) {
-    return _NFTTrade.call(this, Market.Cryptopunks, orders) || this;
-  }
-  var _proto = CryptopunkTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var item = _step.value;
-      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var item = _step2.value;
-      buyItems.push({
-        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,
-        tokenId: item.tokenId,
-        tokenType: TokenType.Cryptopunk
-      });
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = BigNumber.from(0);
-    for (var _iterator3 = _createForOfIteratorHelperLoose(this.orders), _step3; !(_step3 = _iterator3()).done;) {
-      var item = _step3.value;
-      total = total.add(item.value);
-    }
-    return total;
-  };
-  return CryptopunkTrade;
-}(NFTTrade);
-CryptopunkTrade.CRYPTOPUNK_ADDRESS = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb';
-
-var abi = [
-	{
-		inputs: [
-			{
-				internalType: "address payable",
-				name: "treasury",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "feth",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "royaltyRegistry",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "duration",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		inputs: [
-		],
-		name: "FoundationTreasuryNode_Address_Is_Not_A_Contract",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "FoundationTreasuryNode_Caller_Not_Admin",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "buyPrice",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketBuyPrice_Cannot_Buy_Unset_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "owner",
-				type: "address"
-			}
-		],
-		name: "NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "owner",
-				type: "address"
-			}
-		],
-		name: "NFTMarketBuyPrice_Only_Owner_Can_Set_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketBuyPrice_Price_Already_Set",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketBuyPrice_Price_Too_High",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			}
-		],
-		name: "NFTMarketBuyPrice_Seller_Mismatch",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketCore_FETH_Address_Is_Not_A_Contract",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketCore_Only_FETH_Can_Transfer_ETH",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketCore_Seller_Not_Found",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketOffer_Cannot_Be_Made_While_In_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "currentOfferAmount",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketOffer_Offer_Below_Min_Amount",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "expiry",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketOffer_Offer_Expired",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "currentOfferFrom",
-				type: "address"
-			}
-		],
-		name: "NFTMarketOffer_Offer_From_Does_Not_Match",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "minOfferAmount",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketOffer_Reason_Required",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Already_Listed",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "minAmount",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "endTime",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "endTime",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "maxDuration",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Exceeds_Max_Duration",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "extensionDuration",
-				type: "uint256"
-			}
-		],
-		name: "NFTMarketReserveAuction_Less_Than_Extension_Duration",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			}
-		],
-		name: "NFTMarketReserveAuction_Not_Matching_Seller",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "owner",
-				type: "address"
-			}
-		],
-		name: "NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Price_Already_Set",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NFTMarketReserveAuction_Too_Much_Value_Provided",
-		type: "error"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "buyer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "protocolFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "creatorFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "sellerRev",
-				type: "uint256"
-			}
-		],
-		name: "BuyPriceAccepted",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "BuyPriceCanceled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "BuyPriceInvalidated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			}
-		],
-		name: "BuyPriceSet",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "buyReferrer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "buyReferrerProtocolFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "buyReferrerSellerFee",
-				type: "uint256"
-			}
-		],
-		name: "BuyReferralPaid",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint8",
-				name: "version",
-				type: "uint8"
-			}
-		],
-		name: "Initialized",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "buyer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "protocolFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "creatorFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "sellerRev",
-				type: "uint256"
-			}
-		],
-		name: "OfferAccepted",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "string",
-				name: "reason",
-				type: "string"
-			}
-		],
-		name: "OfferCanceledByAdmin",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "OfferInvalidated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "buyer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "expiration",
-				type: "uint256"
-			}
-		],
-		name: "OfferMade",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "bidder",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "endTime",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionBidPlaced",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionCanceled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "string",
-				name: "reason",
-				type: "string"
-			}
-		],
-		name: "ReserveAuctionCanceledByAdmin",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "duration",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "extensionDuration",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionCreated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "bidder",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "protocolFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "creatorFee",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "sellerRev",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionFinalized",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionInvalidated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			}
-		],
-		name: "ReserveAuctionUpdated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "user",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "WithdrawalToFETH",
-		type: "event"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "offerFrom",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "minAmount",
-				type: "uint256"
-			}
-		],
-		name: "acceptOffer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address[]",
-				name: "nftContracts",
-				type: "address[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "tokenIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "string",
-				name: "reason",
-				type: "string"
-			}
-		],
-		name: "adminCancelOffers",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				internalType: "string",
-				name: "reason",
-				type: "string"
-			}
-		],
-		name: "adminCancelReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "maxPrice",
-				type: "uint256"
-			}
-		],
-		name: "buy",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "maxPrice",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		name: "buyV2",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "cancelBuyPrice",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "cancelReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			}
-		],
-		name: "createReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "finalizeReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getBuyPrice",
-		outputs: [
-			{
-				internalType: "address",
-				name: "seller",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			}
-		],
-		name: "getFeesAndRecipients",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "protocolFee",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "creatorRev",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable[]",
-				name: "creatorRecipients",
-				type: "address[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "creatorShares",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256",
-				name: "sellerRev",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "owner",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "getFethAddress",
-		outputs: [
-			{
-				internalType: "address",
-				name: "fethAddress",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "getFoundationTreasury",
-		outputs: [
-			{
-				internalType: "address payable",
-				name: "treasuryAddress",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getImmutableRoyalties",
-		outputs: [
-			{
-				internalType: "address payable[]",
-				name: "recipients",
-				type: "address[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "splitPerRecipientInBasisPoints",
-				type: "uint256[]"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "getMinBidAmount",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "minimum",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getMinOfferAmount",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "minimum",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "creator",
-				type: "address"
-			}
-		],
-		name: "getMutableRoyalties",
-		outputs: [
-			{
-				internalType: "address payable[]",
-				name: "recipients",
-				type: "address[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "splitPerRecipientInBasisPoints",
-				type: "uint256[]"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getOffer",
-		outputs: [
-			{
-				internalType: "address",
-				name: "buyer",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "expiration",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getOfferReferrer",
-		outputs: [
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "getReserveAuction",
-		outputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "nftContract",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "tokenId",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "seller",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "duration",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "extensionDuration",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "bidder",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "amount",
-						type: "uint256"
-					}
-				],
-				internalType: "struct NFTMarketReserveAuction.ReserveAuction",
-				name: "auction",
-				type: "tuple"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "getReserveAuctionBidReferrer",
-		outputs: [
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getReserveAuctionIdFor",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "getRoyaltyRegistry",
-		outputs: [
-			{
-				internalType: "address",
-				name: "registry",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			}
-		],
-		name: "getTokenCreator",
-		outputs: [
-			{
-				internalType: "address payable",
-				name: "creator",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "initialize",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "makeOffer",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "expiration",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		name: "makeOfferV2",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "expiration",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			}
-		],
-		name: "placeBid",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "referrer",
-				type: "address"
-			}
-		],
-		name: "placeBidV2",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "nftContract",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			}
-		],
-		name: "setBuyPrice",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "auctionId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "reservePrice",
-				type: "uint256"
-			}
-		],
-		name: "updateReserveAuction",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var FoundationTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(FoundationTrade, _NFTTrade);
-  function FoundationTrade(orders) {
-    return _NFTTrade.call(this, Market.Foundation, orders) || this;
-  }
-  var _proto = FoundationTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var item = _step.value;
-      var calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [item.tokenAddress, item.tokenId, item.price, item.referrer]);
-      planner.addCommand(CommandType.FOUNDATION, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var item = _step2.value;
-      buyItems.push({
-        tokenAddress: item.tokenAddress,
-        tokenId: item.tokenId,
-        tokenType: TokenType.ERC721
-      });
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = BigNumber.from(0);
-    for (var _iterator3 = _createForOfIteratorHelperLoose(this.orders), _step3; !(_step3 = _iterator3()).done;) {
-      var item = _step3.value;
-      total = total.add(item.price);
-    }
-    return total;
-  };
-  return FoundationTrade;
-}(NFTTrade);
-FoundationTrade.INTERFACE = /*#__PURE__*/new Interface(abi);
-
-var abi$1 = [
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_owner",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "_protocolFeeRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "_transferManager",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "_weth",
-				type: "address"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		inputs: [
-		],
-		name: "CallerInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "ChainIdInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "CreatorFeeBpTooHigh",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "CurrencyInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "ERC20TransferFromFail",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "LengthsInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "MerkleProofInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "length",
-				type: "uint256"
-			}
-		],
-		name: "MerkleProofTooLarge",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NewGasLimitETHTransferTooLow",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NewProtocolFeeRecipientCannotBeNullAddress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoOngoingTransferInProgress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoSelectorForStrategy",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoncesInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NotAContract",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NotAffiliateController",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NotOwner",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NotV2Strategy",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NullSignerAddress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "OutsideOfTimeRange",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "PercentageTooHigh",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "QuoteTypeInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "ReentrancyFail",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "RenouncementNotInProgress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "SameDomainSeparator",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "SignatureEOAInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "SignatureERC1271Invalid",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "length",
-				type: "uint256"
-			}
-		],
-		name: "SignatureLengthInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "SignatureParameterSInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint8",
-				name: "v",
-				type: "uint8"
-			}
-		],
-		name: "SignatureParameterVInvalid",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "StrategyHasNoSelector",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			}
-		],
-		name: "StrategyNotAvailable",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "StrategyNotUsed",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "StrategyProtocolFeeTooHigh",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "TransferAlreadyInProgress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "TransferNotInProgress",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "WrongPotentialOwner",
-		type: "error"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "affiliateFee",
-				type: "uint256"
-			}
-		],
-		name: "AffiliatePayment",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-		],
-		name: "CancelOwnershipTransfer",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isAllowed",
-				type: "bool"
-			}
-		],
-		name: "CurrencyStatusUpdated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-		],
-		name: "InitiateOwnershipRenouncement",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "previousOwner",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "potentialOwner",
-				type: "address"
-			}
-		],
-		name: "InitiateOwnershipTransfer",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "affiliateController",
-				type: "address"
-			}
-		],
-		name: "NewAffiliateController",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			}
-		],
-		name: "NewAffiliateProgramStatus",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "rate",
-				type: "uint256"
-			}
-		],
-		name: "NewAffiliateRate",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "user",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "bidNonce",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "askNonce",
-				type: "uint256"
-			}
-		],
-		name: "NewBidAskNonces",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "creatorFeeManager",
-				type: "address"
-			}
-		],
-		name: "NewCreatorFeeManager",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-		],
-		name: "NewDomainSeparator",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "gasLimitETHTransfer",
-				type: "uint256"
-			}
-		],
-		name: "NewGasLimitETHTransfer",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "maxCreatorFeeBp",
-				type: "uint256"
-			}
-		],
-		name: "NewMaxCreatorFeeBp",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "NewOwner",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "protocolFeeRecipient",
-				type: "address"
-			}
-		],
-		name: "NewProtocolFeeRecipient",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "standardProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "minTotalFeeBp",
-				type: "uint16"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "maxProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				indexed: false,
-				internalType: "bytes4",
-				name: "selector",
-				type: "bytes4"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isMakerBid",
-				type: "bool"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "implementation",
-				type: "address"
-			}
-		],
-		name: "NewStrategy",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "user",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "orderNonces",
-				type: "uint256[]"
-			}
-		],
-		name: "OrderNoncesCancelled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "standardProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				indexed: false,
-				internalType: "uint16",
-				name: "minTotalFeeBp",
-				type: "uint16"
-			}
-		],
-		name: "StrategyUpdated",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "user",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "subsetNonces",
-				type: "uint256[]"
-			}
-		],
-		name: "SubsetNoncesCancelled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "orderHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "bool",
-						name: "isNonceInvalidated",
-						type: "bool"
-					}
-				],
-				indexed: false,
-				internalType: "struct ILooksRareProtocol.NonceInvalidationParameters",
-				name: "nonceInvalidationParameters",
-				type: "tuple"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "askUser",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "bidUser",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "collection",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "itemIds",
-				type: "uint256[]"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			},
-			{
-				indexed: false,
-				internalType: "address[2]",
-				name: "feeRecipients",
-				type: "address[2]"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[3]",
-				name: "feeAmounts",
-				type: "uint256[3]"
-			}
-		],
-		name: "TakerAsk",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "orderHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "bool",
-						name: "isNonceInvalidated",
-						type: "bool"
-					}
-				],
-				indexed: false,
-				internalType: "struct ILooksRareProtocol.NonceInvalidationParameters",
-				name: "nonceInvalidationParameters",
-				type: "tuple"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "bidUser",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "bidRecipient",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "collection",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "itemIds",
-				type: "uint256[]"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			},
-			{
-				indexed: false,
-				internalType: "address[2]",
-				name: "feeRecipients",
-				type: "address[2]"
-			},
-			{
-				indexed: false,
-				internalType: "uint256[3]",
-				name: "feeAmounts",
-				type: "uint256[3]"
-			}
-		],
-		name: "TakerBid",
-		type: "event"
-	},
-	{
-		inputs: [
-		],
-		name: "MAGIC_VALUE_ORDER_NONCE_EXECUTED",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "WETH",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint16",
-				name: "standardProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "minTotalFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "maxProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "bytes4",
-				name: "selector",
-				type: "bytes4"
-			},
-			{
-				internalType: "bool",
-				name: "isMakerBid",
-				type: "bool"
-			},
-			{
-				internalType: "address",
-				name: "implementation",
-				type: "address"
-			}
-		],
-		name: "addStrategy",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "affiliateController",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "affiliateRates",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256[]",
-				name: "orderNonces",
-				type: "uint256[]"
-			}
-		],
-		name: "cancelOrderNonces",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "cancelOwnershipTransfer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256[]",
-				name: "subsetNonces",
-				type: "uint256[]"
-			}
-		],
-		name: "cancelSubsetNonces",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "chainId",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "confirmOwnershipRenouncement",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "confirmOwnershipTransfer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "creatorFeeManager",
-		outputs: [
-			{
-				internalType: "contract ICreatorFeeManager",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "domainSeparator",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "recipient",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Taker[]",
-				name: "takerBids",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "enum QuoteType",
-						name: "quoteType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "globalNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "subsetNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "strategyId",
-						type: "uint256"
-					},
-					{
-						internalType: "enum CollectionType",
-						name: "collectionType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "collection",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "signer",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256[]",
-						name: "itemIds",
-						type: "uint256[]"
-					},
-					{
-						internalType: "uint256[]",
-						name: "amounts",
-						type: "uint256[]"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Maker[]",
-				name: "makerAsks",
-				type: "tuple[]"
-			},
-			{
-				internalType: "bytes[]",
-				name: "makerSignatures",
-				type: "bytes[]"
-			},
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "root",
-						type: "bytes32"
-					},
-					{
-						components: [
-							{
-								internalType: "bytes32",
-								name: "value",
-								type: "bytes32"
-							},
-							{
-								internalType: "enum OrderStructs.MerkleTreeNodePosition",
-								name: "position",
-								type: "uint8"
-							}
-						],
-						internalType: "struct OrderStructs.MerkleTreeNode[]",
-						name: "proof",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct OrderStructs.MerkleTree[]",
-				name: "merkleTrees",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			},
-			{
-				internalType: "bool",
-				name: "isAtomic",
-				type: "bool"
-			}
-		],
-		name: "executeMultipleTakerBids",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "recipient",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Taker",
-				name: "takerAsk",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum QuoteType",
-						name: "quoteType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "globalNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "subsetNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "strategyId",
-						type: "uint256"
-					},
-					{
-						internalType: "enum CollectionType",
-						name: "collectionType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "collection",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "signer",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256[]",
-						name: "itemIds",
-						type: "uint256[]"
-					},
-					{
-						internalType: "uint256[]",
-						name: "amounts",
-						type: "uint256[]"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Maker",
-				name: "makerBid",
-				type: "tuple"
-			},
-			{
-				internalType: "bytes",
-				name: "makerSignature",
-				type: "bytes"
-			},
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "root",
-						type: "bytes32"
-					},
-					{
-						components: [
-							{
-								internalType: "bytes32",
-								name: "value",
-								type: "bytes32"
-							},
-							{
-								internalType: "enum OrderStructs.MerkleTreeNodePosition",
-								name: "position",
-								type: "uint8"
-							}
-						],
-						internalType: "struct OrderStructs.MerkleTreeNode[]",
-						name: "proof",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct OrderStructs.MerkleTree",
-				name: "merkleTree",
-				type: "tuple"
-			},
-			{
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			}
-		],
-		name: "executeTakerAsk",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "recipient",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Taker",
-				name: "takerBid",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum QuoteType",
-						name: "quoteType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "globalNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "subsetNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "strategyId",
-						type: "uint256"
-					},
-					{
-						internalType: "enum CollectionType",
-						name: "collectionType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "collection",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "signer",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256[]",
-						name: "itemIds",
-						type: "uint256[]"
-					},
-					{
-						internalType: "uint256[]",
-						name: "amounts",
-						type: "uint256[]"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Maker",
-				name: "makerAsk",
-				type: "tuple"
-			},
-			{
-				internalType: "bytes",
-				name: "makerSignature",
-				type: "bytes"
-			},
-			{
-				components: [
-					{
-						internalType: "bytes32",
-						name: "root",
-						type: "bytes32"
-					},
-					{
-						components: [
-							{
-								internalType: "bytes32",
-								name: "value",
-								type: "bytes32"
-							},
-							{
-								internalType: "enum OrderStructs.MerkleTreeNodePosition",
-								name: "position",
-								type: "uint8"
-							}
-						],
-						internalType: "struct OrderStructs.MerkleTreeNode[]",
-						name: "proof",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct OrderStructs.MerkleTree",
-				name: "merkleTree",
-				type: "tuple"
-			},
-			{
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			}
-		],
-		name: "executeTakerBid",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "root",
-				type: "bytes32"
-			},
-			{
-				internalType: "uint256",
-				name: "proofLength",
-				type: "uint256"
-			}
-		],
-		name: "hashBatchOrder",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "batchOrderHash",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "pure",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bool",
-				name: "bid",
-				type: "bool"
-			},
-			{
-				internalType: "bool",
-				name: "ask",
-				type: "bool"
-			}
-		],
-		name: "incrementBidAskNonces",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "initiateOwnershipRenouncement",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newPotentialOwner",
-				type: "address"
-			}
-		],
-		name: "initiateOwnershipTransfer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "isAffiliateProgramActive",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "isCurrencyAllowed",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "maxCreatorFeeBp",
-		outputs: [
-			{
-				internalType: "uint16",
-				name: "",
-				type: "uint16"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "owner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "ownershipStatus",
-		outputs: [
-			{
-				internalType: "enum IOwnableTwoSteps.Status",
-				name: "",
-				type: "uint8"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "potentialOwner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "protocolFeeRecipient",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "recipient",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Taker",
-				name: "takerBid",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum QuoteType",
-						name: "quoteType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "globalNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "subsetNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "orderNonce",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "strategyId",
-						type: "uint256"
-					},
-					{
-						internalType: "enum CollectionType",
-						name: "collectionType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "collection",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "signer",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256[]",
-						name: "itemIds",
-						type: "uint256[]"
-					},
-					{
-						internalType: "uint256[]",
-						name: "amounts",
-						type: "uint256[]"
-					},
-					{
-						internalType: "bytes",
-						name: "additionalParameters",
-						type: "bytes"
-					}
-				],
-				internalType: "struct OrderStructs.Maker",
-				name: "makerAsk",
-				type: "tuple"
-			},
-			{
-				internalType: "address",
-				name: "sender",
-				type: "address"
-			},
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "restrictedExecuteTakerBid",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "protocolFeeAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		name: "strategyInfo",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			},
-			{
-				internalType: "uint16",
-				name: "standardProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "minTotalFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "maxProtocolFeeBp",
-				type: "uint16"
-			},
-			{
-				internalType: "bytes4",
-				name: "selector",
-				type: "bytes4"
-			},
-			{
-				internalType: "bool",
-				name: "isMakerBid",
-				type: "bool"
-			},
-			{
-				internalType: "address",
-				name: "implementation",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "transferManager",
-		outputs: [
-			{
-				internalType: "contract TransferManager",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newAffiliateController",
-				type: "address"
-			}
-		],
-		name: "updateAffiliateController",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			}
-		],
-		name: "updateAffiliateProgramStatus",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "affiliate",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "bp",
-				type: "uint256"
-			}
-		],
-		name: "updateAffiliateRate",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newCreatorFeeManager",
-				type: "address"
-			}
-		],
-		name: "updateCreatorFeeManager",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				internalType: "bool",
-				name: "isAllowed",
-				type: "bool"
-			}
-		],
-		name: "updateCurrencyStatus",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "updateDomainSeparator",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "newGasLimitETHTransfer",
-				type: "uint256"
-			}
-		],
-		name: "updateETHGasLimitForTransfer",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint16",
-				name: "newMaxCreatorFeeBp",
-				type: "uint16"
-			}
-		],
-		name: "updateMaxCreatorFeeBp",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newProtocolFeeRecipient",
-				type: "address"
-			}
-		],
-		name: "updateProtocolFeeRecipient",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "strategyId",
-				type: "uint256"
-			},
-			{
-				internalType: "bool",
-				name: "isActive",
-				type: "bool"
-			},
-			{
-				internalType: "uint16",
-				name: "newStandardProtocolFee",
-				type: "uint16"
-			},
-			{
-				internalType: "uint16",
-				name: "newMinTotalFee",
-				type: "uint16"
-			}
-		],
-		name: "updateStrategy",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "userBidAskNonces",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "bidNonce",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "askNonce",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		name: "userOrderNonce",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		name: "userSubsetNonce",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	}
-];
-
-var LooksRareV2Trade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(LooksRareV2Trade, _NFTTrade);
-  function LooksRareV2Trade(orders) {
-    return _NFTTrade.call(this, Market.LooksRareV2, orders) || this;
-  }
-  var _proto = LooksRareV2Trade.prototype;
-  _proto.encode = function encode(planner, config) {
-    var _this$refactorAPIData = this.refactorAPIData(this.orders),
-      takerBids = _this$refactorAPIData.takerBids,
-      makerOrders = _this$refactorAPIData.makerOrders,
-      makerSignatures = _this$refactorAPIData.makerSignatures,
-      totalValue = _this$refactorAPIData.totalValue,
-      merkleTrees = _this$refactorAPIData.merkleTrees;
-    var calldata;
-    if (this.orders.length == 1) {
-      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [takerBids[0], makerOrders[0], makerSignatures[0], merkleTrees[0], ZERO_ADDRESS]);
-    } else {
-      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [takerBids, makerOrders, makerSignatures, merkleTrees, ZERO_ADDRESS, false]);
-    }
-    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert);
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var item = _step.value;
-      var tokenAddress = item.apiOrder.collection;
-      var tokenType = item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155;
-      for (var _iterator2 = _createForOfIteratorHelperLoose(item.apiOrder.itemIds), _step2; !(_step2 = _iterator2()).done;) {
-        var tokenId = _step2.value;
-        buyItems.push({
-          tokenAddress: tokenAddress,
-          tokenId: tokenId,
-          tokenType: tokenType
-        });
-      }
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = BigNumber.from(0);
-    for (var _iterator3 = _createForOfIteratorHelperLoose(this.orders), _step3; !(_step3 = _iterator3()).done;) {
-      var item = _step3.value;
-      total = total.add(item.apiOrder.price);
-    }
-    return total;
-  };
-  _proto.refactorAPIData = function refactorAPIData(orders) {
-    var takerBids = [];
-    var makerOrders = [];
-    var makerSignatures = [];
-    var totalValue = BigNumber.from(0);
-    var merkleTrees = [];
-    orders.forEach(function (order) {
-      var _order$apiOrder$merkl, _order$apiOrder$merkl2;
-      makerOrders.push(_extends({}, order.apiOrder));
-      makerSignatures.push(order.apiOrder.signature);
-      takerBids.push({
-        recipient: order.taker,
-        additionalParameters: '0x'
-      });
-      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price));
-      merkleTrees.push({
-        root: (_order$apiOrder$merkl = order.apiOrder.merkleRoot) != null ? _order$apiOrder$merkl : '0x0000000000000000000000000000000000000000000000000000000000000000',
-        proof: (_order$apiOrder$merkl2 = order.apiOrder.merkleProof) != null ? _order$apiOrder$merkl2 : []
-      });
-    });
-    return {
-      takerBids: takerBids,
-      makerOrders: makerOrders,
-      makerSignatures: makerSignatures,
-      totalValue: totalValue,
-      merkleTrees: merkleTrees
-    };
-  };
-  return LooksRareV2Trade;
-}(NFTTrade);
-LooksRareV2Trade.INTERFACE = /*#__PURE__*/new Interface(abi$1);
-LooksRareV2Trade.ERC721_ORDER = 0;
-
-var abi$2 = [
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "previousOwner",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "OwnershipTransferred",
-		type: "event"
-	},
-	{
-		inputs: [
-		],
-		name: "ETH",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "NFT20",
-		outputs: [
-			{
-				internalType: "contract INFT20Factory",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "UNIV2",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "UNIV3",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "WETH",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_nft",
-				type: "address"
-			},
-			{
-				internalType: "uint256[]",
-				name: "_toIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "_toAmounts",
-				type: "uint256[]"
-			},
-			{
-				internalType: "address",
-				name: "_receipient",
-				type: "address"
-			},
-			{
-				internalType: "uint24",
-				name: "_fee",
-				type: "uint24"
-			},
-			{
-				internalType: "bool",
-				name: "isV3",
-				type: "bool"
-			}
-		],
-		name: "ethForNft",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_nft",
-				type: "address"
-			},
-			{
-				internalType: "uint256[]",
-				name: "_ids",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "_amounts",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bool",
-				name: "isErc721",
-				type: "bool"
-			},
-			{
-				internalType: "uint24",
-				name: "_fee",
-				type: "uint24"
-			},
-			{
-				internalType: "bool",
-				name: "isV3",
-				type: "bool"
-			}
-		],
-		name: "nftForEth",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "owner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "tokenAddress",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "tokenAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "sendTo",
-				type: "address"
-			}
-		],
-		name: "recoverERC20",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "renounceOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_registry",
-				type: "address"
-			}
-		],
-		name: "setNFT20",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "transferOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "withdrawEth",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var NFT20Trade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(NFT20Trade, _NFTTrade);
-  function NFT20Trade(orders) {
-    return _NFTTrade.call(this, Market.NFT20, orders) || this;
-  }
-  var _proto = NFT20Trade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var order = _step.value;
-      var calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [order.tokenAddress, order.tokenIds, order.tokenAmounts, order.recipient, order.fee, order.isV3]);
-      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var pool = _step2.value;
-      for (var _iterator3 = _createForOfIteratorHelperLoose(pool.tokenIds), _step3; !(_step3 = _iterator3()).done;) {
-        var tokenId = _step3.value;
-        buyItems.push({
-          tokenAddress: pool.tokenAddress,
-          tokenId: tokenId,
-          tokenType: TokenType.ERC721
-        });
-      }
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = BigNumber.from(0);
-    for (var _iterator4 = _createForOfIteratorHelperLoose(this.orders), _step4; !(_step4 = _iterator4()).done;) {
-      var item = _step4.value;
-      total = total.add(item.value);
-    }
-    return total;
-  };
-  return NFT20Trade;
-}(NFTTrade);
-NFT20Trade.INTERFACE = /*#__PURE__*/new Interface(abi$2);
-
-var abi$3 = [
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "_nftxFactory",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "_WETH",
-				type: "address"
-			},
-			{
-				internalType: "address payable",
-				name: "_swapTarget",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "_dustThreshold",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "count",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "ethSpent",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "Buy",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "ethAmount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "vTokenAmount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "DustReturned",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "previousOwner",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "OwnershipTransferred",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "count",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "ethReceived",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "Sell",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "count",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "ethSpent",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "Swap",
-		type: "event"
-	},
-	{
-		inputs: [
-		],
-		name: "WETH",
-		outputs: [
-			{
-				internalType: "contract IWETH",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "specificIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "buyAndRedeem",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "idsIn",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "specificIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "buyAndSwap1155",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "idsIn",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "specificIds",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "buyAndSwap721",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "dustThreshold",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "feeDistributor",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "ids",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "mintAndSell1155",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "vaultId",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256[]",
-				name: "ids",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "swapCallData",
-				type: "bytes"
-			},
-			{
-				internalType: "address payable",
-				name: "to",
-				type: "address"
-			}
-		],
-		name: "mintAndSell721",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "nftxFactory",
-		outputs: [
-			{
-				internalType: "contract INFTXVaultFactory",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		name: "nftxVaultAddresses",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256[]",
-				name: "",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "",
-				type: "uint256[]"
-			},
-			{
-				internalType: "bytes",
-				name: "",
-				type: "bytes"
-			}
-		],
-		name: "onERC1155BatchReceived",
-		outputs: [
-			{
-				internalType: "bytes4",
-				name: "",
-				type: "bytes4"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			},
-			{
-				internalType: "bytes",
-				name: "",
-				type: "bytes"
-			}
-		],
-		name: "onERC1155Received",
-		outputs: [
-			{
-				internalType: "bytes4",
-				name: "",
-				type: "bytes4"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			},
-			{
-				internalType: "bytes",
-				name: "",
-				type: "bytes"
-			}
-		],
-		name: "onERC721Received",
-		outputs: [
-			{
-				internalType: "bytes4",
-				name: "",
-				type: "bytes4"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "owner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bool",
-				name: "_paused",
-				type: "bool"
-			}
-		],
-		name: "pause",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "paused",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "renounceOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "token",
-				type: "address"
-			}
-		],
-		name: "rescue",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "_dustThreshold",
-				type: "uint256"
-			}
-		],
-		name: "setDustThreshold",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes4",
-				name: "interfaceId",
-				type: "bytes4"
-			}
-		],
-		name: "supportsInterface",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "transferOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var NFTXTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(NFTXTrade, _NFTTrade);
-  function NFTXTrade(orders) {
-    return _NFTTrade.call(this, Market.NFTX, orders) || this;
-  }
-  var _proto = NFTXTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var order = _step.value;
-      var calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [order.vaultId, order.tokenIds.length, order.tokenIds, order.swapCalldata, order.recipient]);
-      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var order = _step2.value;
-      for (var _iterator3 = _createForOfIteratorHelperLoose(order.tokenIds), _step3; !(_step3 = _iterator3()).done;) {
-        var tokenId = _step3.value;
-        buyItems.push({
-          tokenAddress: order.tokenAddress,
-          tokenId: tokenId,
-          tokenType: TokenType.ERC721
-        });
-      }
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = BigNumber.from(0);
-    for (var _iterator4 = _createForOfIteratorHelperLoose(this.orders), _step4; !(_step4 = _iterator4()).done;) {
-      var item = _step4.value;
-      total = total.add(item.value);
-    }
-    return total;
-  };
-  return NFTXTrade;
-}(NFTTrade);
-NFTXTrade.INTERFACE = /*#__PURE__*/new Interface(abi$3);
-
-var abi$4 = [
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "conduitController",
-				type: "address"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		inputs: [
-		],
-		name: "BadContractSignature",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "BadFraction",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "token",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "BadReturnValueFromERC20OnTransfer",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint8",
-				name: "v",
-				type: "uint8"
-			}
-		],
-		name: "BadSignatureV",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "ConsiderationCriteriaResolverOutOfRange",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "orderIndex",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "considerationIndex",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "shortfallAmount",
-				type: "uint256"
-			}
-		],
-		name: "ConsiderationNotMet",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "CriteriaNotEnabledForItem",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "token",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256[]",
-				name: "identifiers",
-				type: "uint256[]"
-			},
-			{
-				internalType: "uint256[]",
-				name: "amounts",
-				type: "uint256[]"
-			}
-		],
-		name: "ERC1155BatchTransferGenericFailure",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "account",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "EtherTransferGenericFailure",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InexactFraction",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InsufficientEtherSupplied",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "Invalid1155BatchTransferEncoding",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidBasicOrderParameterEncoding",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "conduit",
-				type: "address"
-			}
-		],
-		name: "InvalidCallToConduit",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidCanceller",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "conduitKey",
-				type: "bytes32"
-			},
-			{
-				internalType: "address",
-				name: "conduit",
-				type: "address"
-			}
-		],
-		name: "InvalidConduit",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidERC721TransferAmount",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidFulfillmentComponentData",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "value",
-				type: "uint256"
-			}
-		],
-		name: "InvalidMsgValue",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidNativeOfferItem",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidProof",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "InvalidRestrictedOrder",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidSignature",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidSigner",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "InvalidTime",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "MismatchedFulfillmentOfferAndConsiderationComponents",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "enum Side",
-				name: "side",
-				type: "uint8"
-			}
-		],
-		name: "MissingFulfillmentComponentOnAggregation",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "MissingItemAmount",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "MissingOriginalConsiderationItems",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "account",
-				type: "address"
-			}
-		],
-		name: "NoContract",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoReentrantCalls",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "NoSpecifiedOrdersAvailable",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "OfferAndConsiderationRequiredOnFulfillment",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "OfferCriteriaResolverOutOfRange",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "OrderAlreadyFilled",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "OrderCriteriaResolverOutOfRange",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "OrderIsCancelled",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "OrderPartiallyFilled",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "PartialFillsNotEnabledForOrder",
-		type: "error"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "token",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "identifier",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "TokenTransferGenericFailure",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "UnresolvedConsiderationCriteria",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "UnresolvedOfferCriteria",
-		type: "error"
-	},
-	{
-		inputs: [
-		],
-		name: "UnusedItemParameters",
-		type: "error"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "newCounter",
-				type: "uint256"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			}
-		],
-		name: "CounterIncremented",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "zone",
-				type: "address"
-			}
-		],
-		name: "OrderCancelled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "zone",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "recipient",
-				type: "address"
-			},
-			{
-				components: [
-					{
-						internalType: "enum ItemType",
-						name: "itemType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "token",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "amount",
-						type: "uint256"
-					}
-				],
-				indexed: false,
-				internalType: "struct SpentItem[]",
-				name: "offer",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "enum ItemType",
-						name: "itemType",
-						type: "uint8"
-					},
-					{
-						internalType: "address",
-						name: "token",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "amount",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "recipient",
-						type: "address"
-					}
-				],
-				indexed: false,
-				internalType: "struct ReceivedItem[]",
-				name: "consideration",
-				type: "tuple[]"
-			}
-		],
-		name: "OrderFulfilled",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "zone",
-				type: "address"
-			}
-		],
-		name: "OrderValidated",
-		type: "event"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "zone",
-						type: "address"
-					},
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifierOrCriteria",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "startAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endAmount",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OfferItem[]",
-						name: "offer",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifierOrCriteria",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "startAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ConsiderationItem[]",
-						name: "consideration",
-						type: "tuple[]"
-					},
-					{
-						internalType: "enum OrderType",
-						name: "orderType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "zoneHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "counter",
-						type: "uint256"
-					}
-				],
-				internalType: "struct OrderComponents[]",
-				name: "orders",
-				type: "tuple[]"
-			}
-		],
-		name: "cancel",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "cancelled",
-				type: "bool"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "uint120",
-						name: "numerator",
-						type: "uint120"
-					},
-					{
-						internalType: "uint120",
-						name: "denominator",
-						type: "uint120"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					},
-					{
-						internalType: "bytes",
-						name: "extraData",
-						type: "bytes"
-					}
-				],
-				internalType: "struct AdvancedOrder",
-				name: "advancedOrder",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "enum Side",
-						name: "side",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "index",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32[]",
-						name: "criteriaProof",
-						type: "bytes32[]"
-					}
-				],
-				internalType: "struct CriteriaResolver[]",
-				name: "criteriaResolvers",
-				type: "tuple[]"
-			},
-			{
-				internalType: "bytes32",
-				name: "fulfillerConduitKey",
-				type: "bytes32"
-			},
-			{
-				internalType: "address",
-				name: "recipient",
-				type: "address"
-			}
-		],
-		name: "fulfillAdvancedOrder",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "fulfilled",
-				type: "bool"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "uint120",
-						name: "numerator",
-						type: "uint120"
-					},
-					{
-						internalType: "uint120",
-						name: "denominator",
-						type: "uint120"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					},
-					{
-						internalType: "bytes",
-						name: "extraData",
-						type: "bytes"
-					}
-				],
-				internalType: "struct AdvancedOrder[]",
-				name: "advancedOrders",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "enum Side",
-						name: "side",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "index",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32[]",
-						name: "criteriaProof",
-						type: "bytes32[]"
-					}
-				],
-				internalType: "struct CriteriaResolver[]",
-				name: "criteriaResolvers",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIndex",
-						type: "uint256"
-					}
-				],
-				internalType: "struct FulfillmentComponent[][]",
-				name: "offerFulfillments",
-				type: "tuple[][]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIndex",
-						type: "uint256"
-					}
-				],
-				internalType: "struct FulfillmentComponent[][]",
-				name: "considerationFulfillments",
-				type: "tuple[][]"
-			},
-			{
-				internalType: "bytes32",
-				name: "fulfillerConduitKey",
-				type: "bytes32"
-			},
-			{
-				internalType: "address",
-				name: "recipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "maximumFulfilled",
-				type: "uint256"
-			}
-		],
-		name: "fulfillAvailableAdvancedOrders",
-		outputs: [
-			{
-				internalType: "bool[]",
-				name: "availableOrders",
-				type: "bool[]"
-			},
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifier",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ReceivedItem",
-						name: "item",
-						type: "tuple"
-					},
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					}
-				],
-				internalType: "struct Execution[]",
-				name: "executions",
-				type: "tuple[]"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct Order[]",
-				name: "orders",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIndex",
-						type: "uint256"
-					}
-				],
-				internalType: "struct FulfillmentComponent[][]",
-				name: "offerFulfillments",
-				type: "tuple[][]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIndex",
-						type: "uint256"
-					}
-				],
-				internalType: "struct FulfillmentComponent[][]",
-				name: "considerationFulfillments",
-				type: "tuple[][]"
-			},
-			{
-				internalType: "bytes32",
-				name: "fulfillerConduitKey",
-				type: "bytes32"
-			},
-			{
-				internalType: "uint256",
-				name: "maximumFulfilled",
-				type: "uint256"
-			}
-		],
-		name: "fulfillAvailableOrders",
-		outputs: [
-			{
-				internalType: "bool[]",
-				name: "availableOrders",
-				type: "bool[]"
-			},
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifier",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ReceivedItem",
-						name: "item",
-						type: "tuple"
-					},
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					}
-				],
-				internalType: "struct Execution[]",
-				name: "executions",
-				type: "tuple[]"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "considerationToken",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "considerationIdentifier",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "considerationAmount",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "zone",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "offerToken",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "offerIdentifier",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "offerAmount",
-						type: "uint256"
-					},
-					{
-						internalType: "enum BasicOrderType",
-						name: "basicOrderType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "zoneHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "offererConduitKey",
-						type: "bytes32"
-					},
-					{
-						internalType: "bytes32",
-						name: "fulfillerConduitKey",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "totalOriginalAdditionalRecipients",
-						type: "uint256"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct AdditionalRecipient[]",
-						name: "additionalRecipients",
-						type: "tuple[]"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct BasicOrderParameters",
-				name: "parameters",
-				type: "tuple"
-			}
-		],
-		name: "fulfillBasicOrder",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "fulfilled",
-				type: "bool"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct Order",
-				name: "order",
-				type: "tuple"
-			},
-			{
-				internalType: "bytes32",
-				name: "fulfillerConduitKey",
-				type: "bytes32"
-			}
-		],
-		name: "fulfillOrder",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "fulfilled",
-				type: "bool"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "offerer",
-				type: "address"
-			}
-		],
-		name: "getCounter",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "counter",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "zone",
-						type: "address"
-					},
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifierOrCriteria",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "startAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endAmount",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OfferItem[]",
-						name: "offer",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifierOrCriteria",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "startAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endAmount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ConsiderationItem[]",
-						name: "consideration",
-						type: "tuple[]"
-					},
-					{
-						internalType: "enum OrderType",
-						name: "orderType",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "startTime",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "endTime",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "zoneHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint256",
-						name: "counter",
-						type: "uint256"
-					}
-				],
-				internalType: "struct OrderComponents",
-				name: "order",
-				type: "tuple"
-			}
-		],
-		name: "getOrderHash",
-		outputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "orderHash",
-				type: "bytes32"
-			}
-		],
-		name: "getOrderStatus",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "isValidated",
-				type: "bool"
-			},
-			{
-				internalType: "bool",
-				name: "isCancelled",
-				type: "bool"
-			},
-			{
-				internalType: "uint256",
-				name: "totalFilled",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "totalSize",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "incrementCounter",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "newCounter",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "information",
-		outputs: [
-			{
-				internalType: "string",
-				name: "version",
-				type: "string"
-			},
-			{
-				internalType: "bytes32",
-				name: "domainSeparator",
-				type: "bytes32"
-			},
-			{
-				internalType: "address",
-				name: "conduitController",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "uint120",
-						name: "numerator",
-						type: "uint120"
-					},
-					{
-						internalType: "uint120",
-						name: "denominator",
-						type: "uint120"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					},
-					{
-						internalType: "bytes",
-						name: "extraData",
-						type: "bytes"
-					}
-				],
-				internalType: "struct AdvancedOrder[]",
-				name: "advancedOrders",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "orderIndex",
-						type: "uint256"
-					},
-					{
-						internalType: "enum Side",
-						name: "side",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "index",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "identifier",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32[]",
-						name: "criteriaProof",
-						type: "bytes32[]"
-					}
-				],
-				internalType: "struct CriteriaResolver[]",
-				name: "criteriaResolvers",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "orderIndex",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIndex",
-								type: "uint256"
-							}
-						],
-						internalType: "struct FulfillmentComponent[]",
-						name: "offerComponents",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "orderIndex",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIndex",
-								type: "uint256"
-							}
-						],
-						internalType: "struct FulfillmentComponent[]",
-						name: "considerationComponents",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct Fulfillment[]",
-				name: "fulfillments",
-				type: "tuple[]"
-			}
-		],
-		name: "matchAdvancedOrders",
-		outputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifier",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ReceivedItem",
-						name: "item",
-						type: "tuple"
-					},
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					}
-				],
-				internalType: "struct Execution[]",
-				name: "executions",
-				type: "tuple[]"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct Order[]",
-				name: "orders",
-				type: "tuple[]"
-			},
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "orderIndex",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIndex",
-								type: "uint256"
-							}
-						],
-						internalType: "struct FulfillmentComponent[]",
-						name: "offerComponents",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "orderIndex",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIndex",
-								type: "uint256"
-							}
-						],
-						internalType: "struct FulfillmentComponent[]",
-						name: "considerationComponents",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct Fulfillment[]",
-				name: "fulfillments",
-				type: "tuple[]"
-			}
-		],
-		name: "matchOrders",
-		outputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "enum ItemType",
-								name: "itemType",
-								type: "uint8"
-							},
-							{
-								internalType: "address",
-								name: "token",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "identifier",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amount",
-								type: "uint256"
-							},
-							{
-								internalType: "address payable",
-								name: "recipient",
-								type: "address"
-							}
-						],
-						internalType: "struct ReceivedItem",
-						name: "item",
-						type: "tuple"
-					},
-					{
-						internalType: "address",
-						name: "offerer",
-						type: "address"
-					},
-					{
-						internalType: "bytes32",
-						name: "conduitKey",
-						type: "bytes32"
-					}
-				],
-				internalType: "struct Execution[]",
-				name: "executions",
-				type: "tuple[]"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "name",
-		outputs: [
-			{
-				internalType: "string",
-				name: "contractName",
-				type: "string"
-			}
-		],
-		stateMutability: "pure",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "address",
-								name: "offerer",
-								type: "address"
-							},
-							{
-								internalType: "address",
-								name: "zone",
-								type: "address"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									}
-								],
-								internalType: "struct OfferItem[]",
-								name: "offer",
-								type: "tuple[]"
-							},
-							{
-								components: [
-									{
-										internalType: "enum ItemType",
-										name: "itemType",
-										type: "uint8"
-									},
-									{
-										internalType: "address",
-										name: "token",
-										type: "address"
-									},
-									{
-										internalType: "uint256",
-										name: "identifierOrCriteria",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "startAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "uint256",
-										name: "endAmount",
-										type: "uint256"
-									},
-									{
-										internalType: "address payable",
-										name: "recipient",
-										type: "address"
-									}
-								],
-								internalType: "struct ConsiderationItem[]",
-								name: "consideration",
-								type: "tuple[]"
-							},
-							{
-								internalType: "enum OrderType",
-								name: "orderType",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "startTime",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "endTime",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "zoneHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "conduitKey",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint256",
-								name: "totalOriginalConsiderationItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct OrderParameters",
-						name: "parameters",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes",
-						name: "signature",
-						type: "bytes"
-					}
-				],
-				internalType: "struct Order[]",
-				name: "orders",
-				type: "tuple[]"
-			}
-		],
-		name: "validate",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "validated",
-				type: "bool"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	}
-];
-
-var SeaportTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(SeaportTrade, _NFTTrade);
-  function SeaportTrade(orders) {
-    return _NFTTrade.call(this, Market.Seaport, orders) || this;
-  }
-  var _proto = SeaportTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var order = _step.value;
-      var advancedOrders = [];
-      var orderFulfillments = order.items.map(function (_, index) {
-        return [{
-          orderIndex: index,
-          itemIndex: 0
-        }];
-      });
-      var considerationFulFillments = this.getConsiderationFulfillments(order.items);
-      for (var _iterator2 = _createForOfIteratorHelperLoose(order.items), _step2; !(_step2 = _iterator2()).done;) {
-        var item = _step2.value;
-        var _this$getAdvancedOrde = this.getAdvancedOrderParams(item),
-          advancedOrder = _this$getAdvancedOrde.advancedOrder;
-        advancedOrders.push(advancedOrder);
-      }
-      var calldata = void 0;
-      if (advancedOrders.length == 1) {
-        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [advancedOrders[0], [], SeaportTrade.OPENSEA_CONDUIT_KEY, order.recipient]);
-      } else {
-        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [advancedOrders, [], orderFulfillments, considerationFulFillments, SeaportTrade.OPENSEA_CONDUIT_KEY, order.recipient, 100]);
-      }
-      if (!!order.inputTokenProcessing) {
-        for (var _iterator3 = _createForOfIteratorHelperLoose(order.inputTokenProcessing), _step3; !(_step3 = _iterator3()).done;) {
-          var inputToken = _step3.value;
-          encodeInputTokenOptions(planner, {
-            approval: inputToken.protocolApproval ? {
-              token: inputToken.token,
-              protocol: order.protocolAddress
-            } : undefined,
-            permit2Permit: inputToken.permit2Permit,
-            permit2TransferFrom: inputToken.permit2TransferFrom ? {
-              token: inputToken.token,
-              amount: this.getTotalOrderPrice(order, inputToken.token).toString()
-            } : undefined
-          });
-        }
-      }
-      planner.addCommand(this.commandMap(order.protocolAddress), [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator4 = _createForOfIteratorHelperLoose(this.orders), _step4; !(_step4 = _iterator4()).done;) {
-      var order = _step4.value;
-      for (var _iterator5 = _createForOfIteratorHelperLoose(order.items), _step5; !(_step5 = _iterator5()).done;) {
-        var item = _step5.value;
-        for (var _iterator6 = _createForOfIteratorHelperLoose(item.parameters.offer), _step6; !(_step6 = _iterator6()).done;) {
-          var offer = _step6.value;
-          buyItems.push({
-            tokenAddress: offer.token,
-            tokenId: offer.identifierOrCriteria,
-            tokenType: TokenType.ERC721
-          });
-        }
-      }
-    }
-    return buyItems;
-  };
-  _proto.getInputTokens = function getInputTokens() {
-    var inputTokens = new Set();
-    for (var _iterator7 = _createForOfIteratorHelperLoose(this.orders), _step7; !(_step7 = _iterator7()).done;) {
-      var order = _step7.value;
-      for (var _iterator8 = _createForOfIteratorHelperLoose(order.items), _step8; !(_step8 = _iterator8()).done;) {
-        var item = _step8.value;
-        for (var _iterator9 = _createForOfIteratorHelperLoose(item.parameters.consideration), _step9; !(_step9 = _iterator9()).done;) {
-          var consideration = _step9.value;
-          var token = consideration.token.toLowerCase();
-          inputTokens.add(token);
-        }
-      }
-    }
-    return inputTokens;
-  };
-  _proto.getTotalOrderPrice = function getTotalOrderPrice(order, token) {
-    if (token === void 0) {
-      token = ETH_ADDRESS;
-    }
-    var totalOrderPrice = BigNumber.from(0);
-    for (var _iterator10 = _createForOfIteratorHelperLoose(order.items), _step10; !(_step10 = _iterator10()).done;) {
-      var item = _step10.value;
-      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token));
-    }
-    return totalOrderPrice;
-  };
-  _proto.getTotalPrice = function getTotalPrice(token) {
-    if (token === void 0) {
-      token = ETH_ADDRESS;
-    }
-    var totalPrice = BigNumber.from(0);
-    for (var _iterator11 = _createForOfIteratorHelperLoose(this.orders), _step11; !(_step11 = _iterator11()).done;) {
-      var order = _step11.value;
-      for (var _iterator12 = _createForOfIteratorHelperLoose(order.items), _step12; !(_step12 = _iterator12()).done;) {
-        var item = _step12.value;
-        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token));
-      }
-    }
-    return totalPrice;
-  };
-  _proto.commandMap = function commandMap(protocolAddress) {
-    switch (protocolAddress.toLowerCase()) {
-      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc':
-        // Seaport v1.5
-        return CommandType.SEAPORT_V1_5;
-      case '0x00000000000001ad428e4906ae43d8f9852d0dd6':
-        // Seaport v1.4
-        return CommandType.SEAPORT_V1_4;
-      default:
-        throw new Error('unsupported Seaport address');
-    }
-  };
-  _proto.getConsiderationFulfillments = function getConsiderationFulfillments(protocolDatas) {
-    var considerationFulfillments = [];
-    var considerationRecipients = [];
-    for (var i in protocolDatas) {
-      var protocolData = protocolDatas[i];
-      var _loop = function _loop() {
-        var item = protocolData.parameters.consideration[j];
-        if (considerationRecipients.findIndex(function (x) {
-          return x === item.recipient;
-        }) === -1) {
-          considerationRecipients.push(item.recipient);
-        }
-        var recipientIndex = considerationRecipients.findIndex(function (x) {
-          return x === item.recipient;
-        });
-        if (!considerationFulfillments[recipientIndex]) {
-          considerationFulfillments.push([{
-            orderIndex: i,
-            itemIndex: j
-          }]);
-        } else {
-          considerationFulfillments[recipientIndex].push({
-            orderIndex: i,
-            itemIndex: j
-          });
-        }
-      };
-      for (var j in protocolData.parameters.consideration) {
-        _loop();
-      }
-    }
-    return considerationFulfillments;
-  };
-  _proto.getAdvancedOrderParams = function getAdvancedOrderParams(data) {
-    var advancedOrder = {
-      parameters: data.parameters,
-      numerator: BigNumber.from('1'),
-      denominator: BigNumber.from('1'),
-      signature: data.signature,
-      extraData: '0x00'
-    };
-    return {
-      advancedOrder: advancedOrder
-    };
-  };
-  _proto.calculateValue = function calculateValue(considerations, token) {
-    return considerations.reduce(function (amt, consideration) {
-      return consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt;
-    }, BigNumber.from(0));
-  };
-  return SeaportTrade;
-}(NFTTrade);
-SeaportTrade.INTERFACE = /*#__PURE__*/new Interface(abi$4);
-SeaportTrade.OPENSEA_CONDUIT_KEY = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000';
-
-var abi$5 = [
-	{
-		inputs: [
-			{
-				internalType: "contract ILSSVMPairFactoryLike",
-				name: "_factory",
-				type: "address"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "constructor"
-	},
-	{
-		inputs: [
-		],
-		name: "factory",
-		outputs: [
-			{
-				internalType: "contract ILSSVMPairFactoryLike",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "contract ERC20",
-				name: "token",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				internalType: "enum ILSSVMPairFactoryLike.PairVariant",
-				name: "variant",
-				type: "uint8"
-			}
-		],
-		name: "pairTransferERC20From",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "contract IERC721",
-				name: "nft",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "from",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "id",
-				type: "uint256"
-			},
-			{
-				internalType: "enum ILSSVMPairFactoryLike.PairVariant",
-				name: "variant",
-				type: "uint8"
-			}
-		],
-		name: "pairTransferNFTFrom",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "numItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapAny",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "maxCost",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapAny[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapERC20ForAnyNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "maxCost",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapERC20ForSpecificNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								components: [
-									{
-										internalType: "contract LSSVMPair",
-										name: "pair",
-										type: "address"
-									},
-									{
-										internalType: "uint256[]",
-										name: "nftIds",
-										type: "uint256[]"
-									}
-								],
-								internalType: "struct LSSVMRouter.PairSwapSpecific",
-								name: "swapInfo",
-								type: "tuple"
-							},
-							{
-								internalType: "uint256",
-								name: "maxCost",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.RobustPairSwapSpecific[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								components: [
-									{
-										internalType: "contract LSSVMPair",
-										name: "pair",
-										type: "address"
-									},
-									{
-										internalType: "uint256[]",
-										name: "nftIds",
-										type: "uint256[]"
-									}
-								],
-								internalType: "struct LSSVMRouter.PairSwapSpecific",
-								name: "swapInfo",
-								type: "tuple"
-							},
-							{
-								internalType: "uint256",
-								name: "minOutput",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.RobustPairSwapSpecificForToken[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						internalType: "uint256",
-						name: "inputAmount",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "tokenRecipient",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "nftRecipient",
-						type: "address"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",
-				name: "params",
-				type: "tuple"
-			}
-		],
-		name: "robustSwapERC20ForSpecificNFTsAndNFTsToToken",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "numItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapAny",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "maxCost",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapAny[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapETHForAnyNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "maxCost",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapETHForSpecificNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								components: [
-									{
-										internalType: "contract LSSVMPair",
-										name: "pair",
-										type: "address"
-									},
-									{
-										internalType: "uint256[]",
-										name: "nftIds",
-										type: "uint256[]"
-									}
-								],
-								internalType: "struct LSSVMRouter.PairSwapSpecific",
-								name: "swapInfo",
-								type: "tuple"
-							},
-							{
-								internalType: "uint256",
-								name: "maxCost",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.RobustPairSwapSpecific[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								components: [
-									{
-										internalType: "contract LSSVMPair",
-										name: "pair",
-										type: "address"
-									},
-									{
-										internalType: "uint256[]",
-										name: "nftIds",
-										type: "uint256[]"
-									}
-								],
-								internalType: "struct LSSVMRouter.PairSwapSpecific",
-								name: "swapInfo",
-								type: "tuple"
-							},
-							{
-								internalType: "uint256",
-								name: "minOutput",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.RobustPairSwapSpecificForToken[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						internalType: "uint256",
-						name: "inputAmount",
-						type: "uint256"
-					},
-					{
-						internalType: "address payable",
-						name: "tokenRecipient",
-						type: "address"
-					},
-					{
-						internalType: "address",
-						name: "nftRecipient",
-						type: "address"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",
-				name: "params",
-				type: "tuple"
-			}
-		],
-		name: "robustSwapETHForSpecificNFTsAndNFTsToToken",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific",
-						name: "swapInfo",
-						type: "tuple"
-					},
-					{
-						internalType: "uint256",
-						name: "minOutput",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.RobustPairSwapSpecificForToken[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "tokenRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "robustSwapNFTsForToken",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "numItems",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapAny[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapERC20ForAnyNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256[]",
-						name: "nftIds",
-						type: "uint256[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapERC20ForSpecificNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "numItems",
-						type: "uint256"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapAny[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapETHForAnyNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256[]",
-						name: "nftIds",
-						type: "uint256[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapETHForSpecificNFTs",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "remainingValue",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "numItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapAny[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.NFTsForAnyNFTsTrade",
-				name: "trade",
-				type: "tuple"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForAnyNFTsThroughERC20",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "numItems",
-								type: "uint256"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapAny[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.NFTsForAnyNFTsTrade",
-				name: "trade",
-				type: "tuple"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForAnyNFTsThroughETH",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.NFTsForSpecificNFTsTrade",
-				name: "trade",
-				type: "tuple"
-			},
-			{
-				internalType: "uint256",
-				name: "inputAmount",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForSpecificNFTsThroughERC20",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "nftToTokenTrades",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "contract LSSVMPair",
-								name: "pair",
-								type: "address"
-							},
-							{
-								internalType: "uint256[]",
-								name: "nftIds",
-								type: "uint256[]"
-							}
-						],
-						internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-						name: "tokenToNFTTrades",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.NFTsForSpecificNFTsTrade",
-				name: "trade",
-				type: "tuple"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address payable",
-				name: "ethRecipient",
-				type: "address"
-			},
-			{
-				internalType: "address",
-				name: "nftRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForSpecificNFTsThroughETH",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "contract LSSVMPair",
-						name: "pair",
-						type: "address"
-					},
-					{
-						internalType: "uint256[]",
-						name: "nftIds",
-						type: "uint256[]"
-					}
-				],
-				internalType: "struct LSSVMRouter.PairSwapSpecific[]",
-				name: "swapList",
-				type: "tuple[]"
-			},
-			{
-				internalType: "uint256",
-				name: "minOutput",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "tokenRecipient",
-				type: "address"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			}
-		],
-		name: "swapNFTsForToken",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "outputAmount",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var SudoswapTrade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(SudoswapTrade, _NFTTrade);
-  function SudoswapTrade(orders) {
-    return _NFTTrade.call(this, Market.Sudoswap, orders) || this;
-  }
-  var _proto = SudoswapTrade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var order = _step.value;
-      var calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [order.swaps.map(function (swap) {
-        return {
-          swapInfo: swap.swapInfo,
-          maxCost: swap.maxCost
-        };
-      }), order.ethRecipient, order.nftRecipient, order.deadline]);
-      var value = order.swaps.reduce(function (prevVal, swap) {
-        return prevVal.add(swap.maxCost);
-      }, BigNumber.from(0));
-      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert);
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var order = _step2.value;
-      for (var _iterator3 = _createForOfIteratorHelperLoose(order.swaps), _step3; !(_step3 = _iterator3()).done;) {
-        var swap = _step3.value;
-        for (var _iterator4 = _createForOfIteratorHelperLoose(swap.swapInfo.nftIds), _step4; !(_step4 = _iterator4()).done;) {
-          var tokenId = _step4.value;
-          buyItems.push({
-            tokenAddress: swap.tokenAddress,
-            tokenId: tokenId,
-            tokenType: TokenType.ERC721
-          });
-        }
-      }
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = BigNumber.from(0);
-    for (var _iterator5 = _createForOfIteratorHelperLoose(this.orders), _step5; !(_step5 = _iterator5()).done;) {
-      var order = _step5.value;
-      for (var _iterator6 = _createForOfIteratorHelperLoose(order.swaps), _step6; !(_step6 = _iterator6()).done;) {
-        var swap = _step6.value;
-        total = total.add(swap.maxCost);
-      }
-    }
-    return total;
-  };
-  return SudoswapTrade;
-}(NFTTrade);
-SudoswapTrade.INTERFACE = /*#__PURE__*/new Interface(abi$5);
-
-var abi$6 = [
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "bytes32",
-				name: "itemHash",
-				type: "bytes32"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "incentive",
-				type: "uint256"
-			}
-		],
-		name: "EvAuctionRefund",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "bytes32",
-				name: "itemHash",
-				type: "bytes32"
-			}
-		],
-		name: "EvCancel",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "delegate",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isRemoval",
-				type: "bool"
-			}
-		],
-		name: "EvDelegate",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "index",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "bytes",
-				name: "error",
-				type: "bytes"
-			}
-		],
-		name: "EvFailure",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "newValue",
-				type: "uint256"
-			}
-		],
-		name: "EvFeeCapUpdate",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "bytes32",
-				name: "itemHash",
-				type: "bytes32"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "maker",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "taker",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "orderSalt",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "settleSalt",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "intent",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "delegateType",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			},
-			{
-				indexed: false,
-				internalType: "contract IERC20Upgradeable",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "bytes",
-				name: "dataMask",
-				type: "bytes"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes",
-						name: "data",
-						type: "bytes"
-					}
-				],
-				indexed: false,
-				internalType: "struct Market.OrderItem",
-				name: "item",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum Market.Op",
-						name: "op",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "orderIdx",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIdx",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "itemHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "contract IDelegate",
-						name: "executionDelegate",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "dataReplacement",
-						type: "bytes"
-					},
-					{
-						internalType: "uint256",
-						name: "bidIncentivePct",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "aucMinIncrementPct",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "aucIncDurationSecs",
-						type: "uint256"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "percentage",
-								type: "uint256"
-							},
-							{
-								internalType: "address",
-								name: "to",
-								type: "address"
-							}
-						],
-						internalType: "struct Market.Fee[]",
-						name: "fees",
-						type: "tuple[]"
-					}
-				],
-				indexed: false,
-				internalType: "struct Market.SettleDetail",
-				name: "detail",
-				type: "tuple"
-			}
-		],
-		name: "EvInventory",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "bytes32",
-				name: "itemHash",
-				type: "bytes32"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "currency",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "address",
-				name: "to",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "uint256",
-				name: "amount",
-				type: "uint256"
-			}
-		],
-		name: "EvProfit",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "signer",
-				type: "address"
-			},
-			{
-				indexed: false,
-				internalType: "bool",
-				name: "isRemoval",
-				type: "bool"
-			}
-		],
-		name: "EvSigner",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: true,
-				internalType: "address",
-				name: "previousOwner",
-				type: "address"
-			},
-			{
-				indexed: true,
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "OwnershipTransferred",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "account",
-				type: "address"
-			}
-		],
-		name: "Paused",
-		type: "event"
-	},
-	{
-		anonymous: false,
-		inputs: [
-			{
-				indexed: false,
-				internalType: "address",
-				name: "account",
-				type: "address"
-			}
-		],
-		name: "Unpaused",
-		type: "event"
-	},
-	{
-		inputs: [
-		],
-		name: "RATE_BASE",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32[]",
-				name: "itemHashes",
-				type: "bytes32[]"
-			},
-			{
-				internalType: "uint256",
-				name: "deadline",
-				type: "uint256"
-			},
-			{
-				internalType: "uint8",
-				name: "v",
-				type: "uint8"
-			},
-			{
-				internalType: "bytes32",
-				name: "r",
-				type: "bytes32"
-			},
-			{
-				internalType: "bytes32",
-				name: "s",
-				type: "bytes32"
-			}
-		],
-		name: "cancel",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "delegates",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "feeCapPct",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "feeCapPct_",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "weth_",
-				type: "address"
-			}
-		],
-		name: "initialize",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		name: "inventoryStatus",
-		outputs: [
-			{
-				internalType: "enum Market.InvStatus",
-				name: "",
-				type: "uint8"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "bytes32",
-				name: "",
-				type: "bytes32"
-			}
-		],
-		name: "ongoingAuctions",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "price",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "netPrice",
-				type: "uint256"
-			},
-			{
-				internalType: "uint256",
-				name: "endAt",
-				type: "uint256"
-			},
-			{
-				internalType: "address",
-				name: "bidder",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "owner",
-		outputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "pause",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "paused",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "renounceOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "address",
-								name: "user",
-								type: "address"
-							},
-							{
-								internalType: "uint256",
-								name: "network",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "intent",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "delegateType",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "deadline",
-								type: "uint256"
-							},
-							{
-								internalType: "contract IERC20Upgradeable",
-								name: "currency",
-								type: "address"
-							},
-							{
-								internalType: "bytes",
-								name: "dataMask",
-								type: "bytes"
-							},
-							{
-								components: [
-									{
-										internalType: "uint256",
-										name: "price",
-										type: "uint256"
-									},
-									{
-										internalType: "bytes",
-										name: "data",
-										type: "bytes"
-									}
-								],
-								internalType: "struct Market.OrderItem[]",
-								name: "items",
-								type: "tuple[]"
-							},
-							{
-								internalType: "bytes32",
-								name: "r",
-								type: "bytes32"
-							},
-							{
-								internalType: "bytes32",
-								name: "s",
-								type: "bytes32"
-							},
-							{
-								internalType: "uint8",
-								name: "v",
-								type: "uint8"
-							},
-							{
-								internalType: "uint8",
-								name: "signVersion",
-								type: "uint8"
-							}
-						],
-						internalType: "struct Market.Order[]",
-						name: "orders",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "enum Market.Op",
-								name: "op",
-								type: "uint8"
-							},
-							{
-								internalType: "uint256",
-								name: "orderIdx",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "itemIdx",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "price",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes32",
-								name: "itemHash",
-								type: "bytes32"
-							},
-							{
-								internalType: "contract IDelegate",
-								name: "executionDelegate",
-								type: "address"
-							},
-							{
-								internalType: "bytes",
-								name: "dataReplacement",
-								type: "bytes"
-							},
-							{
-								internalType: "uint256",
-								name: "bidIncentivePct",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "aucMinIncrementPct",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "aucIncDurationSecs",
-								type: "uint256"
-							},
-							{
-								components: [
-									{
-										internalType: "uint256",
-										name: "percentage",
-										type: "uint256"
-									},
-									{
-										internalType: "address",
-										name: "to",
-										type: "address"
-									}
-								],
-								internalType: "struct Market.Fee[]",
-								name: "fees",
-								type: "tuple[]"
-							}
-						],
-						internalType: "struct Market.SettleDetail[]",
-						name: "details",
-						type: "tuple[]"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "salt",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "deadline",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amountToEth",
-								type: "uint256"
-							},
-							{
-								internalType: "uint256",
-								name: "amountToWeth",
-								type: "uint256"
-							},
-							{
-								internalType: "address",
-								name: "user",
-								type: "address"
-							},
-							{
-								internalType: "bool",
-								name: "canFail",
-								type: "bool"
-							}
-						],
-						internalType: "struct Market.SettleShared",
-						name: "shared",
-						type: "tuple"
-					},
-					{
-						internalType: "bytes32",
-						name: "r",
-						type: "bytes32"
-					},
-					{
-						internalType: "bytes32",
-						name: "s",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint8",
-						name: "v",
-						type: "uint8"
-					}
-				],
-				internalType: "struct Market.RunInput",
-				name: "input",
-				type: "tuple"
-			}
-		],
-		name: "run",
-		outputs: [
-		],
-		stateMutability: "payable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "address",
-						name: "user",
-						type: "address"
-					},
-					{
-						internalType: "uint256",
-						name: "network",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "intent",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "delegateType",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "deadline",
-						type: "uint256"
-					},
-					{
-						internalType: "contract IERC20Upgradeable",
-						name: "currency",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "dataMask",
-						type: "bytes"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "price",
-								type: "uint256"
-							},
-							{
-								internalType: "bytes",
-								name: "data",
-								type: "bytes"
-							}
-						],
-						internalType: "struct Market.OrderItem[]",
-						name: "items",
-						type: "tuple[]"
-					},
-					{
-						internalType: "bytes32",
-						name: "r",
-						type: "bytes32"
-					},
-					{
-						internalType: "bytes32",
-						name: "s",
-						type: "bytes32"
-					},
-					{
-						internalType: "uint8",
-						name: "v",
-						type: "uint8"
-					},
-					{
-						internalType: "uint8",
-						name: "signVersion",
-						type: "uint8"
-					}
-				],
-				internalType: "struct Market.Order",
-				name: "order",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "uint256",
-						name: "salt",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "deadline",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "amountToEth",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "amountToWeth",
-						type: "uint256"
-					},
-					{
-						internalType: "address",
-						name: "user",
-						type: "address"
-					},
-					{
-						internalType: "bool",
-						name: "canFail",
-						type: "bool"
-					}
-				],
-				internalType: "struct Market.SettleShared",
-				name: "shared",
-				type: "tuple"
-			},
-			{
-				components: [
-					{
-						internalType: "enum Market.Op",
-						name: "op",
-						type: "uint8"
-					},
-					{
-						internalType: "uint256",
-						name: "orderIdx",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "itemIdx",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "price",
-						type: "uint256"
-					},
-					{
-						internalType: "bytes32",
-						name: "itemHash",
-						type: "bytes32"
-					},
-					{
-						internalType: "contract IDelegate",
-						name: "executionDelegate",
-						type: "address"
-					},
-					{
-						internalType: "bytes",
-						name: "dataReplacement",
-						type: "bytes"
-					},
-					{
-						internalType: "uint256",
-						name: "bidIncentivePct",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "aucMinIncrementPct",
-						type: "uint256"
-					},
-					{
-						internalType: "uint256",
-						name: "aucIncDurationSecs",
-						type: "uint256"
-					},
-					{
-						components: [
-							{
-								internalType: "uint256",
-								name: "percentage",
-								type: "uint256"
-							},
-							{
-								internalType: "address",
-								name: "to",
-								type: "address"
-							}
-						],
-						internalType: "struct Market.Fee[]",
-						name: "fees",
-						type: "tuple[]"
-					}
-				],
-				internalType: "struct Market.SettleDetail",
-				name: "detail",
-				type: "tuple"
-			}
-		],
-		name: "run1",
-		outputs: [
-			{
-				internalType: "uint256",
-				name: "",
-				type: "uint256"
-			}
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "",
-				type: "address"
-			}
-		],
-		name: "signers",
-		outputs: [
-			{
-				internalType: "bool",
-				name: "",
-				type: "bool"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address",
-				name: "newOwner",
-				type: "address"
-			}
-		],
-		name: "transferOwnership",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "unpause",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address[]",
-				name: "toAdd",
-				type: "address[]"
-			},
-			{
-				internalType: "address[]",
-				name: "toRemove",
-				type: "address[]"
-			}
-		],
-		name: "updateDelegates",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "uint256",
-				name: "val",
-				type: "uint256"
-			}
-		],
-		name: "updateFeeCap",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-			{
-				internalType: "address[]",
-				name: "toAdd",
-				type: "address[]"
-			},
-			{
-				internalType: "address[]",
-				name: "toRemove",
-				type: "address[]"
-			}
-		],
-		name: "updateSigners",
-		outputs: [
-		],
-		stateMutability: "nonpayable",
-		type: "function"
-	},
-	{
-		inputs: [
-		],
-		name: "weth",
-		outputs: [
-			{
-				internalType: "contract IWETHUpgradable",
-				name: "",
-				type: "address"
-			}
-		],
-		stateMutability: "view",
-		type: "function"
-	},
-	{
-		stateMutability: "payable",
-		type: "receive"
-	}
-];
-
-var X2Y2Trade = /*#__PURE__*/function (_NFTTrade) {
-  _inheritsLoose(X2Y2Trade, _NFTTrade);
-  function X2Y2Trade(orders) {
-    return _NFTTrade.call(this, Market.X2Y2, orders) || this;
-  }
-  var _proto = X2Y2Trade.prototype;
-  _proto.encode = function encode(planner, config) {
-    for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
-      var item = _step.value;
-      var functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'));
-      var calldata = functionSelector + item.signedInput.slice(2);
-      if (item.tokenType == TokenType.ERC721) {
-        planner.addCommand(CommandType.X2Y2_721, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId], config.allowRevert);
-      } else if (item.tokenType == TokenType.ERC1155) {
-        planner.addCommand(CommandType.X2Y2_1155, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount], config.allowRevert);
-      }
-    }
-  };
-  _proto.getBuyItems = function getBuyItems() {
-    var buyItems = [];
-    for (var _iterator2 = _createForOfIteratorHelperLoose(this.orders), _step2; !(_step2 = _iterator2()).done;) {
-      var item = _step2.value;
-      buyItems.push({
-        tokenAddress: item.tokenAddress,
-        tokenId: item.tokenId,
-        tokenType: item.tokenType
-      });
-    }
-    return buyItems;
-  };
-  _proto.getTotalPrice = function getTotalPrice() {
-    var total = BigNumber.from(0);
-    for (var _iterator3 = _createForOfIteratorHelperLoose(this.orders), _step3; !(_step3 = _iterator3()).done;) {
-      var item = _step3.value;
-      total = total.add(item.price);
-    }
-    return total;
-  };
-  return X2Y2Trade;
-}(NFTTrade);
-X2Y2Trade.INTERFACE = /*#__PURE__*/new Interface(abi$6);
-
-var UnwrapWETH = /*#__PURE__*/function () {
-  function UnwrapWETH(amount, chainId, permit2) {
-    this.tradeType = RouterTradeType.UnwrapWETH;
-    this.wethAddress = WETH_ADDRESS(chainId);
-    this.amount = amount;
-    if (!!permit2) {
-      !(permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase()) ? process.env.NODE_ENV !== "production" ? invariant(false, "must be permitting WETH address: " + this.wethAddress) : invariant(false) : void 0;
-      !(permit2.details.amount >= amount) ? process.env.NODE_ENV !== "production" ? invariant(false, "Did not permit enough WETH for unwrapWETH transaction") : invariant(false) : void 0;
-      this.permit2Data = permit2;
-    }
-  }
-  var _proto = UnwrapWETH.prototype;
-  _proto.encode = function encode(planner, _) {
-    encodeInputTokenOptions(planner, {
-      permit2Permit: this.permit2Data,
-      permit2TransferFrom: {
-        token: this.wethAddress,
-        amount: this.amount.toString()
-      }
-    });
-    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount]);
-  };
-  return UnwrapWETH;
-}();
-
-var PoolType;
-(function (PoolType) {
-  PoolType["V2Pool"] = "v2-pool";
-  PoolType["V3Pool"] = "v3-pool";
-})(PoolType || (PoolType = {}));
-var isNativeCurrency = function isNativeCurrency(address) {
-  return address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase();
-};
-// Helper class to convert routing-specific quote entities to RouterTrade entities
-// the returned RouterTrade can then be used to build the UniswapTrade entity in this package
-var RouterTradeAdapter = /*#__PURE__*/function () {
-  function RouterTradeAdapter() {}
-  // Generate a RouterTrade using fields from a classic quote response
-  RouterTradeAdapter.fromClassicQuote = function fromClassicQuote(quote) {
-    var route = quote.route,
-      tokenIn = quote.tokenIn,
-      tokenOut = quote.tokenOut;
-    if (!route) throw new Error('Expected route to be present');
-    if (!route.length) throw new Error('Expected there to be at least one route');
-    if (route.some(function (r) {
-      return !r.length;
-    })) throw new Error('Expected all routes to have at least one pool');
-    var firstRoute = route[0];
-    var tokenInData = firstRoute[0].tokenIn;
-    var tokenOutData = firstRoute[firstRoute.length - 1].tokenOut;
-    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present');
-    if (tokenInData.chainId !== tokenOutData.chainId) throw new Error('Expected tokenIn and tokenOut to be have same chainId');
-    var parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData);
-    var parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData);
-    var typedRoutes = route.map(function (subRoute) {
-      var rawAmountIn = subRoute[0].amountIn;
-      var rawAmountOut = subRoute[subRoute.length - 1].amountOut;
-      if (!rawAmountIn || !rawAmountOut) {
-        throw new Error('Expected both raw amountIn and raw amountOut to be present');
-      }
-      var inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn);
-      var outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut);
-      var isOnlyV2 = RouterTradeAdapter.isVersionedRoute(PoolType.V2Pool, subRoute);
-      var isOnlyV3 = RouterTradeAdapter.isVersionedRoute(PoolType.V3Pool, subRoute);
-      return {
-        routev3: isOnlyV3 ? new Route(subRoute.map(RouterTradeAdapter.toPool), parsedCurrencyIn, parsedCurrencyOut) : null,
-        routev2: isOnlyV2 ? new Route$1(subRoute.map(RouterTradeAdapter.toPair), parsedCurrencyIn, parsedCurrencyOut) : null,
-        mixedRoute: !isOnlyV3 && !isOnlyV2 ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut) : null,
-        inputAmount: inputAmount,
-        outputAmount: outputAmount
-      };
-    });
-    return new Trade$2({
-      v2Routes: typedRoutes.filter(function (route) {
-        return route.routev2;
-      }).map(function (route) {
-        return {
-          routev2: route.routev2,
-          inputAmount: route.inputAmount,
-          outputAmount: route.outputAmount
-        };
-      }),
-      v3Routes: typedRoutes.filter(function (route) {
-        return route.routev3;
-      }).map(function (route) {
-        return {
-          routev3: route.routev3,
-          inputAmount: route.inputAmount,
-          outputAmount: route.outputAmount
-        };
-      }),
-      mixedRoutes: typedRoutes.filter(function (route) {
-        return route.mixedRoute;
-      }).map(function (route) {
-        return {
-          mixedRoute: route.mixedRoute,
-          inputAmount: route.inputAmount,
-          outputAmount: route.outputAmount
-        };
-      }),
-      tradeType: quote.tradeType
-    });
-  };
-  RouterTradeAdapter.toCurrency = function toCurrency(isNative, token) {
-    if (isNative) {
-      return Ether.onChain(token.chainId);
-    }
-    return this.toToken(token);
-  };
-  RouterTradeAdapter.toToken = function toToken(token) {
-    var chainId = token.chainId,
-      address = token.address,
-      decimals = token.decimals,
-      symbol = token.symbol,
-      buyFeeBps = token.buyFeeBps,
-      sellFeeBps = token.sellFeeBps;
-    return new Token(chainId, address, parseInt(decimals.toString()), symbol, /* name */undefined, false, buyFeeBps ? BigNumber.from(buyFeeBps) : undefined, sellFeeBps ? BigNumber.from(sellFeeBps) : undefined);
-  };
-  RouterTradeAdapter.toPool = function toPool(_ref) {
-    var fee = _ref.fee,
-      sqrtRatioX96 = _ref.sqrtRatioX96,
-      liquidity = _ref.liquidity,
-      tickCurrent = _ref.tickCurrent,
-      tokenIn = _ref.tokenIn,
-      tokenOut = _ref.tokenOut;
-    return new Pool(RouterTradeAdapter.toToken(tokenIn), RouterTradeAdapter.toToken(tokenOut), parseInt(fee), sqrtRatioX96, liquidity, parseInt(tickCurrent));
-  };
-  RouterTradeAdapter.isVersionedRoute = function isVersionedRoute(type, route) {
-    return route.every(function (pool) {
-      return pool.type === type;
-    });
-  };
-  return RouterTradeAdapter;
-}();
-RouterTradeAdapter.toPoolOrPair = function (pool) {
-  return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool);
-};
-RouterTradeAdapter.toPair = function (_ref2) {
-  var reserve0 = _ref2.reserve0,
-    reserve1 = _ref2.reserve1;
-  return new Pair(CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient), CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient));
-};
-
-export { CommandType, CryptopunkTrade, FoundationTrade, LooksRareV2Trade, Market, NFT20Trade, NFTTrade, NFTXTrade, PERMIT2_ADDRESS, PoolType, ROUTER_AS_RECIPIENT, RoutePlanner, RouterTradeAdapter, RouterTradeType, SeaportTrade, SudoswapTrade, SwapRouter, TokenType, UNIVERSAL_ROUTER_ADDRESS, UNIVERSAL_ROUTER_CREATION_BLOCK, UniswapTrade, UnwrapWETH, WETH_ADDRESS, X2Y2Trade, isNativeCurrency };
-//# sourceMappingURL=universal-router-sdk.esm.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
deleted file mode 100644
index 9c537ba..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n  [7777777]: {\n    router: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 11832155,\n  },\n  [324]: {\n    router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    creationBlock: 12640979,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","process","env","NODE_ENV","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","_createClass","key","get","inputAmount","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","_iterator2","_step2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","_inheritsLoose","call","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","_iterator3","_step3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_iterator4","_step4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_iterator5","_step5","_iterator6","offer","_step6","identifierOrCriteria","inputTokens","_iterator7","_step7","_iterator8","_step8","_iterator9","consideration","_step9","totalOrderPrice","_iterator10","_step10","calculateValue","_iterator11","_step11","_iterator12","_step12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/computePriceImpact.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/computePriceImpact.d.ts
new file mode 100644
index 0000000..d42257e
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/computePriceImpact.d.ts
@@ -0,0 +1,8 @@
+import { Currency, CurrencyAmount, Percent, Price } from '../entities';
+/**
+ * Returns the percent difference between the mid price and the execution price, i.e. price impact.
+ * @param midPrice mid price before the trade
+ * @param inputAmount the input amount of the trade
+ * @param outputAmount the output amount of the trade
+ */
+export declare function computePriceImpact<TBase extends Currency, TQuote extends Currency>(midPrice: Price<TBase, TQuote>, inputAmount: CurrencyAmount<TBase>, outputAmount: CurrencyAmount<TQuote>): Percent;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/computeZksyncCreate2Address.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/computeZksyncCreate2Address.d.ts
new file mode 100644
index 0000000..a746f72
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/computeZksyncCreate2Address.d.ts
@@ -0,0 +1,2 @@
+import { BytesLike } from '@ethersproject/bytes';
+export declare function computeZksyncCreate2Address(sender: string, bytecodeHash: BytesLike, salt: BytesLike, input?: BytesLike): string;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts
deleted file mode 100644
index 27e31c8..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { BigNumber } from 'ethers';
-export declare const UNIVERSAL_ROUTER_ADDRESS: (chainId: number) => string;
-export declare const UNIVERSAL_ROUTER_CREATION_BLOCK: (chainId: number) => number;
-export declare const WETH_ADDRESS: (chainId: number) => string;
-export declare const PERMIT2_ADDRESS = "0x000000000022D473030F116dDEE9F6B43aC78BA3";
-export declare const CONTRACT_BALANCE: BigNumber;
-export declare const ETH_ADDRESS = "0x0000000000000000000000000000000000000000";
-export declare const E_ETH_ADDRESS = "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
-export declare const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";
-export declare const MAX_UINT256: BigNumber;
-export declare const MAX_UINT160: BigNumber;
-export declare const SENDER_AS_RECIPIENT = "0x0000000000000000000000000000000000000001";
-export declare const ROUTER_AS_RECIPIENT = "0x0000000000000000000000000000000000000002";
-export declare const OPENSEA_CONDUIT_SPENDER_ID = 0;
-export declare const SUDOSWAP_SPENDER_ID = 1;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/getNativeCurrencyValue.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/getNativeCurrencyValue.d.ts
deleted file mode 100644
index b13322f..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/getNativeCurrencyValue.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { Currency, CurrencyAmount } from '@uniswap/sdk-core';
-export declare function getNativeCurrencyValue(currencyValues: CurrencyAmount<Currency>[]): CurrencyAmount<Currency>;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/index.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/index.d.ts
new file mode 100644
index 0000000..c31036d
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/index.d.ts
@@ -0,0 +1,5 @@
+export { computePriceImpact } from './computePriceImpact';
+export { computeZksyncCreate2Address } from './computeZksyncCreate2Address';
+export { sortedInsert } from './sortedInsert';
+export { sqrt } from './sqrt';
+export { validateAndParseAddress } from './validateAndParseAddress';
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/inputTokens.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/inputTokens.d.ts
deleted file mode 100644
index 2a14891..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/inputTokens.d.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-import { PermitSingle } from '@uniswap/permit2-sdk';
-import { RoutePlanner } from './routerCommands';
-export interface Permit2Permit extends PermitSingle {
-    signature: string;
-}
-export declare type ApproveProtocol = {
-    token: string;
-    protocol: string;
-};
-export declare type Permit2TransferFrom = {
-    token: string;
-    amount: string;
-    recipient?: string;
-};
-export declare type InputTokenOptions = {
-    approval?: ApproveProtocol;
-    permit2Permit?: Permit2Permit;
-    permit2TransferFrom?: Permit2TransferFrom;
-};
-export declare function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void;
-export declare function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions): void;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/numbers.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/numbers.d.ts
deleted file mode 100644
index 15a8757..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/numbers.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-import { BigNumber } from 'ethers';
-import JSBI from 'jsbi';
-import { Percent } from '@uniswap/sdk-core';
-export declare function expandTo18DecimalsBN(n: number): BigNumber;
-export declare function expandTo18Decimals(n: number): JSBI;
-export declare function encodeFeeBips(fee: Percent): string;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/routerCommands.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/routerCommands.d.ts
deleted file mode 100644
index 8f1bd62..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/routerCommands.d.ts
+++ /dev/null
@@ -1,50 +0,0 @@
-/**
- * CommandTypes
- * @description Flags that modify a command's execution
- * @enum {number}
- */
-export declare enum CommandType {
-    V3_SWAP_EXACT_IN = 0,
-    V3_SWAP_EXACT_OUT = 1,
-    PERMIT2_TRANSFER_FROM = 2,
-    PERMIT2_PERMIT_BATCH = 3,
-    SWEEP = 4,
-    TRANSFER = 5,
-    PAY_PORTION = 6,
-    V2_SWAP_EXACT_IN = 8,
-    V2_SWAP_EXACT_OUT = 9,
-    PERMIT2_PERMIT = 10,
-    WRAP_ETH = 11,
-    UNWRAP_WETH = 12,
-    PERMIT2_TRANSFER_FROM_BATCH = 13,
-    BALANCE_CHECK_ERC20 = 14,
-    SEAPORT_V1_5 = 16,
-    LOOKS_RARE_V2 = 17,
-    NFTX = 18,
-    CRYPTOPUNKS = 19,
-    OWNER_CHECK_721 = 21,
-    OWNER_CHECK_1155 = 22,
-    SWEEP_ERC721 = 23,
-    X2Y2_721 = 24,
-    SUDOSWAP = 25,
-    NFT20 = 26,
-    X2Y2_1155 = 27,
-    FOUNDATION = 28,
-    SWEEP_ERC1155 = 29,
-    ELEMENT_MARKET = 30,
-    SEAPORT_V1_4 = 32,
-    EXECUTE_SUB_PLAN = 33,
-    APPROVE_ERC20 = 34
-}
-export declare class RoutePlanner {
-    commands: string;
-    inputs: string[];
-    constructor();
-    addSubPlan(subplan: RoutePlanner): void;
-    addCommand(type: CommandType, parameters: any[], allowRevert?: boolean): void;
-}
-export declare type RouterCommand = {
-    type: CommandType;
-    encodedInput: string;
-};
-export declare function createCommand(type: CommandType, parameters: any[]): RouterCommand;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/routerTradeAdapter.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/routerTradeAdapter.d.ts
deleted file mode 100644
index f6fe21a..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/routerTradeAdapter.d.ts
+++ /dev/null
@@ -1,57 +0,0 @@
-import { Trade as RouterTrade } from '@uniswap/router-sdk';
-import { Currency, TradeType } from '@uniswap/sdk-core';
-export declare type TokenInRoute = {
-    address: string;
-    chainId: number;
-    symbol: string;
-    decimals: string;
-    name?: string;
-    buyFeeBps?: string;
-    sellFeeBps?: string;
-};
-export declare enum PoolType {
-    V2Pool = "v2-pool",
-    V3Pool = "v3-pool"
-}
-export declare type V2Reserve = {
-    token: TokenInRoute;
-    quotient: string;
-};
-export declare type V2PoolInRoute = {
-    type: PoolType.V2Pool;
-    address?: string;
-    tokenIn: TokenInRoute;
-    tokenOut: TokenInRoute;
-    reserve0: V2Reserve;
-    reserve1: V2Reserve;
-    amountIn?: string;
-    amountOut?: string;
-};
-export declare type V3PoolInRoute = {
-    type: PoolType.V3Pool;
-    address?: string;
-    tokenIn: TokenInRoute;
-    tokenOut: TokenInRoute;
-    sqrtRatioX96: string;
-    liquidity: string;
-    tickCurrent: string;
-    fee: string;
-    amountIn?: string;
-    amountOut?: string;
-};
-export declare type PartialClassicQuote = {
-    tokenIn: string;
-    tokenOut: string;
-    tradeType: TradeType;
-    route: Array<(V3PoolInRoute | V2PoolInRoute)[]>;
-};
-export declare const isNativeCurrency: (address: string) => boolean;
-export declare class RouterTradeAdapter {
-    static fromClassicQuote(quote: PartialClassicQuote): RouterTrade<Currency, Currency, TradeType>;
-    private static toCurrency;
-    private static toPoolOrPair;
-    private static toToken;
-    private static toPool;
-    private static toPair;
-    private static isVersionedRoute;
-}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/sortedInsert.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/sortedInsert.d.ts
new file mode 100644
index 0000000..9edf215
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/sortedInsert.d.ts
@@ -0,0 +1 @@
+export declare function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/sqrt.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/sqrt.d.ts
new file mode 100644
index 0000000..84c1f1a
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/sqrt.d.ts
@@ -0,0 +1,7 @@
+import JSBI from 'jsbi';
+export declare const MAX_SAFE_INTEGER: JSBI;
+/**
+ * Computes floor(sqrt(value))
+ * @param value the value for which to compute the square root, rounded down
+ */
+export declare function sqrt(value: JSBI): JSBI;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/validateAndParseAddress.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/validateAndParseAddress.d.ts
new file mode 100644
index 0000000..e61de07
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/validateAndParseAddress.d.ts
@@ -0,0 +1,10 @@
+/**
+ * Validates an address and returns the parsed (checksummed) version of that address
+ * @param address the unchecksummed hex address
+ */
+export declare function validateAndParseAddress(address: string): string;
+/**
+ * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.
+ * @param address the unchecksummed hex address
+ */
+export declare function checkValidAddress(address: string): string;
